<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AgateLib</name>
    </assembly>
    <members>
        <member name="T:AgateLib.Serialization.Xle.XleSerializer">
            <summary>
            Class used to serialize data to a compact XML format.
            </summary>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializer.#ctor(System.Type)">
            <summary>
            Constructs the XleSerializer.  Pass in the type of the object which is 
            the root of the object graph which needs to be serialized.  This type must
            implement the IXleSerializable interface.
            </summary>
            <param name="objectType">The type of the object to serialize.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializer.Serialize(System.IO.Stream,AgateLib.Serialization.Xle.IXleSerializable)">
            <summary>
            Serializes an object which implements IXleSerializable to the specified stream.
            </summary>
            <param name="outStream">The stream to write the XML data to.</param>
            <param name="objectGraph">The object to serialize.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes an object from the XML data in the specified stream.
            </summary>
            <param name="inStream">The stream containing the XML data.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes an object from the XML data in the specified stream with the specified type.
            </summary>
            <typeparam name="T">Type to cast the return value to.</typeparam>
            <param name="inStream">The stream containing the XML data.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="P:AgateLib.Serialization.Xle.XleSerializer.Binder">
            <summary>
            An object which implements the AgateLib.Serialization.Xle.ITypeBinder interface.
            This object is used to convert strings to System.Type objects.  The default value
            for this property is an object of type AgateLib.Serialization.Xle.TypeBinder, but
            it may be replaced for custom type binding.
            </summary>
        </member>
        <member name="T:AgateLib.Resources.AgateResource">
            <summary>
            Class which represents a resource.
            </summary>
        </member>
        <member name="M:AgateLib.Resources.AgateResource.#ctor(System.String)">
            <summary>
            Constructs a base resource object.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AgateLib.Resources.AgateResource.BuildNodes(System.Xml.XmlElement,System.Xml.XmlDocument)">
            <summary>
            Serializes the AgateResource object to a subelement of parent.
            </summary>
            <param name="parent">The parent element of this resource.</param>
            <param name="doc">The XML document used to create elements.</param>
        </member>
        <member name="M:AgateLib.Resources.AgateResource.Clone">
            <summary>
            Override to construct a copy of the resource.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Resources.AgateResource.Name">
            <summary>
            Name of the resource
            </summary>
        </member>
        <member name="P:AgateLib.Resources.AgateResource.Language">
            <summary>
            Language this resource is to be used for.  If this is a language-independent
            resource, then the Language will be "Default".
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.ScreenMode">
            <summary>
            Class which contains information about an available screen mode.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.ScreenMode.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a ScreenMode object.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bpp"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.ScreenMode.SelectBestMode(System.Int32,System.Int32,System.Int32)">
            <summary>
            Searches through the available screen resolutions and selects the one
            which is the closest match for the parameters passed in.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bpp"></param>
            <returns>null if no screen mode could be found, otherwise the appropriate
            ScreenMode structure.</returns>
        </member>
        <member name="P:AgateLib.DisplayLib.ScreenMode.Width">
            <summary>
            Width of the screen mode in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ScreenMode.Height">
            <summary>
            Height of the screen mode in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ScreenMode.Bpp">
            <summary>
            Bits per pixel of the screen mode.
            </summary>
        </member>
        <member name="T:AgateLib.Sprites.SpriteFrame">
            <summary>
            Class for a single frame of a sprite.
            
            This class can automatically trim the frame, so that extra space around the
            object which is transparent is not drawn.  This is taken advantage of if 
            surfaces are packed to create a tighter packing and fit more objects on
            the same texture.
            
            SpriteFrame contains a reference count.  If you manually copy it, be sure
            to call AddRef unless you use the Clone method.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.ISpriteFrame">
            <summary>
            Basic interface implemented by a particular frame in a sprite.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.ISpriteFrame.Draw(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the frame.
            </summary>
            <param name="dest_x"></param>
            <param name="dest_y"></param>
            <param name="rotationCenterX"></param>
            <param name="rotationCenterY"></param>
        </member>
        <member name="P:AgateLib.DisplayLib.ISpriteFrame.Surface">
            <summary>
            Gets the surface object the frame is drawn from
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISpriteFrame.SourceRect">
            <summary>
            Gets the source rectangle on the surface the frame is drawn from.
            </summary>
        </member>
        <member name="M:AgateLib.Sprites.SpriteFrame.Clone">
            <summary>
            Copies this object.
            
            Actually, this just returns this
            object, since there are no unmanaged resources to deal with.  
            Be sure to Dispose the result when finished with it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Sprites.SpriteFrame.IsBlank">
            <summary>
            Returns true if the entire frame is transparent.
            </summary>
        </member>
        <member name="M:AgateLib.Sprites.SpriteFrame.Draw(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the sprite frame at the specified location rotated around the specified point.
            </summary>
            <param name="dest_x"></param>
            <param name="dest_y"></param>
            <param name="rotationCenterX"></param>
            <param name="rotationCenterY"></param>
        </member>
        <member name="M:AgateLib.Sprites.SpriteFrame.ToString">
            <summary>
            Converst to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Sprites.SpriteFrame.SourceRect">
            <summary>
            Gets or sets the source rectangle for this frame.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.SpriteFrame.Offset">
            <summary>
            Gets or sets the offset for drawing this frame.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.SpriteFrame.DisplaySize">
            <summary>
            Gets or sets the display size.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.SpriteFrame.Surface">
            <summary>
            
            </summary>
        </member>
        <member name="T:AgateLib.Sprites.IFrameList">
            <summary>
            Iterface implemented by a list of sprite frames.
            This provides a read-only view into the frames in a sprite.
            </summary>
        </member>
        <member name="M:AgateLib.Sprites.IFrameList.IndexOf(AgateLib.DisplayLib.ISpriteFrame)">
            <summary>
            Searches for a particular frame.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Sprites.IFrameList.Contains(AgateLib.DisplayLib.ISpriteFrame)">
            <summary>
            Returns a bool indicating whether the specified frame is
            contained in the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Sprites.IFrameList.CopyTo(AgateLib.DisplayLib.ISpriteFrame[],System.Int32)">
            <summary>
            Copies the list of frame to a target array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:AgateLib.Sprites.IFrameList.Count">
            <summary>
            Returns the number of frames in the list.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.IFrameList.Item(System.Int32)">
            <summary>
            Gets a frame by index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.ImplementationBase.DisplayWindowImpl">
            <summary>
            Implementation of DisplayWindow class.
            </summary>
        </member>
        <member name="T:AgateLib.ImplementationBase.IRenderTargetImpl">
            <summary>
            Defines the interface used for render targets.
            SurfaceImpl and DisplayWindowImpl implement this interface.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.IRenderTargetImpl.BeginRender">
            <summary>
            Utility functions that can be called by the rendering system
            when rendering starts and ends.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.IRenderTargetImpl.EndRender">
            <summary>
            Utility functions that can be called by the rendering system
            when rendering starts and ends.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IRenderTargetImpl.Size">
            <summary>
            Gets the Size of the render target, in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IRenderTargetImpl.Width">
            <summary>
            Gets the Height of the render target, in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IRenderTargetImpl.Height">
            <summary>
            Gets the Width of the render target, in pixels.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayWindowImpl.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayWindowImpl.ToggleFullScreen">
            <summary>
            Toggles windowed/fullscreen.
            If this is unsupported, this method should silently return
            (do not throw an error).
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayWindowImpl.ToggleFullScreen(System.Int32,System.Int32,System.Int32)">
            <summary>
            Toggles windowed/fullscreen.
            If this is unsupported, this method should silently return
            (do not throw an error).
            
            Attempts to match width, height and bpp as best as possible.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bpp"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayWindowImpl.SetWindowed">
            <summary>
            Sets the display to windowed.  Does nothing if the display is already
            windowed.  The DisplayWindow retains the same height and width as the
            previous full screen resolution.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayWindowImpl.SetFullScreen">
            <summary>
            Sets the display to a full screen Display.  This overload should use the
            same resolution as the desktop environment.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayWindowImpl.SetFullScreen(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the display to a full screen Display.  The resolution chosen is 
            driver/video card/monitor dependent, but it should be fairly close to
            values specified.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bpp"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayWindowImpl.BeginRender">
            <summary>
            Utility function which may be called by the DisplayImpl when 
            rendering begins.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayWindowImpl.EndRender">
            <summary>
            Utility function which may be called by the DisplayImpl when 
            rendering is done.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayWindowImpl.IsClosed">
            <summary>
            Returns true if the DisplayWindowImpl has been closed.
            This happens if the user clicks the close box, or Dispose is called.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayWindowImpl.IsFullScreen">
            <summary>
            Returns true if this DisplayWindowImpl is being used as a full-screen
            device.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayWindowImpl.Size">
            <summary>
            Gets or sets the size of the render area.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayWindowImpl.Width">
            <summary>
            Gets or sets the width of the render area.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayWindowImpl.Height">
            <summary>
            Gets or sets the height of the render area.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayWindowImpl.Title">
            <summary>
            Gets or sets the window title.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayWindowImpl.MousePosition">
            <summary>
            Gets or sets the mouse position within the render area.
            </summary>
        </member>
        <member name="T:AgateLib.ImplementationBase.AudioImpl">
            <summary>
            Implements Audio class factory.
            </summary>
        </member>
        <member name="T:AgateLib.ImplementationBase.DriverImplBase">
            <summary>
            Base class all driver classes should implement.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DriverImplBase.Initialize">
            <summary>
            Initialization beyond what the constructor does.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DriverImplBase.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DriverImplBase.Report(System.String)">
            <summary>
            Called by drivers in their Initialize routine to report
            which driver was instantiated.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.AudioImpl.CreateSoundBuffer(System.String)">
            <summary>
            Creates a SoundBufferImpl object.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.AudioImpl.CreateMusic(System.String)">
            <summary>
            Creates a MusicImpl object.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.AudioImpl.CreateMusic(System.IO.Stream)">
            <summary>
            Creates a MusicImpl object.
            </summary>
            <param name="musicStream"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.AudioImpl.CreateSoundBufferSession(AgateLib.ImplementationBase.SoundBufferImpl)">
            <summary>
            Creates a SoundBufferSessionImpl object.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.AudioImpl.CreateSoundBuffer(System.IO.Stream)">
            <summary>
            Creates a SoundBufferImpl object.
            </summary>
            <param name="inStream"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.AudioImpl.Update">
            <summary>
            This function is called once a frame to allow the Audio driver to update
            information.  There is no need to call base.Update() if overriding this
            function.
            </summary>
        </member>
        <member name="T:AgateLib.ImplementationBase.SoundBufferImpl">
            <summary>
            Implements a SoundBuffer
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.SoundBufferImpl.Dispose">
            <summary>
            Destroys unmanaged resources.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SoundBufferImpl.Volume">
            <summary>
            Gets or sets the volume this audio file is playing at.
            0.0 is completely quiet.
            0.5 sounds like half maximum volume
            1.0 is maximum volume.
            </summary>
        </member>
        <member name="T:AgateLib.ImplementationBase.SoundBufferSessionImpl">
            <summary>
            Represents a playback instance.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.SoundBufferSessionImpl.Dispose">
            <summary>
            Destroyes unmanaged resources.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.SoundBufferSessionImpl.Play">
            <summary>
            Starts at the beginning.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.SoundBufferSessionImpl.Stop">
            <summary>
            Stops.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SoundBufferSessionImpl.Volume">
            <summary>
            Gets or sets the volume this audio file is playing at.
            0.0 is completely quiet.
            0.5 sounds like half maximum volume
            1.0 is maximum volume.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SoundBufferSessionImpl.Pan">
            <summary>
            Gets or sets the left-right balance.
            -1 is left speaker
            0 is middle (both)
            1 is right.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SoundBufferSessionImpl.IsPlaying">
            <summary>
            Gets whether or not this playback instance is actually playing.
            </summary>
        </member>
        <member name="T:AgateLib.ImplementationBase.MusicImpl">
            <summary>
            Class which implements a Music object.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.MusicImpl.OnSetLoop(System.Boolean)">
            <summary>
            Function called when IsLooping is set to a new value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.MusicImpl.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.MusicImpl.Play">
            <summary>
            Start over at beginning.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.MusicImpl.Stop">
            <summary>
            Stop playing.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.MusicImpl.IsLooping">
            <summary>
            Gets or sets whether or not this Music is looping.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.MusicImpl.Volume">
            <summary>
            Gets or sets the volume this audio file is playing at.
            0.0 is completely quiet.
            0.5 sounds like half maximum volume
            1.0 is maximum volume.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.MusicImpl.Pan">
            <summary>
            Gets or sets the left-right balance.  This may or may not be supported
            by some drivers.
            -1 is entirely in the left speaker,
             0 is equally in both and,
             1 is entirely in the right speaker.
            
            If this is unsupported by the driver, don't allow impl.Pan to change from zero.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.MusicImpl.IsPlaying">
            <summary>
            Gets whether or not it's currently playing.
            </summary>
        </member>
        <member name="T:AgateLib.Drivers.SetSystemsDialogResult">
            <summary>
            Enum for the results of a call to IUserSetSystem.RunDialog
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.SetSystemsDialogResult.OK">
            <summary>
            Value for when the user pressed OK
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.SetSystemsDialogResult.Cancel">
            <summary>
            Value for when the user pressed CANCEL
            </summary>
        </member>
        <member name="T:AgateLib.Drivers.IUserSetSystems">
            <summary>
            Interface for asking the user which Agate drivers to invoke.
            </summary>
        </member>
        <member name="M:AgateLib.Drivers.IUserSetSystems.AddDisplayType(AgateLib.Drivers.AgateDriverInfo)">
            <summary>
            Adds a Display driver to the possible options.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:AgateLib.Drivers.IUserSetSystems.AddAudioType(AgateLib.Drivers.AgateDriverInfo)">
            <summary>
            Adds a Audio driver to the possible options.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:AgateLib.Drivers.IUserSetSystems.AddInputType(AgateLib.Drivers.AgateDriverInfo)">
            <summary>
            Adds a Input driver to the possible options.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:AgateLib.Drivers.IUserSetSystems.RunDialog">
            <summary>
            Shows the dialog asking the user what drivers to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Drivers.IUserSetSystems.SetChoices(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets which choices the user is presented with.
            </summary>
            <param name="chooseDisplay"></param>
            <param name="chooseAudio"></param>
            <param name="chooseInput"></param>
        </member>
        <member name="P:AgateLib.Drivers.IUserSetSystems.DisplayType">
            <summary>
            gets the selected Display driver
            </summary>
        </member>
        <member name="P:AgateLib.Drivers.IUserSetSystems.AudioType">
            <summary>
            Gets the selected Audio driver
            </summary>
        </member>
        <member name="P:AgateLib.Drivers.IUserSetSystems.InputType">
            <summary>
            Gets the selected Input driver
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.PixelFormat">
            <summary>
            Enum which describes different pixel formats.
            Order of the characters in the constant name specifies the
            ordering of the bytes for the pixel data, from least to most significant.
            See remarks for more information.
            </summary>
            <remarks>
            Order of the characters in the constant name specifies the
            ordering of the bytes for the pixel data, from least to most significant on 
            a little-endian architecture.  In other words, the first character indicates
            the meaning of the first byte or bits in memory.
            
            For example, ARGB8888 indicates that the alpha channel is the least significant,
            the blue channel is most significant, and each channel is eight bits long.
            The alpha channel is stored first in memory, followed by red, green and blue.
            </remarks>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.Any">
            <summary>
            Format specifying the Agate should choose what pixel format 
            to use, where appropriate.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.ARGB8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.ABGR8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.BGRA8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.RGBA8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.XRGB8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.XBGR8888">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.RGB888">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.BGR888">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.RGB565">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.XRGB1555">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.XBGR1555">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.PixelFormat.BGR565">
            <summary>
            
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.IRenderTarget">
            <summary>
            Defines the interface used for render targets.
            Implemented by DisplayWindow and Surface
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.IRenderTarget.Impl">
            <summary>
            Gets the library implementation of the render target.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.IRenderTarget.Width">
            <summary>
            Gets the width of the render target in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.IRenderTarget.Height">
            <summary>
            Gets the height of the render target in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.IRenderTarget.Size">
            <summary>
            Gets the size of the render target in pixels.
            </summary>
        </member>
        <member name="E:AgateLib.DisplayLib.IRenderTarget.Resize">
            <summary>
            Event that is fired when the render target is resized.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.DisplayWindow">
            <summary>
            A class representing a screen region which is used as a RenderTarget.
            </summary>
            <remarks>
            Creating a DisplayWindow can be done in two ways.  By specifying
            a title and width and height, the DisplayWindow will create and manage
            a window.
            
            Alternatively, a control may be specified to render into.
            </remarks>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.#ctor(AgateLib.Resources.AgateResourceCollection,System.String)">
            <summary>
            Constructs a DisplayWindow from a resource.
            </summary>
            <param name="resources"></param>
            <param name="name"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.#ctor(AgateLib.DisplayLib.CreateWindowParams)">
            <summary>
            Creates a DisplayWindow object using the specified CreateWindowParams to create
            the window.
            </summary>
            <param name="windowParams"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.CreateFromControl(System.Object)">
            <summary>
            Creates a DisplayWindow object using the specified System.Windows.Forms.Control
            object as a render context.  A DisplayWindow made in this manner cannot be made
            into a full-screen DisplayWindow.
            </summary>
            <remarks>Calling this function is equivalent to calling
            new DisplayWindow(CreateWindowParams.FromControl(control)).</remarks>
            <param name="control">Windows.Forms control which should be used as the
            render target.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.CreateFullScreen(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a DisplayWindow object which renders to the entire screen, setting
            the resolution to the value specified.
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.CreateWindowed(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a DisplayWindow object which generates a desktop window to render into.
            This overload creates a window which has the default icon and is not resizeable.
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.CreateWindowed(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a DisplayWindow object which generates a desktop window to render into.
            This overload creates a window which has the default icon and is not resizeable.
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="allowResize"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.CreateWindowed(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Creates a DisplayWindow object which generates a desktop window to render into.
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="iconFile"></param>
            <param name="allowResize"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.CreateNoFrame(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a DisplayWindow object which is a desktop window with no frame or
            titlebar.
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.SetWindowed">
            <summary>
            Sets the display to windowed.  Does nothing if the display is already
            windowed.  The DisplayWindow retains the same height and width as the
            previous full screen resolution.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.SetFullScreen">
            <summary>
            Sets the display to a full screen Display.  This overload uses the
            desktop resolution for the full-screen Display.
            </summary>
            <remarks>
            This call is not guaranteed to work; some drivers (eg. GDI) don't support 
            fullscreen displays.  If this fails it returns without any error
            thrown.  Check to see if it worked by examining IsFullScreen property.
            </remarks>
        </member>
        <member name="M:AgateLib.DisplayLib.DisplayWindow.SetFullScreen(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the display to a full screen Display.  The resolution chosen is 
            driver/video card/monitor dependent, but it should be fairly close to
            values specified.
            </summary>
            <remarks>
            This call is not guaranteed to work; some drivers (eg. GDI) don't support 
            fullscreen displays.  If this fails it returns without any error
            thrown.  Check to see if it worked by examining IsFullScreen property.
            </remarks>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bpp"></param>
        </member>
        <member name="P:AgateLib.DisplayLib.DisplayWindow.IsClosed">
            <summary>
            Returns true if this DisplayWindow has been closed, either
            by a call to Dispose(), or perhaps the user clicked the close
            box in a form.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.DisplayWindow.Size">
            <summary>
            Gets or sets the size of the client area in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.DisplayWindow.Width">
            <summary>
            Gets or sets the width of the client area in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.DisplayWindow.Height">
            <summary>
            Gets or sets the height of the client area in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.DisplayWindow.MousePosition">
            <summary>
            Gets or sets the position of the cursor, in the 
            client coordinates of the window.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.DisplayWindow.Impl">
            <summary>
            Returns the DisplayWindowImpl object.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.DisplayWindow.Title">
            <summary>
            Gets or sets the title of the window.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.DisplayWindow.IsFullScreen">
            <summary>
            Returns true if this window is displayed fullscreen.
            </summary>
        </member>
        <member name="E:AgateLib.DisplayLib.DisplayWindow.Resize">
            <summary>
            Event raised when the window is resized by the user.
            </summary>
        </member>
        <member name="T:AgateLib.Timing">
            <summary>
            Static class which handles timing.  This is often used
            to update object positions and animations.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.Pause">
            <summary>
            Increments the pause counter.
            If the counter is greater than zero, the timer won't advance.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.Resume">
            <summary>
            Decrements the pause counter.
            If the pause counter is zero the timer will begin advancing.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.ForceResume">
            <summary>
            Sets the pause counter to zero, causing the timer to begin advancing
            regardless of how many calls to Pause() are made.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.PauseAllTimers">
            <summary>
            Calls Pause() on all timers, and fires the PauseAllTimersEvent.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.ResumeAllTimers">
            <summary>
            Calls Resume() on all timers, and fires the ResumeAllTimersEvent.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.ForceResumeAllTimers">
            <summary>
            Calls ForceResume on all timers, and fires the ResumeAllTimersEvent.
            You probably don't want to use this one much.
            </summary>
        </member>
        <member name="P:AgateLib.Timing.TotalSeconds">
            <summary>
            Returns the number of seconds since the application started.
            </summary>
        </member>
        <member name="P:AgateLib.Timing.TotalMilliseconds">
            <summary>
            Returns the number of milliseconds since the application started.
            </summary>
        </member>
        <member name="T:AgateLib.Timing.StopWatch">
            <summary>
            Class which represents a StopWatch.
            A StopWatch can be paused and reset independently of other
            StopWatches.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.StopWatch.#ctor">
            <summary>
            Constructs a timer object, and immediately begins 
            keeping track of time.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.StopWatch.#ctor(System.Boolean)">
            <summary>
            Constructs a timer object.
            If the timer starts paused, a call to Resume() must be made
            for it to begin keeping track of time.
            </summary>
            <param name="autostart">Pass true to immediately begin keeping track of time.
            False to pause the timer initially.</param>
        </member>
        <member name="M:AgateLib.Timing.StopWatch.Dispose">
            <summary>
            Destroys this timer.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.StopWatch.Dispose(System.Boolean)">
            <summary>
            Removes this timer from events.
            </summary>
            <param name="manual"></param>
        </member>
        <member name="M:AgateLib.Timing.StopWatch.Reset">
            <summary>
            Resets the timer to zero.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.StopWatch.Pause">
            <summary>
            Increments the pause counter.
            If the counter is greater than zero, the timer won't advance.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.StopWatch.Resume">
            <summary>
            Decrements the pause counter.
            If the pause counter is zero the timer will begin advancing.
            </summary>
        </member>
        <member name="M:AgateLib.Timing.StopWatch.ForceResume">
            <summary>
            Sets the pause counter to zero, causing the timer to begin advancing
            regardless of how many calls to Pause() are made.
            </summary>
        </member>
        <member name="P:AgateLib.Timing.StopWatch.TotalSeconds">
            <summary>
            Returns the number of seconds since the timer started.
            </summary>
        </member>
        <member name="P:AgateLib.Timing.StopWatch.TotalMilliseconds">
            <summary>
            Returns the number of ticks (milliseconds) since the timer started.
            </summary>
        </member>
        <member name="P:AgateLib.Timing.StopWatch.IsPaused">
            <summary>
            Gets whether or not this StopWatch is paused.
            </summary>
        </member>
        <member name="T:AgateLib.AgateFileProvider">
            <summary>
            Provides an interface for opening files.  Objects implementing IFileProvider can
            be added to separate lists for images, sounds, etc. which are used to find files
            when Surfaces, SoundBuffers, etc. are constructed.
            </summary>
        </member>
        <member name="M:AgateLib.AgateFileProvider.SaveStreamToTempFile(System.IO.Stream)">
            <summary>
            Saves a stream to a file in the temp path.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.AgateFileProvider.Assemblies">
            <summary>
            The file provider for getting driver assemblies.  It is not recommended that you use this
            because it will cause assemblies to be loaded in the "LoadFrom" context.  Instead, place
            driver assemblies in the same directory as the application.
            </summary>
        </member>
        <member name="P:AgateLib.AgateFileProvider.Images">
            <summary>
            A list of the default file providers for opening images when a Surface is constructed.
            </summary>
        </member>
        <member name="P:AgateLib.AgateFileProvider.Sounds">
            <summary>
            A list of the default file providers for opening sounds when a SoundBuffer is constructed.
            </summary>
        </member>
        <member name="P:AgateLib.AgateFileProvider.Music">
            <summary>
            A list of the default file providers for opening sounds when a Music object is constructed.
            </summary>
        </member>
        <member name="P:AgateLib.AgateFileProvider.Resources">
            <summary>
            A list of the default file providers for opening resources.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.TgzFileProvider">
            <summary>
            TgzFileProvider implements IFileProvider and provides read access to gzipped
            tar archives.  This provides basic support for reading files from a compressed
            archive external to the application.
            </summary>
        </member>
        <member name="T:AgateLib.IFileProvider">
            <summary>
            Public interface that should be implemented 
            </summary>
        </member>
        <member name="M:AgateLib.IFileProvider.OpenRead(System.String)">
            <summary>
            Opens the specified file returning a stream.  Throws 
            FileNotFoundException if the file does not exist.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.IFileProvider.FileExists(System.String)">
            <summary>
            Checks to if the specified file exists in the file provider.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.IFileProvider.GetAllFiles">
            <summary>
            Enumerates through all filenames in the file provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.IFileProvider.GetAllFiles(System.String)">
            <summary>
            Enumerates through all filenames which match the specified search pattern.
            </summary>
            <remarks>The search pattern is not regex style pattern matching, rather it should 
            be bash pattern matching, so a searchPattern of "*" would match all files, and
            "*.*" would match all filenames with a period in them.</remarks>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.TgzFileProvider.#ctor(System.String)">
            <summary>
            Constructs a TgzFileProvider to read from the specified archive.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:AgateLib.Utility.TgzFileProvider.#ctor(System.String,System.Byte[])">
            <summary>
            Constructs a TgzFileProvider to read from the specified archive from archive data
            loaded into a byte array.  This overload is useful for a tar.gz file embedded as a resource.
            </summary>
            <param name="name"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:AgateLib.Utility.TgzFileProvider.#ctor(System.String,System.IO.Stream)">
            <summary>
            Constructs a TgzFileProvider to read from the specified archive.
            </summary>
            <param name="name">A name used to identify this stream in debugging information.</param>
            <param name="fileStream"></param>
        </member>
        <member name="M:AgateLib.Utility.TgzFileProvider.OpenRead(System.String)">
            <summary>
            Opens the specified file in the archive for reading.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.TgzFileProvider.FileExists(System.String)">
            <summary>
            Returns true if the specified file exists in the archive.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.TgzFileProvider.GetAllFiles">
            <summary>
            Enumerates all files in the archive.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.TgzFileProvider.GetAllFiles(System.String)">
            <summary>
            Enumerates all files matching the pattern.
            </summary>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.Serialization.Xle.XleSerializationException">
            <summary>
            Exception thrown when there is a problem in the XleSerializer.
            </summary>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs an XleSerializationException object when deserializing it.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AgateLib.Resources.SurfaceResource">
            <summary>
            Resource which loads a surface. <br/>
            XML Attributes:<br/> 
              string name, string filename
            </summary>
        </member>
        <member name="M:AgateLib.Resources.SurfaceResource.#ctor(System.String)">
            <summary>
            Constructs a SurfaceResource object.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AgateLib.Resources.SurfaceResource.Clone">
            <summary>
            Clones the SurfaceResource object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Resources.SurfaceResource.Filename">
            <summary>
            Gets or sets the filename for the surface to be created from.
            </summary>
        </member>
        <member name="T:AgateLib.InputLib.KeyCode">
            <summary>
            An enumeration of all possible key values.
            These values (mostly) correspond to the values used in System.Windows.Forms.Keys
            in .NET 2.0.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.None">
            <summary>
            No key pressed.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.BackSpace">
            <summary>
            Backspace key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Tab">
            <summary>
            Tab key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.LineFeed">
            <summary>
            Dunno what this is.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Clear">
            <summary>
            Dunno what this is.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Return">
            <summary>
            Return key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Enter">
            <summary>
            Enter key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Pause">
            <summary>
            Pause Key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.CapsLock">
            <summary>
            Caps Lock key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Escape">
            <summary>
            Escape key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Space">
            <summary>
            Space bar.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.PageUp">
            <summary>
            PageUp key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.PageDown">
            <summary>
            PageDown key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.End">
            <summary>
            End key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Home">
            <summary>
            Home key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Left">
            <summary>
            Left Arrow key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Up">
            <summary>
            Up Arrow key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Right">
            <summary>
            Right arrow key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Down">
            <summary>
            Down arrow key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Select">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Print">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Execute">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.PrintScreen">
            <summary>
            PrintScreen key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Insert">
            <summary>
            Insert key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Delete">
            <summary>
            Delete key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Help">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.D0">
            <summary>
            Zero key on main keyboard.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.D1">
            <summary>
            One key on main keyboard
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.D2">
            <summary>
            Two key on main keyboard
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.D3">
            <summary>
            Three key on main keyboard
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.D4">
            <summary>
            Four key on main keyboard
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.D5">
            <summary>
            Five key on main keyboard
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.D6">
            <summary>
            Six key on main keyboard
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.D7">
            <summary>
            Seven key on main keyboard
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.D8">
            <summary>
            Eight key on main keyboard
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.D9">
            <summary>
            Nine key on main keyboard
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.A">
            <summary>
            A key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.B">
            <summary>
            B key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.C">
            <summary>
            C key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.D">
            <summary>
            D key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.E">
            <summary>
            E key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F">
            <summary>
            F key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.G">
            <summary>
            G key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.H">
            <summary>
            H key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.I">
            <summary>
            I key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.J">
            <summary>
            J key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.K">
            <summary>
            K key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.L">
            <summary>
            L key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.M">
            <summary>
            M key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.N">
            <summary>
            N key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.O">
            <summary>
            O key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.P">
            <summary>
            P key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Q">
            <summary>
            Q key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.R">
            <summary>
            R key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.S">
            <summary>
            S key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.T">
            <summary>
            T key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.U">
            <summary>
            U key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.V">
            <summary>
            V key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.W">
            <summary>
            W key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.X">
            <summary>
            X key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Y">
            <summary>
            Y key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Z">
            <summary>
            Z key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.WinLeft">
            <summary>
            Left windows key 
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.WinRight">
            <summary>
            Right windows key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Menu">
            <summary>
            Menu key, usually between right windows key and right control key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Sleep">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPad0">
            <summary>
            Numeric keypad key 0
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPad1">
            <summary>
            Numeric keypad key 1
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPad2">
            <summary>
            Numeric keypad key 2
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPad3">
            <summary>
            Numeric keypad key 3
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPad4">
            <summary>
            Numeric keypad key 4
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPad5">
            <summary>
            Numeric keypad key 5
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPad6">
            <summary>
            Numeric keypad key 6
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPad7">
            <summary>
            Numeric keypad key 7
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPad8">
            <summary>
            Numeric keypad key 8
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPad9">
            <summary>
            Numeric keypad key 9
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPadMultiply">
            <summary>
            Numeric keypad key *
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPadPlus">
            <summary>
            Numeric keypad key +
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Separator">
            <summary>
            ?
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPadMinus">
            <summary>
            Numeric keypad key -
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPadPeriod">
            <summary>
            Numeric keypad key period
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumPadSlash">
            <summary>
            Numeric keypad key /
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F1">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F2">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F3">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F4">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F5">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F6">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F7">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F8">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F9">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F10">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F11">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F12">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F13">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F14">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F15">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F16">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F17">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F18">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F19">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F20">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F21">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F22">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F23">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.F24">
            <summary>
            Function key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.NumLock">
            <summary>
            NumLock key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.ScrollLock">
            <summary>
            Scroll Lock key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.ShiftLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.ShiftRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.ControlLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.ControlRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.BrowserBack">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.BrowserForward">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.BrowserRefresh">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.BrowserStop">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.BrowserSearch">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.BrowserFavorites">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.BrowserHome">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.VolumeMute">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.VolumeDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.VolumeUp">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.MediaNextTrack">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.MediaPreviousTrack">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.MediaStop">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.MediaPlayPause">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.LaunchMail">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.SelectMedia">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.LaunchApplication1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.LaunchApplication2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Semicolon">
            <summary>
            Semicolon key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Oem1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Plus">
            <summary>
            Plus and equals key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Comma">
            <summary>
            Comma and less-than key. 
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Minus">
            <summary>
            Minus and underscore key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Period">
            <summary>
            Period and greater-than key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Slash">
            <summary>
            Slash and question mark key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Tilde">
            <summary>
            Left angled quote and tilde key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.OpenBracket">
            <summary>
            Open bracket and brace key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.BackSlash">
            <summary>
            Backslash and pipe key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.CloseBracket">
            <summary>
            Close bracket and brace key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Quotes">
            <summary>
            Single and double quotes key.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Oem8">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Shift">
            <summary>
            Shift key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Control">
            <summary>
            Control key
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.KeyCode.Alt">
            <summary>
            Alt key
            </summary>
        </member>
        <member name="T:AgateLib.ImplementationBase.FontSurfaceImpl">
            <summary>
            Implements a FontSurface
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.FontSurfaceImpl.StringDisplayWidth(System.String)">
            <summary>
            Measures the width of the given string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.FontSurfaceImpl.StringDisplayHeight(System.String)">
            <summary>
            Measures the height of the given string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.FontSurfaceImpl.StringDisplaySize(System.String)">
            <summary>
            Measures the size of the given string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.FontSurfaceImpl.DrawText(System.Int32,System.Int32,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.FontSurfaceImpl.DrawText(System.Double,System.Double,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.FontSurfaceImpl.DrawText(AgateLib.Geometry.Point,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.FontSurfaceImpl.DrawText(AgateLib.Geometry.PointF,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.FontSurfaceImpl.SetScale(System.Double,System.Double)">
            <summary>
            Sets ScaleWidth and ScaleHeight.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.FontSurfaceImpl.GetScale(System.Double@,System.Double@)">
            <summary>
            Gets ScaleWidth and ScaleHeight.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.FontSurfaceImpl.Dispose">
            <summary>
            Disposes of unmanaged resources.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.FontSurfaceImpl.FontHeight">
            <summary>
            Gets the height of a single line of text.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.FontSurfaceImpl.DisplayAlignment">
            <summary>
            Sets how to interpret the point given to DrawText methods.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.FontSurfaceImpl.Color">
            <summary>
            Sets the color of the text to be drawn.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.FontSurfaceImpl.Alpha">
            <summary>
            Sets the alpha value of the text to be drawn.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.FontSurfaceImpl.ScaleWidth">
            <summary>
            Gets or sets the amount the width is scaled when the text is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.FontSurfaceImpl.ScaleHeight">
            <summary>
            Gets or sets the amount the height is scaled when the text is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.StringTransformer">
            <summary>
            Static class for basic string transformers.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.StringTransformer.Transform(System.String)">
            <summary>
            Method which is called to actually convert the string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="F:AgateLib.DisplayLib.StringTransformer.None">
            <summary>
            Object which does no transformation
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.StringTransformer.ToUpper">
            <summary>
            Object which converts a string to upper case.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.StringTransformer.ToLower">
            <summary>
            Object which converts a string to lower case.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.StringTransformer.Trans_NoTransformation">
            <summary>
            Class which does not do any transformation
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.StringTransformer.Trans_NoTransformation.Transform(System.String)">
            <summary>
            Method which is called to actually convert the string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.DisplayLib.StringTransformer.Trans_ToUpperCase">
            <summary>
            Class which converts string to upper case.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.StringTransformer.Trans_ToUpperCase.Transform(System.String)">
            <summary>
            Method which is called to actually convert the string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.DisplayLib.StringTransformer.Trans_ToLowerCase">
            <summary>
            Class which converts string to lower case.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.StringTransformer.Trans_ToLowerCase.Transform(System.String)">
            <summary>
            Method which is called to actually convert the string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.DisplayLib.ISprite">
            <summary>
            Basic interface implemented by different sprite classes.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.ISurface">
            <summary>
            Public Surface interface.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.ISurface.Draw(AgateLib.Geometry.Point)">
            <summary>
            Draws the surface at the specified point.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.ISurface.Draw(AgateLib.Geometry.PointF)">
            <summary>
            Draws the surface at the specified point.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.ISurface.Draw(System.Int32,System.Int32)">
            <summary>
            Draws the surface at the specified point.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.ISurface.Draw(System.Single,System.Single)">
            <summary>
            Draws the surface at the specified point.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.ISurface.GetScale(System.Double@,System.Double@)">
            <summary>
            Gets the current scale values.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.ISurface.IncrementRotationAngle(System.Double)">
            <summary>
            Increases the rotation angle.
            </summary>
            <param name="radians"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.ISurface.IncrementRotationAngleDegrees(System.Double)">
            <summary>
            Increases the rotation angle.
            </summary>
            <param name="degrees"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.ISurface.SetScale(System.Double,System.Double)">
            <summary>
            Sets the width and height scale values simultaneously.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.Alpha">
            <summary>
            Gets or sets the alpha value for the surface.
            0.0 is completely transparent and 1.0 is completely opaque.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.Color">
            <summary>
            Gets or sets the color the surface is multiplied by when drawn.
            Setting this value overwrites the Alpha value.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.ColorGradient">
            <summary>
            Gets or sets a color gradient used for this surface.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.DisplayAlignment">
            <summary>
            Gets or sets how coordinate arguments to Draw overloads are interpreted.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.DisplayHeight">
            <summary>
            Gets or sets the display height of the surface, in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.DisplaySize">
            <summary>
            Gets or sets the display size of the surface, in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.DisplayWidth">
            <summary>
            Gets or sets the display width of the surface, in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.RotationAngle">
            <summary>
            The amount the surface is rotated when drawn.  The angle is measured
            up from the horizontal axis.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.RotationAngleDegrees">
            <summary>
            The amount the surface is rotated when drawn.  The angle is measured
            up from the horizontal axis.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.RotationCenter">
            <summary>
            The point where the surface is rotated around when drawn.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.ScaleHeight">
            <summary>
            The amount the height of the surface is scaled when drawn.  1.0 is no scaling.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.ScaleWidth">
            <summary>
            The amount the width of the surface is scaled when drawn.  1.0 is no scaling.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.SurfaceHeight">
            <summary>
            Gets the height of the surface data in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.SurfaceSize">
            <summary>
            Gets the size of the surface data in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISurface.SurfaceWidth">
            <summary>
            Gets the width of the surface data in pixels.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.ISprite.AdvanceFrame">
            <summary>
            Shows the next frame in the sequence.  This pays attention
            to whether the animation is playing forwards or reverse.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.ISprite.Update">
            <summary>
            Updates the animation of the sprite, using the DeltaTime given
            by the Display object.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.ISprite.Update(System.Double)">
            <summary>
            Updates the animation of the sprite, using the given frame time.
            </summary>
            <param name="time_ms">The amount of time to consider passed, in milliseconds.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.ISprite.StartAnimation">
            <summary>
            Restarts the animation.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISprite.AnimationType">
            <summary>
            Gets or sets an enum value indicating what type of animation is happening.
            Looping - The animation will play from beginning to end and then restart.
            PingPong - The animation will play from beginning to end and then from end to beginning (continuously).
            Once - The animation plays once, and then shows its first frame.
            OnceHoldLast - The animation plays once, and leaves the last frame on.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISprite.CurrentFrame">
            <summary>
            Gets the currently displaying frame.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISprite.CurrentFrameIndex">
            <summary>
            The index of the current frame.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISprite.IsAnimating">
            <summary>
            Gets or sets a flag which indicates:
            True if the animation is running.
            False if a single frame will be shown indefinitely.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISprite.PlayReverse">
            <summary>
            Gets or sets a flag which indicates whether or not this animation plays in 
            reverse instead.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISprite.SpriteHeight">
            <summary>
            Gets height of the sprite.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISprite.SpriteSize">
            <summary>
            Gets the size of the sprite.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISprite.SpriteWidth">
            <summary>
            Gets width of the sprite.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISprite.Frames">
            <summary>
            Gets the list of SpriteFrame objects in this sprite.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISprite.TimePerFrame">
            <summary>
            The amount of time each frame should display, in milliseconds.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.ISprite.Visible">
            <summary>
            If Visible is set to false, all calls to Draw overloads are ignored.
            </summary>
        </member>
        <member name="E:AgateLib.DisplayLib.ISprite.AnimationStarted">
            <summary>
            Event which is raised when the animation is started.
            </summary>
        </member>
        <member name="E:AgateLib.DisplayLib.ISprite.AnimationStopped">
            <summary>
            Event which is raised when the animation is stopped.
            </summary>
        </member>
        <member name="E:AgateLib.DisplayLib.ISprite.PlayDirectionChanged">
            <summary>
            Event which is raised when the play direction is changed, as
            in the PingPong type.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.SpriteEventHandler">
            <summary>
            Event handler type for sprite events.
            </summary>
            <param name="caller"></param>
        </member>
        <member name="T:AgateLib.DisplayLib.SpriteAnimType">
            <summary>
            Enum indicating the different types of automatic animation that
            take place.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.SpriteAnimType.Looping">
            <summary>
            Specifies that the sprite animation should go from
            frame 0 to the end, and start back at frame 0 to repeat.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.SpriteAnimType.PingPong">
            <summary>
            Specifies that the sprite animation should go from
            frame 0 to the end, and then go back down to frame 0.  This
            cycle repeats indefinitely.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.SpriteAnimType.Once">
            <summary>
            Specifies that the sprite animation should go from
            frame 0 to the end and stop, but show frame 0 once the animation
            is finished.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.SpriteAnimType.OnceHoldLast">
            <summary>
            Specifies that the sprite animation should go from
            frame 0 to the end and stop there, with the last frame
            shown.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.SpriteAnimType.OnceDisappear">
            <summary>
            Specifies that the sprite animation should go from
            frame 0 to the end, and then disappear.  The Visible
            property of the Sprite object is set to false once
            the animation is complete.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.SpriteAnimType.Twice">
            <summary>
            Specifies that the sprite animation should go twice.
            </summary>
        </member>
        <member name="T:AgateLib.ImplementationBase.IDisplayCaps">
            <summary>
            Interface which allows querying of Display capabilities.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.SupportsFullScreen">
            <summary>
            Indicates whether or not full screen windows can be created.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.SupportsFullScreenModeSwitching">
            <summary>
            Indicates whether or not the screen resolution can be changed.
            If the Display driver supports full screen but not mode switching,
            then a DisplayWindow which is created with as a full screen window
            cannot change resolutions after it is initially set.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.SupportsScaling">
            <summary>
            - Indicates whether setting Surface.SetScale has any visible effect.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.SupportsRotation">
            <summary>
             Indicates whether setting Surface.RotationAngle has any visible effect.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.SupportsColor">
            <summary>
            Indicates whether setting Surface.Color has any visible effect.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.SupportsGradient">
            <summary>
            Indicates whether Surface gradients are supported.  If not, then setting Surface.ColorGradient
            color of a surface is the same as setting the Surface.Color with the average of the
            gradient colors.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.SupportsSurfaceAlpha">
            <summary>
            Indicates whether setting Surface.Alpha has any visible effect.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.SupportsPixelAlpha">
            <summary>
            Indicates whether the alpha channel in surface pixels is used.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.SupportsLighting">
            <summary>
            Indicates whether or not lighting is supported.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.MaxLights">
            <summary>
            Indicates the maximum number of lights which can be used.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.IsHardwareAccelerated">
            <summary>
            Indicates whether there is hardware acceleration available for 2D and 3D drawing.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.Supports3D">
            <summary>
            Indicates whether or not 3D drawing is supported.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.IDisplayCaps.CanCreateBitmapFont">
            <summary>
            Indicates whether the driver can create a bitmap font from an operating
            system font.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.FontStyle">
            <summary>
            Enumeration which allows selection of font styles when creating
            a font from the OS.  This enum has the FlagsAttribute, so its members
            can be combined in a bitwise fashion.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.FontStyle.None">
            <summary>
            No style is applied.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.FontStyle.Bold">
            <summary>
            Make the font bold.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.FontStyle.Italic">
            <summary>
            Use italics.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.FontStyle.Strikeout">
            <summary>
            Strikeout through the font glyphs.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.FontStyle.Underline">
            <summary>
            Underline beneath the glyphs.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.FontSurface">
            <summary>
            Class which represents a font to draw on the screen.
            <remarks>When creating a FontSurface, if you are going to be
            scaling the font, it usually looks much better to make a large font
            and scale it to a smaller size, rather than vice-versa.</remarks>
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.#ctor(System.String,System.Single)">
            <summary>
            Creates a FontSurface object from the given fontFamily.
            </summary>
            <param name="fontFamily"></param>
            <param name="sizeInPoints"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.#ctor(System.String,System.Single,AgateLib.DisplayLib.FontStyle)">
            <summary>
            Creates a FontSurface object from the given fontFamily.
            </summary>
            <param name="fontFamily"></param>
            <param name="sizeInPoints"></param>
            <param name="style"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.#ctor(AgateLib.Resources.AgateResourceCollection,System.String)">
            <summary>
            Constructs a FontSurface object from a resource.
            </summary>
            <param name="resources"></param>
            <param name="resourceName"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.#ctor(AgateLib.BitmapFont.BitmapFontOptions)">
            <summary>
            Creates a bitmap font using the options passed in.  The Display driver
            must be capable of this, which is indicated in Display.Caps.CanCreateBitmapFont.
            </summary>
            <param name="bitmapOptions"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.#ctor(AgateLib.ImplementationBase.FontSurfaceImpl)">
            <summary>
            Private initializer to tell it what impl to use.
            </summary>
            <param name="implToUse"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.BitmapMonospace(System.String,AgateLib.Geometry.Size)">
            <summary>
            This function loads a monospace bitmap font from the specified image file.
            Only the character size is given.  It is assumed that all ASCII characters 
            from 0 to 255 are present, in order from left to right, and top to bottom.
            </summary>
            <remarks>
            [Experimental - The API is likely to change in the future.]
            </remarks>
            <param name="filename"></param>
            <param name="characterSize"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.Dispose">
            <summary>
            Disposes of this object.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.SetScale(System.Double,System.Double)">
            <summary>
            Sets the scale of the font.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.GetScale(System.Double@,System.Double@)">
            <summary>
            Gets the scale of the font.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.StringDisplayWidth(System.String)">
            <summary>
            Measures the display width of the specified string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.StringDisplayHeight(System.String)">
            <summary>
            Measures the display height of the specified string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.StringDisplaySize(System.String)">
            <summary>
            Measures the display size of the specified string.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.DrawText(System.Int32,System.Int32,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.DrawText(System.Double,System.Double,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.DrawText(AgateLib.Geometry.Point,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.DrawText(AgateLib.Geometry.PointF,System.String)">
            <summary>
            Draws the specified string at the specified location.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.FontSurface.DrawText(System.String)">
            <summary>
            Draws the specified string at the origin.
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:AgateLib.DisplayLib.FontSurface.Impl">
            <summary>
            Returns the implementation object.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.FontSurface.StringTransformer">
            <summary>
            Gets or sets how strings are transformed when they are drawn to the screen.
            This is useful for bitmap fonts which contain only all uppercase letters, for
            example.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.FontSurface.DisplayAlignment">
            <summary>
            Sets the interpretation of the draw point used.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.FontSurface.Color">
            <summary>
            Sets the color of the font.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.FontSurface.Alpha">
            <summary>
            Sets the transparency of the font.
            0.0 is fully transparent
            1.0 is completely opaque.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.FontSurface.ScaleWidth">
            <summary>
            Gets or sets the amount the width is scaled when the text is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.FontSurface.ScaleHeight">
            <summary>
            Gets or sets the amount the height is scaled when the text is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.FontSurface.FontHeight">
            <summary>
            Gets the height in pixels of a single line of text.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.ZipFileProvider">
            <summary>
            TgzFileProvider implements IFileProvider and provides read access to zip file
            archives.  This provides basic support for reading files from a compressed
            archive external to the application.  The only compression method supported by
            ZipFileProvider is the deflate method, so you must make sure that any compressed
            data in the zip file is compressed with deflate.
            </summary>
        </member>
        <member name="M:AgateLib.Utility.ZipFileProvider.#ctor(System.String)">
            <summary>
            Constructs a ZipFileProvider to read from the specified archive.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:AgateLib.Utility.ZipFileProvider.#ctor(System.String,System.Byte[])">
            <summary>
            Constructs a ZipFileProvider to read from the specified archive from archive data
            loaded into a byte array.  This overload is useful for a zip file embedded as a resource.
            </summary>
            <param name="name"></param>
            <param name="bytes"></param>
        </member>
        <member name="M:AgateLib.Utility.ZipFileProvider.#ctor(System.String,System.IO.Stream)">
            <summary>
            Constructs a ZipFileProvider to read from the specified archive.
            </summary>
            <param name="name">A name used to identify this stream in debugging information.</param>
            <param name="fileStream">A stream containing the data.  This stream must support seeking.</param>
        </member>
        <member name="M:AgateLib.Utility.ZipFileProvider.OpenRead(System.String)">
            <summary>
            Opens the specified file in the archive for reading.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.ZipFileProvider.FileExists(System.String)">
            <summary>
            Returns true if the specified file exists in the archive.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.ZipFileProvider.GetAllFiles">
            <summary>
            Enumerates all files in the archive.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.ZipFileProvider.GetAllFiles(System.String)">
            <summary>
            Enumerates all files matching the pattern.
            </summary>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.Resources.StringTable">
            <summary>
            Class which contains a table of string-string mappings.
            Similar to a Dictionary, but includes methods for reading to / writing from
            an AgateLib resource file.
            </summary>
        </member>
        <member name="M:AgateLib.Resources.StringTable.Clone">
            <summary>
            Clones the string table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Resources.StringTable.Add(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AgateLib.Resources.StringTable.ContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Resources.StringTable.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Resources.StringTable.TryGetValue(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Resources.StringTable.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AgateLib.Resources.StringTable.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Resources.StringTable.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:AgateLib.Resources.StringTable.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:AgateLib.Resources.StringTable.Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Resources.StringTable.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:AgateLib.Resources.StringTable.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:AgateLib.PlatformSpecific.IPlatformServices">
            <summary>
            Public interface which provides information and methods for a specific platform.
            </summary>
        </member>
        <member name="P:AgateLib.PlatformSpecific.IPlatformServices.PlatformType">
            <summary>
            Returns the type of platform.
            </summary>
        </member>
        <member name="T:AgateLib.Geometry.Point">
            <summary>
            Replacement for System.Drawing.Point structure.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:AgateLib.Geometry.Point.#ctor(AgateLib.Geometry.Point)">
            <summary>
            Constructs a point.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:AgateLib.Geometry.Point.#ctor(AgateLib.Geometry.Size)">
            <summary>
            Constructs a point.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AgateLib.Geometry.Point.op_Equality(AgateLib.Geometry.Point,AgateLib.Geometry.Point)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Point.op_Inequality(AgateLib.Geometry.Point,AgateLib.Geometry.Point)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Point.op_Explicit(AgateLib.Geometry.Point)~AgateLib.Geometry.PointF">
            <summary>
            Explicitly converts a point to a pointf structure.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Point.GetHashCode">
            <summary>
            Gets a hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Point.ToString">
            <summary>
            Creates a string representing this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Point.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Point.Equals(AgateLib.Geometry.Point)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:AgateLib.Geometry.Point.Empty">
            <summary>
            Empty point.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Point.Add(AgateLib.Geometry.Point,AgateLib.Geometry.Size)">
            <summary>
            Adds the specified size object to the specified point object
            and returns the new point.
            </summary>
            <param name="pt"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Point.Ceiling(AgateLib.Geometry.PointF)">
            <summary>
            Rounds the PointF object up.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Point.Round(AgateLib.Geometry.PointF)">
            <summary>
            Rounds the PointF object to the nearest integer.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Geometry.Point.X">
            <summary>
            Gets or sets the X value.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Point.Y">
            <summary>
            Gets or sets the Y value.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Point.IsEmpty">
            <summary>
            Returns true if X and Y are zero.
            </summary>
        </member>
        <member name="T:AgateLib.Drivers.IDesktopDriver">
            <summary>
            
            </summary>
        </member>
        <member name="M:AgateLib.Drivers.IDesktopDriver.CreateUserSetSystems">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Drivers.IDesktopDriver.ShowErrorDialog(System.String,System.Exception,AgateLib.ErrorLevel)">
            <summary>
            Shows an error dialog using the operating system's methods.
            </summary>
            <param name="message"></param>
            <param name="e">The exception causing the error.  This parameter may be null, 
            and it is important that the implementation does not choke on a null value for e.</param>
            <param name="level"></param>
        </member>
        <member name="T:AgateLib.DisplayLib.Display">
            <summary>
            Static class which contains all basic functions for drawing onto the Display.
            This class is most central to game rendering.  At the beginning and end of each frame
            Display.BeginFrame() and Display.EndFrame() must be called.  All drawing calls must
            occur between BeginFrame and EndFrame.
            
            Display.Dispose() must be called before the program exits.
            
            </summary>
            
            <example> This example shows how a basic render loop works.
            <code>
            // These usings should be at the top.
            using AgateLib;
            using AgateLib.DisplayLib;
            
            void MyRenderLoop()
            {
                Display.BeginFrame();
                Display.Clear(Color.Black);
            
                Display.DrawRect(new Rectangle(10, 10, 30, 30), Color.Red);
            
                Display.EndFrame();
                Core.KeepAlive();
            }
            </code>
            </example>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.Initialize(AgateLib.Drivers.DisplayTypeID)">
            <summary>
            Initializes the display by instantiating the driver with the given
            DisplayTypeID.  The display driver must be registered with the Registrar
            class.
            
            It is recommended that you instantiate a SetupDisplay object from within
            a using block, to ensure that the Display is disposed of properly.
            </summary>
            <param name="displayType"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.Dispose">
            <summary>
            Disposes of the Display.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.Clear">
            <summary>
            Clears the buffer to black.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.Clear(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Clears the buffer to the specified color.
            </summary>
            <param name="a">Alpha value, between 0 and 255.</param>
            <param name="b">Blue value, between 0 and 255.</param>
            <param name="g">Green value, between 0 and 255.</param>
            <param name="r">Red value, between 0 and 255.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.Clear(AgateLib.Geometry.Color)">
            <summary>
            Clears the buffer to the specified color.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.Clear(System.Int32)">
            <summary>
            Clears the buffer to the specified color.
            </summary>
            <param name="color">32-bit integer indicating the color.  The color will be constructed from Color.FromArgb.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.Clear(AgateLib.Geometry.Color,AgateLib.Geometry.Rectangle)">
            <summary>
            Clears a region of the buffer to the specified color.
            Should be essentially the same as DrawRect(dest, color), except
            that alpha is not significant in the use of Clear.
            </summary>
            <param name="color">Color to clear to.</param>
            <param name="dest">Destination rectangle to clear.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.Clear(System.Int32,AgateLib.Geometry.Rectangle)">
            <summary>
            Clears a region of the buffer to the specified color.
            Should be essentially the same as DrawRect(dest, color), except
            that alpha is not significant in the use of Clear.
            </summary>
            <param name="color"></param>
            <param name="dest"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.BeginFrame">
            <summary>
            Must be called at the start of each frame.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.EndFrame">
            <summary>
            EndFrame must be called at the end of each frame.
            By default, this waits for the vertical blank before rendering.
            However, some renderers (ie. System.Drawing) may not support that. 
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.SetDeltaTime(System.Double)">
            <summary>
            Provides a means to set the value returned by DeltaTime.
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.SetClipRect(AgateLib.Geometry.Rectangle)">
            <summary>
            Set the current clipping rect.
            </summary>
            <param name="newClipRect"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.PushClipRect(AgateLib.Geometry.Rectangle)">
            <summary>
            Pushes a clip rect onto the clip rect stack.
            </summary>
            <param name="newClipRect"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.PopClipRect">
            <summary>
            Pops the clip rect and restores the previous clip rect.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.PackAllSurfaces">
            <summary>
            Takes all surfaces and packs them into a large surface.
            This should minimize swapping of surfaces, and may result in a performance
            increase when using Direct3D or OpenGL.  
            
            If you use this, it is best to load all your surfaces into memory, 
            mark any you don't want packed (surfaces which may be used as render targets,
            for example), then call Display.PackAllSurfaces().
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.EnumScreenModes">
            <summary>
            Returns an array containing information about all available full-screen modes.
            If full screen mode switching is not supported, the array returned has a
            Length of zero.
            </summary>
            <returns>An array of available full-screen modes.</returns>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.FlushDrawBuffer">
            <summary>
            When using Direct3D or OpenGL, calls to Surface.Draw are cached to be sent to 
            the 3D API all as a batch.  Calling Display.FlushDrawBuffer forces all cached
            vertices to be sent to the rendering system.  You should not need to call this
            function in normal operation of your application.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.SetOrthoProjection(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the orthogonal projection for rendering.  This allows redefinition of the
            coordinates used to address pixels in the window.  
            </summary>
            <remarks>
            [Experimental - This member is not fully tested and may have bugs.
            The API is also likely to change in the future.]
            <para>Normally, the orthogonal projection used is 
            set to (left, top) = (0,0), (right,bottom) = (RenderTarget.Width, RenderTarget.Height).
            This function provides a handy way to program an application for multiple resolutions.
            For example, if you set the OrthoProjection to (0,0,640,480), then all drawing calls
            can be made as if you were drawing to a 640x480 window, but they would be scaled to fill
            the entire window.</para>
            </remarks>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.SetOrthoProjection(AgateLib.Geometry.Rectangle)">
            <summary>
            Sets the orthogonal projection for rendering.  This allows redefinition of the
            coordinates used to address pixels in the window.  
            </summary>
            <remarks>
            [Experimental - This member is not fully tested and may have bugs.
            The API is also likely to change in the future.]
            <para>Normally, the orthogonal projection used is 
            set to (left, top) = (0,0), (right,bottom) = (RenderTarget.Width, RenderTarget.Height).
            This function provides a handy way to program an application for multiple resolutions.
            For example, if you set the OrthoProjection to (0,0,640,480), then all drawing calls
            can be made as if you were drawing to a 640x480 window, but they would be scaled to fill
            the entire window.</para>
            </remarks>
            <param name="region"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.DrawEllipse(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Color)">
            <summary>
            Draws an ellispe within the specified rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,AgateLib.Geometry.Color)">
            <summary>
            Draws a line between the two points specified.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.DrawLine(AgateLib.Geometry.Point,AgateLib.Geometry.Point,AgateLib.Geometry.Color)">
            <summary>
            Draws a line between the two points specified.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.DrawLines(AgateLib.Geometry.Point[],AgateLib.Geometry.Color)">
            <summary>
            Draws a bunch of connected lines.  The last point and the
            first point are not connected.
            </summary>
            <param name="pts"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.DrawLineSegments(AgateLib.Geometry.Point[],AgateLib.Geometry.Color)">
            <summary>
            Draws a bunch of line segments.  Each pair of points represents
            a line segment which is drawn.  No connections between the line segments
            are made, so there must be an even number of points.
            </summary>
            <param name="pts"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.DrawRect(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Color)">
            <summary>
            Draws the outline of a rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.DrawRect(AgateLib.Geometry.RectangleF,AgateLib.Geometry.Color)">
            <summary>
            Draws the outline of a rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32,AgateLib.Geometry.Color)">
            <summary>
            Draws the outline of a rectangle
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.FillRect(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Color)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.FillRect(System.Int32,System.Int32,System.Int32,System.Int32,AgateLib.Geometry.Color)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.FillRect(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Gradient)">
            <summary>
            Draws a filled rectangle with a gradient.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.FillRect(System.Int32,System.Int32,System.Int32,System.Int32,AgateLib.Geometry.Gradient)">
            <summary>
            Draws a filled rectangle with a gradient.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.FillRect(AgateLib.Geometry.RectangleF,AgateLib.Geometry.Color)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.FillRect(AgateLib.Geometry.RectangleF,AgateLib.Geometry.Gradient)">
            <summary>
            Draws a filled rectangle with a gradient.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Display.DisableLighting">
            <summary>
            Turns lighting functions off.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Display.Impl">
            <summary>
            Gets the object which handles all of the actual calls to Display functions.
            This may be cast to a surface object in whatever rendering library
            is being used (eg. if using the MDX_1_1 library, this can be cast
            to an MDX1_Display object).  You only need to use this if you
            want to access features which are specific to the graphics library
            you're using.
            </summary>
        </member>
        <member name="E:AgateLib.DisplayLib.Display.DisposeDisplay">
            <summary>
            Event that is called when Display.Dispose() is invoked, to shut down the
            display system and release all resources.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Display.DefaultSurfaceFormat">
            <summary>
            Returns the PixelFormat of Surfaces which are created to be compatible
            with the display mode.  If you want to create a PixelBuffer which does
            not require a conversion when written to a Surface, use this format.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Display.RenderTarget">
            <summary>
            Gets or sets the current render target.
            Must be called outside of BeginFrame..EndFrame blocks
            (usually just before BeginFrame).
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Display.CurrentWindow">
            <summary>
            Gets the last render target used which was a DisplayWindow.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Display.AlphaThreshold">
            <summary>
            Gets or sets the threshold value for alpha transparency below which
            pixels are considered completely transparent, and may not be drawn.
            Acceptable values are within the range of 0 to 1.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Display.DeltaTime">
            <summary>
            Gets the amount of time in milliseconds that has passed between this frame
            and the last one.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Display.FramesPerSecond">
            <summary>
            Gets the framerate
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Display.MaxSurfaceSize">
            <summary>
            Returns the maximum size a surface object can be.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Display.SurfacePacker">
            <summary>
            Gets the object which handles packing of all surfaces.
            </summary>
        </member>
        <member name="E:AgateLib.DisplayLib.Display.PackAllSurfacesEvent">
            <summary>
            Event fired when PackAllSurfacesEvent
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Display.VSync">
            <summary>
            Gets or sets the VSync flag.  If VSync is off, tearing might occur.
            If VSync is on, the framerate will be capped at the monitor's refresh rate.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Display.Caps">
            <summary>
            Gets the capabilities of the Display object.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.Display.DisposeDisplayHandler">
            <summary>
            Delegate type for functions which are called when Display.Dispose is called
            at the end of execution of the program.
            </summary>
        </member>
        <member name="T:AgateLib.AudioLib.SoundBufferSession">
            <summary>
            A class which represents a playback instance of a SoundBuffer object.
            
            After a SoundBufferSession is done playing, it may be recycled if its
            parent SoundBuffer object's Play or CreateSession methods are called.
            This behavior can be suppressed by setting the Recycle property to false.
            If you do this, you are responsible for freeing the unmanaged resources
            on the SoundBufferSession by calling its Dispose method.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.SoundBufferSession.Dispose">
            <summary>
            Destroys the unmanaged resources associated with this object.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.SoundBufferSession.Play">
            <summary>
            Begins playback of the SoundBufferSession object.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.SoundBufferSession.Stop">
            <summary>
            Stops playback.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.SoundBufferSession.Impl">
            <summary>
            Returns the implemented object.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.SoundBufferSession.Source">
            <summary>
            Returns the SoundBuffer object which created this SoundBufferSession.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.SoundBufferSession.Volume">
            <summary>
            Gets or sets the volume. Range is:
            0.0 Quiet
            0.5 Sounds half volume
            1.0 Full volume
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.SoundBufferSession.Pan">
            <summary>
            Gets or sets the left-right balance.  
            -1 is entirely in the left speaker,
             0 is equally in both and,
             1 is entirely in the right speaker.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.SoundBufferSession.IsPlaying">
            <summary>
            Returns true if this Session is playing.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.SoundBufferSession.Recycle">
            <summary>
            Gets or sets a bool value which indicates whether or not this
            SoundBufferSession object should be recycled when it is done playing.
            
            If you set this to false, you should Dispose the SoundBufferSession
            object yourself when you're done with it.
            </summary>
        </member>
        <member name="T:AgateLib.AgateException">
            <summary>
            Base exception class for exceptions which are thrown by AgateLib.
            </summary>
        </member>
        <member name="M:AgateLib.AgateException.#ctor">
            <summary>
            Constructs an AgateException.
            </summary>
        </member>
        <member name="M:AgateLib.AgateException.#ctor(System.String)">
            <summary>
            Constructs an AgateException.
            </summary>
        </member>
        <member name="M:AgateLib.AgateException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an AgateException.
            </summary>
        </member>
        <member name="M:AgateLib.AgateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs an AgateException.
            </summary>
        </member>
        <member name="T:AgateLib.AgateCrossPlatformException">
            <summary>
            Exception which is thrown when AgateLib detects that it is used in a way that
            may not be portable to different platforms, 
            and Core.CrossPlatformDebugLevel is set to Exception.
            </summary>
        </member>
        <member name="M:AgateLib.AgateCrossPlatformException.#ctor">
            <summary>
            Constructs a new AgateCrossPlatformException object.
            </summary>
        </member>
        <member name="M:AgateLib.AgateCrossPlatformException.#ctor(System.String)">
            <summary>
            Constructs a new AgateCrossPlatformException object.
            </summary>
        </member>
        <member name="M:AgateLib.AgateCrossPlatformException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new AgateCrossPlatformException object.
            </summary>
        </member>
        <member name="M:AgateLib.AgateCrossPlatformException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new AgateCrossPlatformException object from serialization data.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AgateLib.Resources.SpriteResource">
            <summary>
            Resource which loads a sprite.  There are two different types of sprites, a general purpose
            sprite, implemented as the Sprite class, and a packed version which maximizes the memory
            efficiency, implemented as PackedSprite.<br/>
            XML Attributes:<br/> 
              string name, bool packed, Size size, string image, double timePerFrame (in milliseconds)
              
            XML Nodes:<br/>
                Image:
                    Required attributes:
                        string file
                    Optional attribute:
                        Point offset
                Frame:
                    Required attributes:
                        Rectangle rect, Point offset
                    Optional attribute:
                        string image
            </summary>
        </member>
        <member name="M:AgateLib.Resources.SpriteResource.#ctor(System.String)">
            <summary>
            Constructs a SpriteResource object.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AgateLib.Resources.SpriteResource.Clone">
            <summary>
            Clones the resource.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Resources.SpriteResource.HasSize">
            <summary>
            Gets a boolean indicating whether or not the sprite size was specified in the resource
            file.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.SpriteResource.Packed">
            <summary>
            Gets or sets whether or not this sprite uses the PackedSprite class.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.SpriteResource.Size">
            <summary>
            Gets or sets the size of this sprite.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.SpriteResource.TimePerFrame">
            <summary>
            Gets or sets the amount of time each frame should be displayed, in milliseconds.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.SpriteResource.ChildElements">
            <summary>
            Gets the list of frames 
            </summary>
        </member>
        <member name="P:AgateLib.Resources.SpriteResource.Filename">
            <summary>
            Gets or sets the default filename for sprite frames.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.SpriteResource.SpriteSubResource.Filename">
            <summary>
            Filename for this part of the sprite.
            </summary>
        </member>
        <member name="T:AgateLib.Resources.SpriteResource.SpriteFrameResource">
            <summary>
            Class representing a frame of a sprite in a SpriteResource.
            </summary>
        </member>
        <member name="M:AgateLib.Resources.SpriteResource.SpriteFrameResource.ToString">
            <summary>
            Converts the sprite resource to a string for debugging info.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Resources.SpriteResource.SpriteFrameResource.Bounds">
            <summary>
            Rectangle where the image data is.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.SpriteResource.SpriteFrameResource.Offset">
            <summary>
            Offset in the sprite to where the upper left of the image is drawn.
            </summary>
        </member>
        <member name="T:AgateLib.Resources.SpriteResource.SpriteImageResource">
            <summary>
            Class representing an image to automatically load frames from.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.PixelBuffer">
            <summary>
            Class which encapsulates raw pixel data.  This can be used to 
            construct or modify surface data programmatically.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.TestPixelFormatStrides">
            <summary>
            static constructor to test pixel formats.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.#ctor(AgateLib.DisplayLib.PixelFormat,AgateLib.Geometry.Size)">
            <summary>
            Constructs a PixelBuffer object. 
            </summary>
            <param name="size">The size of the image data in pixels.</param>
            <param name="format">The raw data format of the pixels to be contained
            in the pixel buffer.  PixelFormat.Any is not a valid parameter.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.#ctor(AgateLib.DisplayLib.PixelFormat,AgateLib.Geometry.Size,System.Byte[])">
            <summary>
            Constructs a PixelBuffer object. 
            Data passed is not copied; it is referenced.
            </summary>
            <param name="size">The size of the image data in pixels.</param>
            <param name="format">The raw data format of the pixels to be contained
            in the pixel buffer.  PixelFormat.Any is not a valid parameter.</param>
            <param name="data">Raw pixel data.  It must be the correct size
            for the format passed.  This data will not be copied; it will be
            referenced.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.#ctor(AgateLib.DisplayLib.PixelFormat,AgateLib.Geometry.Size,System.Byte[],AgateLib.DisplayLib.PixelFormat)">
            <summary>
            Constructs a PixelBuffer object. 
            This overload performs automatic conversion of the data
            passed to match the format specified for the pixel buffer.
            The data is always copied in memory, even if it is of the
            same type as the format parameter.
            </summary>
            <param name="size">The size of the image data in pixels.</param>
            <param name="format">The raw data format of the pixels to be contained
            in the pixel buffer.  PixelFormat.Any is not a valid parameter.</param>
            <param name="data">Raw pixel data.  It must be the correct size
            for the format passed.</param>
            <param name="dataFormat">Format of the raw pixel data.  This data will be 
            copied into the PixelBuffer.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.#ctor(AgateLib.DisplayLib.PixelFormat,AgateLib.Geometry.Size,System.Byte[],System.Boolean)">
            <summary>
            Constructs a PixelBuffer object. 
            This overload allows you to specify whether or not the 
            data parameter should be copied.
            </summary>
            <param name="size">The size of the image data in pixels.</param>
            <param name="format">The raw data format of the pixels to be contained
            in the pixel buffer.  PixelFormat.Any is not a valid parameter.</param>
            <param name="data">Raw pixel data.  It must be the correct size
            for the format passed.</param>
            <param name="copyData">True if the data should be copied into the pixel buffer.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.#ctor(AgateLib.DisplayLib.PixelFormat,AgateLib.Geometry.Size,System.IntPtr,AgateLib.DisplayLib.PixelFormat,System.Int32)">
            <summary>
            Constructs a PixelBuffer object.  Copies data from an unmanaged memory location
            in the specified format.
            </summary>
            <param name="format">The format the pixel buffer should be stored in.</param>
            <param name="size">The size (width and height) in pixels the pixel buffer
            should contain.</param>
            <param name="data">Pointer to an unmanaged memory location which contains the pixel
            data.  This data must be the same size in pixels as the size parameter.</param>
            <param name="sourceFormat">The pixelformat of the source data.</param>
            <param name="srcRowStride">The number of bytes from the beginning of one row
            to the next.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.#ctor(AgateLib.DisplayLib.PixelBuffer,AgateLib.Geometry.Rectangle)">
            <summary>
            Constructs a PixelBuffer object, taking image data from a preexisting pixel buffer.
            </summary>
            <param name="buffer">The PixelBuffer object to copy image data from.</param>
            <param name="srcRect">The source rectangle in the buffer to copy image data from.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.FromFile(System.String)">
            <summary>
            Loads image data from a file and returns a PixelBuffer.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsBlank">
            <summary>
            Checks to see if this PixelBuffer contains only transparent pixels.
            Pixels with an alpha value of less than Display.AlphaThreshold are considered
            transparent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsBlank(System.Double)">
            <summary>
            Checks to see if this PixelBuffer contains only transparent pixels.
            This overload allows the alpha tolerance to be specified explicitly.
            </summary>
            <param name="alphaTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsRegionBlank(AgateLib.Geometry.Rectangle)">
            <summary>
            Checks to see if this region of the pixelbuffer only contains transparent pixels.
            Pixels with an alpha value of less than Display.AlphaThreshold are considered
            transparent.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsRegionBlank(AgateLib.Geometry.Rectangle,System.Double)">
            <summary>
            Returns true if all pixels within the passed rectangle are below the passed alpha tolerance value.
            </summary>
            <param name="rectangle"></param>
            <param name="alphaTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsRowBlank(System.Int32)">
            <summary>
            Checks to see if the selected row of this PixelBuffer contains only
            transparent pixels.
            Pixels with an alpha value of less than Display.AlphaThreshold are considered
            transparent.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsRowBlank(System.Int32,System.Double)">
            <summary>
            Checks to see if the selected row of this PixelBuffer contains only
            transparent pixels.
            This overload allows the alpha tolerance to be specified explicitly.
            </summary>
            <param name="row"></param>
            <param name="alphaTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsRowBlank(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks to see if the selected row of this PixelBuffer contains only
            transparent pixels.
            </summary>
            <param name="row"></param>
            <param name="left"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsRowBlank(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Checks to see if the selected row of this PixelBuffer contains only
            transparent pixels.
            This overload allows the alpha tolerance to be specified explicitly.
            </summary>
            <param name="row"></param>
            <param name="left"></param>
            <param name="width"></param>
            <param name="alphaTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsColumnBlank(System.Int32)">
            <summary>
            Checks to see if the selected row of this PixelBuffer contains only
            transparent pixels.
            Pixels with an alpha value of less than Display.AlphaThreshold are considered
            transparent.
            </summary>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsColumnBlank(System.Int32,System.Double)">
            <summary>
            Checks to see if the selected row of this PixelBuffer contains only
            transparent pixels.
            This overload allows the alpha tolerance to be specified explicitly.
            </summary>
            <param name="col"></param>
            <param name="alphaTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsColumnBlank(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks to see if a portion of the selected row of this PixelBuffer contains only
            transparent pixels.
            </summary>
            <param name="col"></param>
            <param name="top"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsColumnBlank(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Checks to see if a portion of the selected row of this PixelBuffer contains only
            transparent pixels.
            </summary>
            <param name="col"></param>
            <param name="top"></param>
            <param name="height"></param>
            <param name="alphaTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.CopyFrom(AgateLib.DisplayLib.PixelBuffer,AgateLib.Geometry.Rectangle,AgateLib.Geometry.Point,System.Boolean)">
            <summary>
            Copies pixel data from the specified PixelBuffer.
            </summary>
            <param name="buffer">The pixel buffer to copy from.</param>
            <param name="srcRect"></param>
            <param name="destPt"></param>
            <param name="clip">If true, the copied region will automatically
            be clipped.  If false, this method will throw an exception if the area
            being copied to is out of range.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.GetPixelIndex(System.Int32,System.Int32)">
            <summary>
            Gets the index of the first byte in the pixel in the Data array
            at the specified point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsPointValid(System.Int32,System.Int32)">
            <summary>
            Returns true if the specified point is within the pixel buffer.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.IsPointValid(AgateLib.Geometry.Point)">
            <summary>
            Returns true if the specified point is within the pixel buffer.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.GetPixel(System.Int32,System.Int32)">
            <summary>
            Copies pixel data from the specified location to a Color structure.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.SetPixel(System.Int32,System.Int32,AgateLib.Geometry.Color)">
            <summary>
            Sets the color at a particular pixel.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="clr"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.SetData(System.Byte[],AgateLib.DisplayLib.PixelFormat)">
            <summary>
            Copies the data from the array passed in into the internal pixel 
            buffer array. Automatic conversion is performed if the format the data 
            is in (indicated by format parameter) differs from the format the
            pixel buffer is in.
            </summary>
            <param name="srcData"></param>
            <param name="srcFormat"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.SetData(System.IntPtr,AgateLib.DisplayLib.PixelFormat,System.Int32)">
            <summary>
            Copies the data from the unmanaged memory pointer passed in into the internal pixel 
            buffer array. Automatic conversion is performed if the format the data 
            is in (indicated by format parameter) differs from the format the
            pixel buffer is in.
            </summary>
            <param name="data"></param>
            <param name="srcFormat"></param>
            <param name="srcRowStride"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.ConvertTo(AgateLib.DisplayLib.PixelFormat)">
            <summary>
            Creates a new PixelBuffer and copies the data in this PixelBuffer,
            performing automatic conversion.
            </summary>
            <param name="pixelFormat">PixelFormat that the newly created PixelBuffer should have.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.ConvertTo(AgateLib.DisplayLib.PixelFormat,AgateLib.Geometry.Size)">
            <summary>
            Creates a new PixelBuffer of the specified size, with the
            data in this PixelBuffer copied to the upper left corner.
            </summary>
            <param name="pixelFormat">PixelFormat that the newly created PixelBuffer should have.</param>
            <param name="mTextureSize"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.ConvertTo(AgateLib.DisplayLib.PixelFormat,AgateLib.Geometry.Size,AgateLib.Geometry.Point)">
            <summary>
            Creates a new PixelBuffer of the specified size, with the
            data in this PixelBuffer copied so that the upper left corner
            is specified by point.
            </summary>
            <param name="pixelFormat">PixelFormat that the newly created PixelBuffer should have.</param>
            <param name="mTextureSize"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.SaveTo(System.String,AgateLib.DisplayLib.ImageFileFormat)">
            <summary>
            Saves the data in the PixelBuffer for to an image file.
            </summary>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.ReplaceColor(AgateLib.Geometry.Color,AgateLib.Geometry.Color)">
            <summary>
            Replaces all instances of the specified color.
            </summary>
            <param name="searchColor">The color to replace.</param>
            <param name="newColor">The new color to overwrite searchColor.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.ConvertPixel(System.Byte[],System.Int32,AgateLib.DisplayLib.PixelFormat,System.Byte[],System.Int32,AgateLib.DisplayLib.PixelFormat)">
            <summary>
            Converts a single pixel in the specified format at the specified location 
            from the source array and writes it to the specified location in the 
            destination array.
            </summary>
            <param name="dest">Destination array to write to.</param>
            <param name="destIndex">Index in destination array to begin writing.</param>
            <param name="destFormat">Pixel format to use when writing to destination array.</param>
            <param name="src">Source array to read pixel data from</param>
            <param name="srcIndex">Index in source array where pixel data should be read from.</param>
            <param name="srcFormat">The format of the pixel data in the source array.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.GetPixelStride(AgateLib.DisplayLib.PixelFormat)">
            <summary>
            Returns the number of bytes in memory used by a single pixel in the
            specified format.
            </summary>
            <param name="format">Which format to look up.</param>
            <returns>
            The number of bytes used by the format.  This is always
            either 2 for 15 or 16 bit formats, 3 for 24 bit formats, and 4 for
            32 bit formats.
            </returns>
        </member>
        <member name="M:AgateLib.DisplayLib.PixelBuffer.FormatHasAlpha(AgateLib.DisplayLib.PixelFormat)">
            <summary>
            Returns true if the specified PixelFormat contains an
            alpha channel.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.DisplayLib.PixelBuffer.PixelFormat">
            <summary>
            Gets the format of the pixel data.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.PixelBuffer.Data">
            <summary>
            Gets or sets the raw pixel data, in the format indicated by PixelFormat. 
            An exception is thrown when setting Data if the length of the array passed is 
            not Width * Height * PixelStride.
            </summary>
            <remarks>
            The data is not copied when set, it is only referenced, so changes to the array that
            is passed in will affect the data in the pixel buffer.  It is assumed that the data
            passed in is of the same format as the pixel buffer.  If you wish to copy data use
            the <see cref="M:AgateLib.DisplayLib.PixelBuffer.SetData(System.Byte[],AgateLib.DisplayLib.PixelFormat)"/> method.
            </remarks>
        </member>
        <member name="P:AgateLib.DisplayLib.PixelBuffer.PixelStride">
            <summary>
            Gets how many bytes each pixel takes up in memory.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.PixelBuffer.Height">
            <summary>
            Returns the height in pixels of the buffer.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.PixelBuffer.Width">
            <summary>
            Returns the width in pixels of the buffer.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.PixelBuffer.Size">
            <summary>
            Returns the size (width, height) in pixels of the buffer.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.PixelBuffer.RowStride">
            <summary>
            Returns how many bytes a single row takes up. This value can be 
            used to increase an index to go from one line of pixels to the next.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.OriginAlignment">
            <summary>
            OriginAlignment enum.  Used to specify how
            points should be interpreted.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.OriginAlignment.TopLeft">
            <summary>
            Point indicates top-left.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.OriginAlignment.TopCenter">
            <summary>
            Point indicates top-center.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.OriginAlignment.TopRight">
            <summary>
            Point indicates top-right.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.OriginAlignment.CenterLeft">
            <summary>
            Point indicates center-left.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.OriginAlignment.Center">
            <summary>
            Point indicates center.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.OriginAlignment.CenterRight">
            <summary>
            Point indicates center-right.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.OriginAlignment.BottomLeft">
            <summary>
            Point indicates bottom-left.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.OriginAlignment.BottomCenter">
            <summary>
            Point indicates bottom-center.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.OriginAlignment.BottomRight">
            <summary>
            Point indicates bottom-right.
            </summary>
        </member>
        <member name="T:AgateLib.ErrorLevel">
            <summary>
            Used by AgateLib.Core class's error reporting functions
            to indicate how severe an error is.
            </summary>
        </member>
        <member name="F:AgateLib.ErrorLevel.Comment">
            <summary>
            Indicates an message is just a comment, and safe to ignore.
            </summary>
        </member>
        <member name="F:AgateLib.ErrorLevel.Warning">
            <summary>
            Indicates that the error message is not severe, and the program may
            continue.  However, unexpected behavior may occur due to the result of
            this error.
            </summary>
        </member>
        <member name="F:AgateLib.ErrorLevel.Fatal">
            <summary>
            Indicates that the error condition is too severe and the program 
            may not continue.
            </summary>
        </member>
        <member name="F:AgateLib.ErrorLevel.Bug">
            <summary>
            Indicates the error condition indicates some assumption
            has not held that should have.  This should only be used
            if the condition is caused by a bug in the code.
            </summary>
        </member>
        <member name="T:AgateLib.CrossPlatformDebugLevel">
            <summary>
            Enum used to inidicate the level of cross-platform debugging that should occur.
            </summary>
        </member>
        <member name="F:AgateLib.CrossPlatformDebugLevel.None">
            <summary>
            Ignores any issues related to cross platform deployment.
            </summary>
        </member>
        <member name="F:AgateLib.CrossPlatformDebugLevel.Comment">
            <summary>
            Outputs comments using Core.ReportError with a comment level.
            </summary>
        </member>
        <member name="F:AgateLib.CrossPlatformDebugLevel.Exception">
            <summary>
            Throws exceptions on issues that may cause problems when operating on another platform.
            </summary>
        </member>
        <member name="T:AgateLib.Core">
            <summary>
            Class which contains methods commonly used by the entire library.
            </summary>
        </member>
        <member name="M:AgateLib.Core.Initialize">
            <summary>
            Initializes Core class.
            Can be called multiple times without adverse effects.
            </summary>
        </member>
        <member name="M:AgateLib.Core.KeepAlive">
            <summary>
            Plays nice with the OS, by allowing events to be handled.
            This also handles user input events associated with the application,
            and polls joysticks if needed.
            </summary>
        </member>
        <member name="M:AgateLib.Core.ReportError(AgateLib.ErrorLevel,System.String,System.Exception)">
            <summary>
            Saves an error message to the ErrorFile.
            Outputs a stack trace and shows a dialog box if the ErrorLevel 
            is Bug or Fatal.
            </summary>
            <param name="message">A message to print out before the 
            exception's message.</param>
            <param name="e"></param>
            <param name="level"></param>
        </member>
        <member name="M:AgateLib.Core.ReportError(AgateLib.ErrorLevel,System.String,System.Exception,System.Boolean,System.Boolean)">
            <summary>
            Saves an error message to the ErrorFile.
            </summary>
            <param name="message">A message to print out before the 
            exception's message.</param>
            <param name="e"></param>
            <param name="level"></param>
            <param name="printStackTrace">Bool value indicating whether or not 
            a stack trace should be written out.  </param>
            <param name="showDialog">Bool value indicating whether or not a 
            message box should pop up with an OK button, informing the user about the 
            error.  If false, the error is silently written to the ErrorFile.</param>
        </member>
        <member name="M:AgateLib.Core.ReportCrossPlatformError(System.String)">
            <summary>
            Reports a cross platform error, according to the setting of Core.CrossPlatformDebugLevel.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AgateLib.Core.GetTime">
            <summary>
            returns time since agatelib was initialized in milliseconds.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Core.IsActive">
            <summary>
            Gets or sets a bool value which indicates whether or not your
            app is the focused window.  This will be automatically set if
            you created DisplayWindows by specifying a title and size, but not
            if they are attached to a control.
            </summary>
        </member>
        <member name="P:AgateLib.Core.AutoPause">
            <summary>
            Gets or sets a bool value indicating whether or not Agate
            should automatically pause execution when the application
            loses focus.
            
            The automatic pause will occur during Core.KeepAlive().  This
            will prevent the DisplayWindow from being updated at all.  As 
            such, this should not be used in production builds if your app
            is windowed.  Instead check the IsActive property and respond 
            accordingly if your application is windowed..
            </summary>
        </member>
        <member name="E:AgateLib.Core.KeepAliveEvent">
            <summary>
            Event which occurs when KeepAlive is called.
            This allows subsystems (such as GUI, Input, Sound) to make updates each frame.
            </summary>
        </member>
        <member name="P:AgateLib.Core.BaseDirectory">
            <summary>
            Returns the directory the application that was started resides in.
            </summary>
        </member>
        <member name="P:AgateLib.Core.ErrorFile">
            <summary>
            Gets or sets the file name to which errors are recorded.  Defaults
            to "errorlog.txt"
            </summary>
        </member>
        <member name="P:AgateLib.Core.AutoStackTrace">
            <summary>
            Gets or sets whether or not a stack trace is automatically used.
            </summary>
            <example>
            You may find it useful to turn this on during a debug build, and
            then turn if off when building the release version.  The following
            code accomplishes that.
            <code>
            #if _DEBUG
                AgateLib.Core.AutoStackTrace = true;
            #endif
            </code>
            </example>
        </member>
        <member name="P:AgateLib.Core.CrossPlatformDebugLevel">
            <summary>
            Gets or sets a value indicating how AgateLib should deal with issues that may
            cause problems when porting to another platform.
            </summary>
        </member>
        <member name="T:AgateLib.Core.KeepAliveDelegate">
            <summary>
            Delegate for types which attach to the KeepAliveEvent.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.RefCounter`1">
            <summary>
            Class which implements a reference counter around a Disposable object.
            The object is disposed when the reference count drops to zero.  This class
            should not be used directly, instead use the Ref&lt;T&gt; structure.
            </summary>
            <remarks>
            [Experimental - This class may disappear in the future.]
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AgateLib.Utility.RefCounter`1.#ctor(`0)">
            <summary>
            Constructs a RefCounter object around the specified object.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:AgateLib.Utility.RefCounter`1.AddRef">
            <summary>
            Increases the reference count.
            </summary>
        </member>
        <member name="M:AgateLib.Utility.RefCounter`1.Dispose">
            <summary>
            Decreases the reference count, and if it hits zero Dispose is
            called on the object.
            </summary>
        </member>
        <member name="M:AgateLib.Utility.RefCounter`1.GetRefCount">
            <summary>
            Returns the number of references.
            This is meant for debugging purposes only, do not write code which 
            calls Dispose until GetRefCount drops to zero.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Utility.RefCounter`1.Value">
            <summary>
            Gets the object this is wrapped around.
            </summary>
        </member>
        <member name="P:AgateLib.Utility.RefCounter`1.IsDisposed">
            <summary>
            Returns true if the object has had its Dispose member called, and thus no
            more calls on that object should be made.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.Ref`1">
            <summary>
            A structure which is used for copying RefCounter&lt;T&gt; around.
            In order to make sure reference counters are updated correctly, never
            use the equals operator with this object.  Always create a new one and
            pass the old one to the constructor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AgateLib.Utility.Ref`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:AgateLib.Utility.Ref`1.#ctor(AgateLib.Utility.Ref{`0})">
            <summary>
            
            </summary>
            <param name="copyfrom"></param>
        </member>
        <member name="M:AgateLib.Utility.Ref`1.Dispose">
            <summary>
            Releases this reference to the object.
            </summary>
        </member>
        <member name="P:AgateLib.Utility.Ref`1.IsDisposed">
            <summary>
            Returns true if this reference has been disposed.
            This does not indicate whether the object being referenced has been disposed,
            but it may have been if this was the last reference.  In any case, if this
            is true, you shouldn't access the object anyway.
            </summary>
        </member>
        <member name="P:AgateLib.Utility.Ref`1.Value">
            <summary>
            Returns the object being wrapped around.
            </summary>
        </member>
        <member name="P:AgateLib.Utility.Ref`1.Counter">
            <summary>
            The RefCounter&lt;T&gt; object this wraps.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.FileSystemProvider">
            <summary>
            FileSystemProvider implements IFileProvider, providing access to files
            from the operating system file system.
            </summary>
        </member>
        <member name="M:AgateLib.Utility.FileSystemProvider.#ctor(System.String)">
            <summary>
            Constructs a FileSystemProvider object directing it to read files from the
            specified path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:AgateLib.Utility.FileSystemProvider.OpenRead(System.String)">
            <summary>
            Opens a file.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileSystemProvider.FileExists(System.String)">
            <summary>
            Returns true if the specified file exists.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileSystemProvider.FindFileName(System.String)">
            <summary>
            Searches through all directories in the SearchPathList object for the specified
            filename.  The search is performed in the order directories have been added,
            and the first result is returned.  If no file is found, null is returned.
            </summary>
            <param name="filename">Filename to search for.</param>
            <returns>The full path of the file, if it exists.  Null if no file is found.</returns>
        </member>
        <member name="M:AgateLib.Utility.FileSystemProvider.CheckCrossPlatformFilename(System.String)">
            <summary>
            Checks to see if a filepath is entered in a cross-platform 
            manner, and returns true if it is.
            </summary>
            <param name="path">The path to check.</param>
            <returns>True if the passed path is cross-platform.</returns>
        </member>
        <member name="M:AgateLib.Utility.FileSystemProvider.GetAllFiles">
            <summary>
            Gets all files in all paths.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileSystemProvider.GetAllFiles(System.String)">
            <summary>
            Gets all files in all paths that match the specified search pattern.
            </summary>
            <param name="searchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileSystemProvider.ToString">
            <summary>
            Returns a string representing the FileSystemProvider object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Utility.FileSystemProvider.NonCrossPlatformChars">
            <summary>
            Returns a list of characters which may be valid file path characters
            on some platforms, but not others.
            </summary>
        </member>
        <member name="P:AgateLib.Utility.FileSystemProvider.SearchPath">
            <summary>
            Gets the path that this FileSystemProvider searches in.
            </summary>
        </member>
        <member name="T:AgateLib.InputLib.KeyModifiers">
            <summary>
            Structure which keeps track of modifier keys applied to
            other keys.
            </summary>
        </member>
        <member name="M:AgateLib.InputLib.KeyModifiers.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a KeyModifiers structure with the given
            state of the alt, control and shift keys.
            </summary>
            <param name="alt"></param>
            <param name="control"></param>
            <param name="shift"></param>
        </member>
        <member name="P:AgateLib.InputLib.KeyModifiers.Alt">
            <summary>
            Gets or sets the state of the Alt key.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.KeyModifiers.Control">
            <summary>
            Gets or sets the state of the Control key.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.KeyModifiers.Shift">
            <summary>
            Gets or sets the state of the Shift key.
            </summary>
        </member>
        <member name="T:AgateLib.ImplementationBase.SurfaceImpl">
            <summary>
            Base class for implementing a Surface structure.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.#ctor">
            <summary>
            Constructs a SurfaceImpl object.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.Dispose">
            <summary>
            Frees unmanaged resources.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.Draw(AgateLib.Geometry.Rectangle)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should Draw the surface to the screen, ignoring
            all scaling, rotation and alignment state data.
            Color and Alpha are still to be used.
            
            It is recommended to override this method, as the base class
            implementation saves the state, draws, then restores the state.
            </summary>
            <param name="destRect"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.Draw(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Rectangle)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw a portion of the surface to the screen, ignoring
            all scaling, rotation and alignment state data.
            Color and Alpha are still to be used.
            
            This method automatically converts Rectangle structures into RectangleF 
            structures and calls the Draw overload which takes them.  This can be 
            overriden if the implementation is more natural to use integral values.
            </summary>
            <param name="srcRect"></param>
            <param name="destRect"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.Draw(System.Single,System.Single,AgateLib.Geometry.Rectangle,System.Single,System.Single)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw a portion of the surface to the screen, using
            all scaling, rotation and alignment state data.
            
            This method must be overriden.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="srcRect"></param>
            <param name="rotationCenterX"></param>
            <param name="rotationCenterY"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.Draw(AgateLib.Geometry.RectangleF,AgateLib.Geometry.RectangleF)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw a portion of the surface to the screen, ignoring
            all scaling, rotation and alignment state data.
            Color and Alpha are still to be used.
            
            This method must be overriden.
            </summary>
            <param name="srcRect"></param>
            <param name="destRect"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.Draw(AgateLib.Geometry.Point)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw the surface to the screen, using all the
            scaling, rotation, etc. state data in the stored Surface object.
            The base class method calls Draw(PointF).
            
            This method may be overriden, if it is convenient to provide an 
            alternate implementation which takes integral drawing values.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.Draw(System.Single,System.Single)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw the surface to the screen, using all the
            scaling, rotation, etc. state data in the stored Surface object.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.Draw(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw the surface to the screen, using all the
            scaling, rotation, etc. state data in the stored Surface object,
            except for RotationCenter.  Use the point passed for the center
            of rotation.
            
            This method must be overriden.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="rotationCenterX"></param>
            <param name="rotationCenterY"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.DrawPoints(AgateLib.Geometry.Point[])">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw the surface to the screen, with the same result
            as if Draw was called once for each Point passed.
            </summary>
            <param name="destPts"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.Draw">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method draws the surface at (0, 0).  The base class implementation
            simply calls Draw(Point.Empty).
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.DrawRects(AgateLib.Geometry.Rectangle[],AgateLib.Geometry.Rectangle[],System.Int32,System.Int32)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw the surface to the screen, with the same result
            as if Draw was called once for each src and dest rect pairs.
            It should be overridden, to minimize calls across managed/unmanaged boundaries.
            </summary>
            <param name="srcRects"></param>
            <param name="destRects"></param>
            <param name="start">Element in the array to start with.</param>
            <param name="length">Number of elements in the arrays to use.</param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.DrawRects(AgateLib.Geometry.RectangleF[],AgateLib.Geometry.RectangleF[],System.Int32,System.Int32)">
            <summary>
            For function use, see documentation of Surface.
            
            Info for developers:
            This method should draw the surface to the screen, with the same result
            as if Draw was called once for each src and dest rect pairs.
            It should be overridden, to minimize calls across managed/unmanaged boundaries.
            </summary>
            <param name="srcRects"></param>
            <param name="destRects"></param>
            <param name="start">Element in the arrays to start with.</param>
            <param name="length">Number of elements in the arrays to use.</param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.BeginQueueRects">
            <summary>
            Sets up data structures to queue rects to draw to the screen.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.BeginQueueRects(System.Int32)">
            <summary>
            Sets up data structures to queue rects to draw to the screen.
            </summary>
            <param name="guessCount">A good guess for how many rects you are going to draw.</param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.QueueRect(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Rectangle)">
            <summary>
            Adds a src/dest rectangle pair to the queue.  Make sure to call
            BeginQueueRects first.
            </summary>
            <param name="src_rect"></param>
            <param name="dest_rect"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.EndQueueRects">
            <summary>
            Ends adding rects to the queue and draws all of them to the screen.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.SaveTo(System.String,AgateLib.DisplayLib.ImageFileFormat)">
            <summary>
            Saves the surface data to the specified file in the specified format.
            </summary>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.CarveSubSurface(AgateLib.Geometry.Rectangle)">
            <summary>
            Creates a new SurfaceImpl object which comes from a small sub-rectangle on this surface.
            </summary>
            <param name="surface"></param>
            <param name="srcRect"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.SetSourceSurface(AgateLib.ImplementationBase.SurfaceImpl,AgateLib.Geometry.Rectangle)">
            <summary>
            Used by Display.BuildPackedSurface.
            </summary>
            <param name="surf"></param>
            <param name="srcRect"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.ReadPixels(AgateLib.DisplayLib.PixelFormat)">
            <summary>
            Creates a PixelBuffer object with a copy of the pixel data, in the specified format.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.ReadPixels(AgateLib.DisplayLib.PixelFormat,AgateLib.Geometry.Rectangle)">
            <summary>
            Creates a PixelBuffer object with a copy of the pixel data in the 
            specified rectangle, in the specified format.
            </summary>
            <param name="format"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.WritePixels(AgateLib.DisplayLib.PixelBuffer)">
            <summary>
            Writes pixel data to the surface.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.WritePixels(AgateLib.DisplayLib.PixelBuffer,AgateLib.Geometry.Point)">
            <summary>
            Writes pixel data to the surface.
            </summary>
            <param name="buffer"></param>
            <param name="startPoint"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.SetScale(System.Double,System.Double)">
            <summary>
            Sets the amount of scaling when this surface is drawn.  
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.GetScale(System.Double@,System.Double@)">
            <summary>
            Gets the amount of scaling when this surface is drawn.
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.IncrementRotationAngle(System.Double)">
            <summary>
            Increments the rotation angle of this surface.
            </summary>
            <param name="radians">Value in radians to increase the rotation by.</param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.IncrementRotationAngleDegrees(System.Double)">
            <summary>
            Increments the rotation angle of this surface.  Value supplied is in degrees.
            </summary>
            <param name="degrees"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.IsSurfaceBlank">
            <summary>
            Checks to see whether the surface pixels all have
            alpha value less than the value of the AlphaThreshold of the
            display object..
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.IsSurfaceBlank(System.Int32)">
            <summary>
            Checks to see whether the surface pixels all have
            alpha value less than the given value.
            </summary>
            <param name="alphaThreshold">The alpha value below which to consider 
            a pixel blank.  In the range 0 &lt;= alphaThreshold &lt;= 255.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.IsRowBlank(System.Int32)">
            <summary>
            Checks to see whether all the pixels along the given row are all
            transparent, within the threshold.
            </summary>
            <param name="row">Which row.  Valid range is between 0 and SurfaceSize.Height - 1.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.IsColumnBlank(System.Int32)">
            <summary>
            Checks to see whether all the pixels along the given column are all
            transparent, within the threshold.
            </summary>
            <param name="col">Which column.  Valid range is between 0 and SurfaceSize.Width - 1.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.IsRowBlankScanARGB(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Scans a memory area to see if it entirely contains pixels which won't be
            seen when drawn.
            </summary>
            <param name="pixelData">Pointer to the data</param>
            <param name="row">Which row to check</param>
            <param name="cols">How many columns to check</param>
            <param name="strideInBytes">The stride of each row</param>
            <param name="alphaThreshold">The maximum value of alpha to consider a pixel transparent.</param>
            <param name="alphaMask">The mask to use to extract the alpha value from the data.</param>
            <param name="alphaShift">How many bits to shift it to get alpha in the range of 0-255.
            For example, if alphaMask = 0xff000000 then alphaShift should be 24.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.IsColBlankScanARGB(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            Scans a memory area to see if it entirely contains pixels which won't be
            seen when drawn.
            </summary>
            <param name="pixelData">Pointer to the data</param>
            <param name="col">Which col to check</param>
            <param name="rows">How many columns to check</param>
            <param name="strideInBytes">The stride of each row</param>
            <param name="alphaThreshold">The maximum value of alpha to consider a pixel transparent.</param>
            <param name="alphaMask">The mask to use to extract the alpha value from the data.</param>
            <param name="alphaShift">How many bits to shift it to get alpha in the range of 0-255.
            For example, if alphaMask = 0xff000000 then alphaShift should be 24.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.BeginRender">
            <summary>
            Utility function which can be called by BeginFrame to begin
            a render pass.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.SurfaceImpl.EndRender">
            <summary>
            Utility function which can be called by EndFrame to end a render pass.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.TesselateFactor">
            <summary>
            Gets or sets how many squares the surface should be broken into when drawn.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.IsDisposed">
            <summary>
            Returns true if Dispose() has been called on this surface.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.ShouldBePacked">
            <summary>
            Gets or sets a bool value which indicates whether or not this surface
            should be considered for packing when Display.PackAllSurfaces() is 
            called.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.DisplayWidth">
            <summary>
            Get or sets the width of the surface in pixels when it will be displayed on screen.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.DisplayHeight">
            <summary>
            Gets or sets the height of the surface in pixels when it is displayed on screen.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.DisplaySize">
            <summary>
            Gets or sets the Size of the area used by this surface when displayed on screen.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.Alpha">
            <summary>
            Alpha value for displaying this surface.
            Valid values range from 0.0 (completely transparent) to 1.0 (completely opaque).
            Internally stored as a byte, so granularity is only 1/255.0.
            If a gradient is used, getting this property returns the alpha value for the top left
            corner of the gradient.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.RotationAngle">
            <summary>
            Gets or sets the rotation angle in radians.
            Positive angles indicate rotation in the Counter-Clockwise direction.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.RotationAngleDegrees">
            <summary>
            Gets or sets the rotation angle in degrees.
            Positive angles indicate rotation in the Counter-Clockwise direction.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.RotationCenter">
            <summary>
            Gets or sets the point on the surface which is used to rotate around.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.DisplayAlignment">
            <summary>
            Gets or sets the point where the surface is aligned to when drawn.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.ScaleWidth">
            <summary>
            Gets or sets the amount the width is scaled when this surface is drawn.
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.ScaleHeight">
            <summary>
            Gets or sets the amount the height is scaled when this surface is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.Color">
            <summary>
            Gets or sets the multiplicative color for this surface.
            Setting this is equivalent to setting the ColorGradient property
            with a gradient with the same color in all corners.  If a gradient
            is being used, getting this property returns the top-left color in the gradient.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.ColorGradient">
            <summary>
            Gets or sets the gradient for this surface.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.SurfaceWidth">
            <summary>
            Gets the width of the source surface in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.SurfaceHeight">
            <summary>
            Gets the height of the source surface in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.SurfaceImpl.SurfaceSize">
            <summary>
            Gets the Size of the source surface in pixels.
            </summary>
        </member>
        <member name="T:AgateLib.Geometry.Vector3">
            <summary>
            Structure which describes a vector in 3-space.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a Vector3 object.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a Vector3 object.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="F:AgateLib.Geometry.Vector3.Empty">
            <summary>
            Vector representing the origin.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.Normalize">
            <summary>
            Returns a vector pointing in the same direction as this one, with magnitude 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.op_Addition(AgateLib.Geometry.Vector3,AgateLib.Geometry.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.op_Subtraction(AgateLib.Geometry.Vector3,AgateLib.Geometry.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.op_UnaryNegation(AgateLib.Geometry.Vector3)">
            <summary>
            Unary - operator: multiples vector by -1.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.op_Multiply(AgateLib.Geometry.Vector3,System.Single)">
            <summary>
            Scales a vector by a scalar floating point value.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.op_Division(AgateLib.Geometry.Vector3,System.Single)">
            <summary>
            Divides a vector's components by a floating point value.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.DotProduct(AgateLib.Geometry.Vector3)">
            <summary>
            Computes and returns the dot product with another vector.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.DotProduct(AgateLib.Geometry.Vector3,AgateLib.Geometry.Vector3)">
            <summary>
            Computes and returns the dot product between two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.CrossProduct(AgateLib.Geometry.Vector3)">
            <summary>
            Returns the cross product of two vectors.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector3.CrossProduct(AgateLib.Geometry.Vector3,AgateLib.Geometry.Vector3)">
            <summary>
            Returns the cross product of two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Geometry.Vector3.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Vector3.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Vector3.Z">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Vector3.IsEmpty">
            <summary>
            Returns true if this vector's components are all zero.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Vector3.MagnitudeSquared">
            <summary>
            Returns the square of the length of the vector.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Vector3.Magnitude">
            <summary>
            Returns the length of the vector.
            </summary>
        </member>
        <member name="T:AgateLib.Geometry.SizeF">
            <summary>
            SizeF structure.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.SizeF.#ctor(AgateLib.Geometry.PointF)">
            <summary>
            Constructs a SizeF structure.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:AgateLib.Geometry.SizeF.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a SizeF structure.
            </summary>
            <param name="height"></param>
            <param name="width"></param>
        </member>
        <member name="F:AgateLib.Geometry.SizeF.Empty">
            <summary>
            Empty SizeF structure.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.SizeF.op_Explicit(AgateLib.Geometry.SizeF)~AgateLib.Geometry.Size">
            <summary>
            Conversion to Size casts height and width to integers.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.SizeF.op_Equality(AgateLib.Geometry.SizeF,AgateLib.Geometry.SizeF)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.SizeF.op_Inequality(AgateLib.Geometry.SizeF,AgateLib.Geometry.SizeF)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.SizeF.ToString">
            <summary>
            Converts to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.SizeF.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.SizeF.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.SizeF.Equals(AgateLib.Geometry.SizeF)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Geometry.SizeF.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.SizeF.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.SizeF.IsEmpty">
            <summary>
            True if width and height are zero.
            </summary>
        </member>
        <member name="T:AgateLib.Geometry.Size">
            <summary>
            Replacement for System.Drawing.Size object.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Size.#ctor(AgateLib.Geometry.Point)">
            <summary>
            Constructs a Size.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:AgateLib.Geometry.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Size.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.Geometry.Size.op_Equality(AgateLib.Geometry.Size,AgateLib.Geometry.Size)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Size.op_Inequality(AgateLib.Geometry.Size,AgateLib.Geometry.Size)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Size.ToString">
            <summary>
            Converts to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Size.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Size.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Size.Equals(AgateLib.Geometry.Size)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:AgateLib.Geometry.Size.Empty">
            <summary>
            Empty Size.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Size.Ceiling(AgateLib.Geometry.SizeF)">
            <summary>
            Rounds the SizeF structure up.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Size.op_Explicit(AgateLib.Geometry.Size)~AgateLib.Geometry.SizeF">
            <summary>
            Explicit conversion to SizeF structure.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Size.FromString(System.String)">
            <summary>
            Parses a string into a size object.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Geometry.Size.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Size.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Size.IsEmpty">
            <summary>
            Returns true if width and height are zero.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.ImageFileFormat">
            <summary>
            Enum which is used to indicate what format an image file is in.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.ImageFileFormat.Png">
            <summary>
            Portable Network Graphics (PNG) format.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.ImageFileFormat.Bmp">
            <summary>
            Windows Bitmap (BMP) format.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.ImageFileFormat.Jpg">
            <summary>
            Jpeg format.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.ImageFileFormat.Tga">
            <summary>
            Targa format.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.Surface">
            <summary>
            Class which represents a pixel surface.
            There are several ways to create a Surface object.  The most common
            is to pass the name of an image file.
            
            Using a surface to draw on the screen is very simple.  There are
            several overloaded Draw methods which do that.
            
            You must have created a DisplayWindow object before creating any 
            Surface objects.
            <example>
            C# Example to create a new surface from an image file:
            <code>
                Surface surface = new Surface("myimage.png");
            </code>
            VB Example to create a new surface from an image file:
            <code>
                Dim surf as New Surface("myimage.png")
            </code>
            
            C# Example to draw surface to screen.
            <code>
                surface.Draw(20, 20);
            </code>
            VB Example to draw surface to screen.
            <code>
                surf.Draw(20, 20)
            </code>
            </example>
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.#ctor(AgateLib.Resources.AgateResourceCollection,System.String)">
            <summary>
            Creates a surface object from a resource.
            </summary>
            <param name="resources"></param>
            <param name="name"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.#ctor(System.String)">
            <summary>
            Creates a surface object, from the specified image file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.#ctor(AgateLib.IFileProvider,System.String)">
            <summary>
            Creates a surface object using the specified file provider to open the image file.
            </summary>
            <param name="filename"></param>
            <param name="fileProvider"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.#ctor(System.IO.Stream)">
            <summary>
            Creates a surface object from the data in the specified stream.
            </summary>
            <param name="st"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a surface object of the specified size.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.#ctor(AgateLib.Geometry.Size)">
            <summary>
            Creates a surface object of the specified size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.#ctor(AgateLib.DisplayLib.PixelBuffer)">
            <summary>
            Constructs a surface object from the specified PixelBuffer object.
            </summary>
            <param name="pixels"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.#ctor(AgateLib.ImplementationBase.SurfaceImpl)">
            <summary>
            Creates a surface object and to be ready to attach to an implemented object.
            Throws an Exception if there is a passed impl.
            (This is not intended for use by applications).
            </summary>
            <param name="fromImpl"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Dispose">
            <summary>
            Destroyes unmanaged resources associated with this surface.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.SetScale(System.Double,System.Double)">
            <summary>
            Sets the amount of scaling when this surface is drawn.  
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.GetScale(System.Double@,System.Double@)">
            <summary>
            Gets the amount of scaling when this surface is drawn.
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.IncrementRotationAngle(System.Double)">
            <summary>
            Increments the rotation angle of this surface.
            </summary>
            <param name="radians">Value in radians to increase the rotation by.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.IncrementRotationAngleDegrees(System.Double)">
            <summary>
            Increments the rotation angle of this surface.  Value supplied is in degrees.
            </summary>
            <param name="degrees"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Draw">
            <summary>
            Draws the surface to the top-left corner (0, 0) of the
            target.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Draw(System.Int32,System.Int32)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Draw(System.Single,System.Single)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Draw(AgateLib.Geometry.Point)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Draw(AgateLib.Geometry.Vector2)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Draw(AgateLib.Geometry.PointF)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Draw(AgateLib.Geometry.PointF,AgateLib.Geometry.PointF)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            Ignores the value of RotationCenter and uses the specified
            point to rotate around instead.  
            </summary>
            <param name="destPt"></param>
            <param name="rotationCenter">Center of rotation to use, relative
            to the top-left of the surface.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Draw(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            Ignores the value of RotationCenter and uses the specified
            point to rotate around instead.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Draw(System.Single,System.Single,AgateLib.Geometry.Rectangle,System.Single,System.Single)">
            <summary>
            Draws this surface to the screen at the specified point, 
            using all the state information defined in the properties 
            of this surface.
            Ignores the value of RotationCenter and uses the specified
            point to rotate around instead.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Draw(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Rectangle)">
            <summary>
            Draws a portion of this surface to the specified destination
            rectangle.  
            
            State settings which are ignored are RotationAngle,
            DisplayAlignment and Scaling.  Color and alpha values
            are still used.
            </summary>
            <param name="srcRect"></param>
            <param name="destRect"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.Draw(AgateLib.Geometry.Rectangle)">
            <summary>
            Draws this surface to the specified destination
            rectangle.  
            
            State settings which are ignored are RotationAngle,
            DisplayAlignment and Scaling.  Color and alpha values
            are still used.
            </summary>
            <param name="destRect"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.DrawRects(AgateLib.Geometry.Rectangle[],AgateLib.Geometry.Rectangle[])">
            <summary>
            Draws the surface using an array of source and destination rectangles.
            This method will throw an exception if the two arrays are not the same size.
            </summary>
            <param name="srcRects"></param>
            <param name="destRects"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.DrawRects(AgateLib.Geometry.RectangleF[],AgateLib.Geometry.RectangleF[])">
            <summary>
            Draws the surface using an array of source and destination rectangles.
            This method will throw an exception if the two arrays are not the same size.
            </summary>
            <param name="srcRects"></param>
            <param name="destRects"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.DrawRects(AgateLib.Geometry.Rectangle[],AgateLib.Geometry.Rectangle[],System.Int32,System.Int32)">
            <summary>
            Draws the surface using an array of source and destination rectangles.
            This method will throw an exception if the two arrays are not the same size.
            </summary>
            <param name="srcRects"></param>
            <param name="destRects"></param>
            <param name="start">Element in the arrays to start at.</param>
            <param name="length">Number of elements in the arrays to use.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.DrawRects(AgateLib.Geometry.RectangleF[],AgateLib.Geometry.RectangleF[],System.Int32,System.Int32)">
            <summary>
            Draws the surface using an array of source and destination rectangles.
            This method will throw an exception if the two arrays are not the same size.
            </summary>
            <param name="srcRects"></param>
            <param name="destRects"></param>
            <param name="start">Element in the arrays to start at.</param>
            <param name="length">Number of elements in the arrays to use.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.SaveTo(System.String)">
            <summary>
            Saves the surface to the specified file.
            
            Infers the file format from the extension.  If there
            is no extension present or it is unrecognized, PNG is
            assumed.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.SaveTo(System.String,AgateLib.DisplayLib.ImageFileFormat)">
            <summary>
            Saves the surface to the specified file, with the specified
            file format.  If the file has an extension such as ".png" or
            ".bmp" than the SaveTo(string) overload is prefered, as it
            chooses a file format which is consistent with the extension.
            </summary>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.CarveSubSurface(AgateLib.Geometry.Rectangle)">
            <summary>
            Copies the pixels in this surface from the given source rectangle 
            to a new surface, and returns that.
            It is not recommended to call this between calls to 
            Display.BeginFrame..Display.EndFrame.
            </summary>
            <param name="srcRect">The rectangle of pixels to create a new surface from.</param>
            <returns>A Surface object containing only those pixels copied.</returns>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.SetSourceSurface(AgateLib.DisplayLib.Surface,AgateLib.Geometry.Rectangle)">
            <summary>
            Used by the BuildPackedSurface 
            </summary>
            <param name="surf"></param>
            <param name="srcRect"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.ReadPixels">
            <summary>
            Returns a pixel buffer which contains a copy of the pixel data in the surface. 
            The format of the pixel data is the same as of the raw data in the surface. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.ReadPixels(AgateLib.DisplayLib.PixelFormat)">
            <summary>
            Returns a pixel buffer which contains a copy of the pixel data in the surface. 
            </summary>
            <param name="format">Format of the pixel data wanted.  Automatic conversion is
            performed, if necessary.  Use PixelFormat.Any to retrieve data in its original format,
            without conversion.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.ReadPixels(AgateLib.DisplayLib.PixelFormat,AgateLib.Geometry.Rectangle)">
            <summary>
            Returns a pixel buffer which contains a copy of the pixel data in the surface,
            inside the rectangle requested.
            </summary>
            <param name="format">Format of the pixel data wanted.  Automatic conversion is
            performed, if necessary.  Use PixelFormat.Any to retrieve data in its original format,
            without conversion.</param>
            <param name="rect">Area of the Surface from which to retrieve data.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.WritePixels(AgateLib.DisplayLib.PixelBuffer)">
            <summary>
            Copies the data directly from PixelBuffer. The PixelBuffer must be the same width 
            and height as the Surface's SurfaceWidth and SurfaceHeight.
            </summary>
            <param name="buffer">The PixelBuffer which contains pixel data to copy from.</param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.WritePixels(AgateLib.DisplayLib.PixelBuffer,AgateLib.Geometry.Point)">
            <summary>
            Copies the data directly from PixelBuffer, overwriting a portion of the surface's 
            pixel data.  The PixelBuffer must fit within the surface.
            </summary>
            <param name="buffer">The PixelBuffer which contains pixel data to copy from.</param>
            <param name="startPoint"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.WritePixels(AgateLib.DisplayLib.PixelBuffer,AgateLib.Geometry.Rectangle,AgateLib.Geometry.Point)">
            <summary>
            Copies the data directly from the PixelBuffer to the surface, overwriting a portion
            of the surface's pixel data.  The selected source rectangle from the pixel buffer must
            fit within the surface.
            </summary>
            <param name="buffer"></param>
            <param name="sourceRect"></param>
            <param name="destPt"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Surface.FormatFromExtension(System.String)">
            <summary>
            Returns a value in the ImageFileFormat enum based on the file
            extension of the given filename.  No checks are done to see
            if that file exists.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.IsDisposed">
            <summary>
            Returns true if Dispose() has been called on this surface.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.TesselateFactor">
            <summary>
            Gets or sets how many times this surface should be broken down
            when drawn.  A TesselateFactor of 2 indicates that each time
            this surface is drawn, it's drawn in 4 (2x2) chunks.
            </summary>
            <remarks>
            This property is used to divide a surface drawn up into smaller
            surfaces which are drawn independently.  The reason to do this is
            lighting calculations (without using shaders) are done on a per-vertex 
            basis.  When a light source is close to a large surface, this will create
            noticably bad lighting, because only the lighting properties at the 
            corners are calculated, and then the lighting is interpolated between
            the end points.
            <para>
            Changing this value while using gradients can result in ugly transitions between
            different tesselation values.  The reason is AgateLib will interpolate the gradient
            color to the vertices used, and then this is capped to integer values.  So avoid
            doing this.</para>
            <para>
            Setting this value high may have a significant impact on performance.
            For each time a Surface.Draw() overload is called, the number of triangles
            which are calculated and sent to the rasterizer is 2 * TesselateFactor<sup>2</sup>.
            </para>
            </remarks>
            
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.ShouldBePacked">
            <summary>
            Gets or sets a bool value that indicates whether or not this surface
            should be included in a call to Display.PackAllSurfaces.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.SurfaceWidth">
            <summary>
            Gets the width of the source surface in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.SurfaceHeight">
            <summary>
            Gets the height of the source surface in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.SurfaceSize">
            <summary>
            Gets the Size of the source surface in pixels.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.DisplayWidth">
            <summary>
            Get or sets the width of the surface in pixels when it will be displayed on screen.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.DisplayHeight">
            <summary>
            Gets or sets the height of the surface in pixels when it is displayed on screen.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.DisplaySize">
            <summary>
            Gets or sets the Size of the area used by this surface when displayed on screen.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.Alpha">
            <summary>
            Alpha value for displaying this surface.
            Valid values range from 0.0 (completely transparent) to 1.0 (completely opaque).
            Internally stored as a byte, so granularity is only 1/255.0.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.RotationAngle">
            <summary>
            Gets or sets the rotation angle in radians.
            Positive angles indicate rotation in the Counter-Clockwise direction.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.RotationAngleDegrees">
            <summary>
            Gets or sets the rotation angle in degrees.
            Positive angles indicate rotation in the Counter-Clockwise direction.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.RotationCenter">
            <summary>
            Gets or sets the point on the surface which is used to rotate around.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.DisplayAlignment">
            <summary>
            Gets or sets the point where the surface is aligned to when drawn.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.ScaleWidth">
            <summary>
            Gets or sets the amount the width is scaled when this surface is drawn.
            1.0 is no scaling.
            Scale values can be negative, this causes the surface to be mirrored
            in that direction.  This does not affect how the surface is aligned;
            eg. if DisplayAlignment is top-left and ScaleWidth &lt; 0, the surface 
            will still be drawn to the right of the point supplied to Draw(Point).
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.ScaleHeight">
            <summary>
            Gets or sets the amount the height is scaled when this surface is drawn.
            1.0 is no scaling.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.Color">
            <summary>
            Gets or sets the multiplicative color for this surface.
            Setting this is equivalent to setting the ColorGradient property
            with a gradient with the same color in all corners.  If a gradient
            is being used, getting this property returns the top-left color in the gradient.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.ColorGradient">
            <summary>
            Gets or sets the gradient for this surface.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Surface.Impl">
            <summary>
            Gets the object which does actual rendering of this surface.
            This may be cast to a surface object in whatever rendering library
            is being used (eg. if using the MDX_1_1 library, this can be cast
            to an MDX1_Surface object).  You only need to use this if you
            want to access features which are specific to the graphics library
            you're using.
            </summary>
        </member>
        <member name="T:AgateLib.AgateSetup">
            <summary>
            Class which is designed to simplify initialization and de-initialization of the
            library.  It is recommended to have a Setup object in a using block around your game
            code so that calling Dispose is guaranteed.
            
            If the program arguments are supplied, you can allow the user to choose which drivers
            are used, if the --choose option is specified.
            
            <example>This example shows a typical development pattern for the use of an AgateSetup object.
            <code>
            using System;
            using System.Collections.Generic;
            using AgateLib;
            
            public static void Main(string[] args)
            {
                using(AgateSetup setup = new AgateSetup("My Application Name", args))
                {
                    setup.InitializeAll();
                    if (setup.WasCanceled)
                        return;
            
                    // TODO: write game here
                }
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:AgateLib.AgateSetup.#ctor">
            <summary>
            Constructs a Setup object.
            </summary>
        </member>
        <member name="M:AgateLib.AgateSetup.#ctor(System.String)">
            <summary>
            Constructs a Setup object.
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:AgateLib.AgateSetup.#ctor(System.String[])">
            <summary>
            Constructs a Setup object.
            </summary>
            <param name="args">Command line arguments to the program.</param>        
        </member>
        <member name="M:AgateLib.AgateSetup.#ctor(System.String,System.String[])">
            <summary>
            Constructs a Setup object.
            </summary>
            <param name="title"></param>
            <param name="args">Command line arguments to the program.</param>
        </member>
        <member name="M:AgateLib.AgateSetup.Initialize(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes the specified components.  This sets the values of UseDisplay,
            UseAudio, and UseInput to the values passed in.
            </summary>
            <param name="display"></param>
            <param name="audio"></param>
            <param name="input"></param>
        </member>
        <member name="M:AgateLib.AgateSetup.InitializeAll">
            <summary>
            Initializes the Display, Audio and Input controllers.
            </summary>
        </member>
        <member name="M:AgateLib.AgateSetup.InitializeDisplay">
            <summary>
            Initializes the Display.
            Automatically selects the driver to use, or asks the user which
            driver to use if appropriate.
            </summary>
        </member>
        <member name="M:AgateLib.AgateSetup.InitializeDisplay(AgateLib.Drivers.DisplayTypeID)">
            <summary>
            Initializes the display to the specified subsystem.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AgateLib.AgateSetup.InitializeAudio">
            <summary>
            Initializes the Audio subsystem.
            Automatically picks which driver to use.
            </summary>
        </member>
        <member name="M:AgateLib.AgateSetup.InitializeAudio(AgateLib.Drivers.AudioTypeID)">
            <summary>
            Initializes the Audio subsystem, to the specified driver.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AgateLib.AgateSetup.InitializeInput">
            <summary>
            Initializes the Input subsystem.
            Automatically picks which driver to use.
            </summary>
        </member>
        <member name="M:AgateLib.AgateSetup.InitializeInput(AgateLib.Drivers.InputTypeID)">
            <summary>
            Initializes the Input subsystem, to the specified driver.
            </summary>
            <param name="inputTypeID"></param>
        </member>
        <member name="M:AgateLib.AgateSetup.Dispose">
            <summary>
            Disposes of the SetupDisplay object and all initialized sub-systems.
            </summary>
        </member>
        <member name="M:AgateLib.AgateSetup.DoAskUser">
            <summary>
            Checks to see whether or not the user needs to be asked, and asks them
            if so.
            </summary>
        </member>
        <member name="P:AgateLib.AgateSetup.WasCanceled">
            <summary>
            Returns true if the user hit cancel in any dialog box that showed up
            asking the user what driver to use, or if initialization failed.
            </summary>
        </member>
        <member name="P:AgateLib.AgateSetup.AskUser">
            <summary>
            Gets or sets a bool value which indicates whether or not the user
            should be asked which driver(s) to use when Agate is initialized.
            </summary>
            <remarks>
            This setting can be useful for debugging, especially when comparing 
            OpenGL vs. DirectX behavior and performance.  
            It is recommended to have AskUser turned off for release builds, however.
            </remarks>
        </member>
        <member name="P:AgateLib.AgateSetup.UseDisplay">
            <summary>
            Gets or sets a bool value which indicates whether or not the display
            should be initialized.
            </summary>
        </member>
        <member name="P:AgateLib.AgateSetup.UseAudio">
            <summary>
            Gets or sets a bool value which indicates whether or not the audio system
            should be initialized.
            </summary>
        </member>
        <member name="P:AgateLib.AgateSetup.UseInput">
            <summary>
            Gets or sets a bool value which indicates whether or not the input system
            should be initialized.
            </summary>
        </member>
        <member name="T:AgateLib.InternalResources.DataResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AgateLib.InternalResources.DataResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AgateLib.InternalResources.DataResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:AgateLib.InputLib.Joystick">
            <summary>
            Class which encapsulates a single joystick.
            </summary>
        </member>
        <member name="M:AgateLib.InputLib.Joystick.GetAxisValue(System.Int32)">
            <summary>
            Gets the current value for the given axis.
            Axis 0 is always the x-axis, axis 1 is always the y-axis on
            controlers which have this capability.
            </summary>
            <param name="axisIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.InputLib.Joystick.GetButtonState(System.Int32)">
            <summary>
            Gets whether or not the specified button is pushed.
            </summary>
            <param name="buttonIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.InputLib.Joystick.Recalibrate">
            <summary>
            Recalibrates this joystick.
            
            Behavior is driver-dependent, however this usually means taking
            the current position as the "zeroed" position for the joystick.
            </summary>
        </member>
        <member name="M:AgateLib.InputLib.Joystick.Poll">
            <summary>
            Polls the joystick for data.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Joystick.Name">
            <summary>
            Returns the name of the joystick.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Joystick.AxisCount">
            <summary>
            Gets how many axes are available on this joystick.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Joystick.ButtonCount">
            <summary>
            Returns the number of buttons this joystick has.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Joystick.AxisThreshold">
            <summary>
            Values smaller than this value for axes will
            be truncated and returned as zero.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Joystick.Xaxis">
            <summary>
            Returns the value of the joystick x-axis.
            Ranges are:
            -1 all the way to the left
             0 centered
             1 all the way to the right
            
            Values outside this range may be returned.
            Never do tests which expect exact return values.
            Even digital gamepads will sometimes return values close to 1
            when pushed down, instead of exactly 1.
            
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Joystick.Yaxis">
            <summary>
            Returns the value of the joystick y-axis.
            Ranges are:
            -1 all the way to the top
             0 centered
             1 all the way to the bottom
            
            Values outside this range may be returned.
            Never do tests which expect exact return values.
            Even digital gamepads will sometimes return values close to 1
            when pushed down, instead of exactly 1.
            
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Joystick.PluggedIn">
            <summary>
            Returns whether or not this joystick is plugged in.
            
            If a joystick is removed, you must throw away the reference to 
            this object and get a new one.
            </summary>
        </member>
        <member name="T:AgateLib.Geometry.Vector2">
            <summary>
            Structure which describes a vector in 2-space.  The Vector2 class 
            contains overloads for mathematical operations to make computation expressions
            involving the Vector2 simple and expressive.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a Vector2 object.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:AgateLib.Geometry.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a Vector2 object.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:AgateLib.Geometry.Vector2.op_Explicit(AgateLib.Geometry.Vector2)~AgateLib.Geometry.Vector3">
            <summary>
            Converts to a Vector3 object, with a Z value of zero.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="F:AgateLib.Geometry.Vector2.Empty">
            <summary>
            Vector representing the origin.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Vector2.Normalize">
            <summary>
            Returns a vector pointing in the same direction as this one, with magnitude 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector2.op_Addition(AgateLib.Geometry.Vector2,AgateLib.Geometry.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector2.op_Subtraction(AgateLib.Geometry.Vector2,AgateLib.Geometry.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector2.op_UnaryNegation(AgateLib.Geometry.Vector2)">
            <summary>
            Unary - operator: multiples vector by -1.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector2.op_Multiply(AgateLib.Geometry.Vector2,System.Single)">
            <summary>
            Scales a vector by a scalar floating point value.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector2.op_Division(AgateLib.Geometry.Vector2,System.Single)">
            <summary>
            Divides a vector's components by a floating point value.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector2.DotProduct(AgateLib.Geometry.Vector2)">
            <summary>
            Computes and returns the dot product with another vector.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Vector2.DotProduct(AgateLib.Geometry.Vector2,AgateLib.Geometry.Vector2)">
            <summary>
            Computes and returns the dot product between two vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Geometry.Vector2.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Vector2.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Vector2.IsEmpty">
            <summary>
            Returns true if this vector has zero for all components.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Vector2.MagnitudeSquared">
            <summary>
            Returns the square of the length of the vector.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Vector2.Magnitude">
            <summary>
            Returns the length of the vector.
            </summary>
        </member>
        <member name="T:AgateLib.Drivers.AgateDriverReporter">
            <summary>
            Class which is used by the <c>Registrar</c> to enumerate the drivers available
            in a satellite assembly.  Any assembly with drivers for use by AgateLib should
            have a class inheriting from AgateDriverReporter and should construct AgateDriverInfo
            objects for each driver in the assembly.
            </summary>
        </member>
        <member name="M:AgateLib.Drivers.AgateDriverReporter.ReportDrivers">
            <summary>
            Constructs and returns AgateDriverInfo objects for each driver
            in the hosted assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AgateLib.DisplayLib.Light">
            <summary>
            Class which represents a single light source.
            Only point light sources are supported at the moment.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Light.SetAttenuationModel(System.Single,System.Single,System.Single)">
            <summary>
            Sets the three constants in the attenuation model.  See remarks for details.
            </summary>
            <remarks>
            Lights decrease in intensity for objects which are farther away from the lights.
            This is called attenuation.
            Point Lights are attenuated according to the following formula:
            <para>
            K = C<sub>0</sub> + C<sub>1</sub>*d + C<sub>2</sub>*d<sup>2</sup>
            </para>
            <para>
            A = 1 / K
            </para>
            where d is the distance from the light the object being rendered is.  The Light's
            color components are multiplied by A to decrease the intensity of the light on this
            object.
            </remarks>
            <param name="constant"></param>
            <param name="linear"></param>
            <param name="quadratic"></param>
        </member>
        <member name="P:AgateLib.DisplayLib.Light.AttenuationConstant">
            <summary>
            The constant value in the Lighting formula
            <seealso cref="M:AgateLib.DisplayLib.Light.SetAttenuationModel(System.Single,System.Single,System.Single)"/>
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Light.AttenuationLinear">
            <summary>
            The linear value in the Lighting formula
            <seealso cref="M:AgateLib.DisplayLib.Light.SetAttenuationModel(System.Single,System.Single,System.Single)"/>
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Light.AttenuationQuadratic">
            <summary>
            The quadratic value in the Lighting formula
            <seealso cref="M:AgateLib.DisplayLib.Light.SetAttenuationModel(System.Single,System.Single,System.Single)"/>
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Light.Range">
            <summary>
            Gets or sets the distance at which the rendering API can consider the light
            too far away to have any affect.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Light.Enabled">
            <summary>
            Gets or sets whether or not this Light should have any effect on anything which is rendered.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Light.Ambient">
            <summary>
            Ambient color for the light.  Ambient color is not affected by the dot product with the
            normal, so it appears to attenuate slower.
            <seealso cref="P:AgateLib.DisplayLib.Light.Diffuse"/>
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Light.Diffuse">
            <summary>
            Diffuse color for the light.  The diffuse color is modulated by the dot product of the
            direction to the light with the surface normal (for 2D drawing in AgateLib, surface normals
            are always in the negative z direction).  So it attenuates faster than the Ambient color does.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Light.Specular">
            <summary>
            Specular highlight color, or "shininess."  Not currently used.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.Light.Position">
            <summary>
            The position of the Light source, in 3D space.  Normals in AgateLib are in the negative
            z direction, so it is recommended to make Position.Z a negative number.  How negative
            depends on the Attenuation model and what kind of effect you wish to create with the
            lighting.
            </summary>
        </member>
        <member name="T:AgateLib.ImplementationBase.InputImpl">
            <summary>
            Implementation for Input Manager.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.InputImpl.CreateJoysticks">
            <summary>
            Creates joystick impls.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.ImplementationBase.InputImpl.JoystickCount">
            <summary>
            Returns the number of joysticks attached to the system.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AgateLib.Drivers.AgateDriverInfo">
            <summary>
            Class which describes a driver for use by AgateLib.  A class
            inheriting from AgateDriverReporter should construct AgateDriverInfo
            instances for each driver in a plug-in assembly.
            </summary>
        </member>
        <member name="M:AgateLib.Drivers.AgateDriverInfo.#ctor(AgateLib.Drivers.DisplayTypeID,System.Type,System.String,System.Int32)">
            <summary>
            Constructs an AgateDriverInfo for a display driver.
            </summary>
            <param name="typeID">The DisplayTypeID member indicating what the driver uses.</param>
            <param name="driverType">The System.Type object for the type inheriting from DisplayImpl.</param>
            <param name="friendlyName">A friendly name to show the user when choosing a driver.</param>
            <param name="priority">A integer indicating the priority of this driver over others which is used when autoselecting a driver.</param>
        </member>
        <member name="M:AgateLib.Drivers.AgateDriverInfo.#ctor(AgateLib.Drivers.AudioTypeID,System.Type,System.String,System.Int32)">
            <summary>
            Constructs an AgateDriverInfo for an audio driver.
            </summary>
            <param name="typeID">The AudioTypeID member indicating what the driver uses.</param>
            <param name="driverType">The System.Type object for the type inheriting from AudioImpl.</param>
            <param name="friendlyName">A friendly name to show the user when choosing a driver.</param>
            <param name="priority">A integer indicating the priority of this driver over others which is used when autoselecting a driver.</param>
        </member>
        <member name="M:AgateLib.Drivers.AgateDriverInfo.#ctor(AgateLib.Drivers.InputTypeID,System.Type,System.String,System.Int32)">
            <summary>
            Constructs an AgateDriverInfo for an input driver.
            </summary>
            <param name="typeID">The InputTypeID member indicating what the driver uses.</param>
            <param name="driverType">The System.Type object for the type inheriting from InputImpl.</param>
            <param name="friendlyName">A friendly name to show the user when choosing a driver.</param>
            <param name="priority">A integer indicating the priority of this driver over others which is used when autoselecting a driver.</param>
        </member>
        <member name="M:AgateLib.Drivers.AgateDriverInfo.#ctor(AgateLib.Drivers.DesktopTypeID,System.Type,System.String,System.Int32)">
            <summary>
            Constructs an AgateDriverInfo for a desktop driver.
            </summary>
            <param name="typeID">The DesktopTypeID member indicating what the driver uses.</param>
            <param name="driverType">The System.Type object for the type implementing IDesktopDriver.</param>
            <param name="friendlyName">A friendly name to show the user when choosing a driver.</param>
            <param name="priority">A integer indicating the priority of this driver over others which is used when autoselecting a driver.</param>
        </member>
        <member name="P:AgateLib.Drivers.AgateDriverInfo.DriverTypeName">
            <summary>
            Gets the fully qualified type name of the type implementing the driver routines.
            </summary>
        </member>
        <member name="P:AgateLib.Drivers.AgateDriverInfo.FriendlyName">
            <summary>
            Gets the friendly name that may be displayed to the user which identifies this driver.
            </summary>
        </member>
        <member name="P:AgateLib.Drivers.AgateDriverInfo.DriverType">
            <summary>
            Gets the type of driver.
            </summary>
        </member>
        <member name="P:AgateLib.Drivers.AgateDriverInfo.DriverTypeID">
            <summary>
            Gets the type id of this driver.  This value should be cast to DisplayTypeID, AudioTypeID, etc. depending
            on the value of DriverType.
            </summary>
        </member>
        <member name="P:AgateLib.Drivers.AgateDriverInfo.Priority">
            <summary>
            Gets the priority of this driver when autoselecting which driver to use.
            </summary>
        </member>
        <member name="P:AgateLib.Drivers.AgateDriverInfo.AssemblyName">
            <summary>
            Full name of the assembly.
            </summary>
        </member>
        <member name="P:AgateLib.Drivers.AgateDriverInfo.AssemblyFile">
            <summary>
            Path to the assembly.
            </summary>
        </member>
        <member name="T:AgateLib.Drivers.DriverType">
            <summary>
            Enum which indicates what type of driver is specified in an <c>AgateDriverInfo</c> structure.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.DriverType.Display">
            <summary>
            Display driver
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.DriverType.Audio">
            <summary>
            Audio driver
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.DriverType.Input">
            <summary>
            Input driver
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.DriverType.Desktop">
            <summary>
            Desktop driver
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.Origin">
            <summary>
            Static class which performs necessary calculates based on OriginAlignment
            values.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.Origin.Calc(AgateLib.DisplayLib.OriginAlignment,AgateLib.Geometry.Size)">
            <summary>
            Returns a point which should be subtracted from the interpreted
            point to get the top-left position.
            </summary>
            <param name="origin"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.Origin.CalcF(AgateLib.DisplayLib.OriginAlignment,AgateLib.Geometry.Size)">
            <summary>
            Returns a point which should be subtracted from the interpreted
            point to get the top-left position.
            </summary>
            <param name="origin"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.Origin.CalcF(AgateLib.DisplayLib.OriginAlignment,AgateLib.Geometry.SizeF)">
            <summary>
            Returns a point which should be subtracted from the interpreted
            point to get the top-left position.
            </summary>
            <param name="origin"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.Origin.Calc(AgateLib.DisplayLib.OriginAlignment,AgateLib.Geometry.Size,System.Int32@,System.Int32@)">
            <summary>
            Returns a point which should be subtracted from the interpreted
            point to get the top-left position.
            </summary>
            <param name="origin"></param>
            <param name="size"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.Origin.CalcRect(AgateLib.DisplayLib.OriginAlignment,AgateLib.Geometry.Rectangle)">
            <summary>
            Modifies the rectangle by taking its Location and converting it
            using Calc so that the rectangle outlines the actual destination.
            </summary>
            <param name="origin"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.Origin.CalcRect(AgateLib.DisplayLib.OriginAlignment,AgateLib.Geometry.Rectangle,AgateLib.Geometry.Size)">
            <summary>
            Modifies the rectangle by taking its Location and converting it
            using Calc so that the rectangle outlines the actual destination.
            </summary>
            <param name="origin"></param>
            <param name="rect"></param>
            <param name="effectiveSize"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.AgateApplication">
            <summary>
            Application framework for a game.  Using AgateApplication can simplify the application 
            source code and start up.
            </summary>
            <example>
            <code>
            using AgateLib;
            
            namespace MyApplication
            {
            	class MyApp : AgateApplication
            	{
            		public static void Main(string[] args)
            		{
            			new MyApp().Run(args);
            		}
            		
            		protected override void Initialize()
            		{
            			// do any needed initialization, loading of surfaces, etc. here.
            		}
            		protected override void Update(double time_ms)
            		{
            			// update game logic here.
            		}
            		protected override void Render()
            		{
            			// render game here. 
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:AgateLib.AgateApplication.Run">
            <summary>
            Runs the application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.AgateApplication.Run(System.String[])">
            <summary>
            Runs the application.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.AgateApplication.Initialize">
            <summary>
            Override Initialize() to do any needed initialization for your application,
            such as creating <see cref="T:AgateLib.DisplayLib.Surface">Surface</see> objects.
            </summary>
        </member>
        <member name="M:AgateLib.AgateApplication.Update(System.Double)">
            <summary>
            Override this method to update your game logic.
            </summary>
            <param name="time_ms">The amount of time that has passed since the last
            update, in milliseconds.</param>
        </member>
        <member name="M:AgateLib.AgateApplication.Render">
            <summary>
            Override this method to render your game.
             Do not call Display.BeginFrame or Display.EndFrame.
            </summary>
            <remarks>Do not call Display.BeginFrame or Display.EndFrame or change
            render targets in this method.</remarks>
        </member>
        <member name="M:AgateLib.AgateApplication.UpdateSplashScreen(System.Double)">
            <summary>
            Override this method to update the logic for a custom splash screen,
            if there are any animations.
            Return false to cancel the splash screen and move on.
            </summary>
            <param name="time_ms"></param>
        </member>
        <member name="M:AgateLib.AgateApplication.RenderSplashScreen">
            <summary>
            Override this method to provide a custom splash screen.  This method
            is called before the Initialize method is called.
            </summary>
            <param name="time_ms"></param>
        </member>
        <member name="M:AgateLib.AgateApplication.GetAppInitParameters">
            <summary>
            Gets the initialization parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.AgateApplication.Quit">
            <summary>
            Closes the main window.
            </summary>
        </member>
        <member name="P:AgateLib.AgateApplication.ApplicationTitle">
            <summary>
            Override this to set the title of the window which is created.
            </summary>
        </member>
        <member name="P:AgateLib.AgateApplication.MainWindow">
            <summary>
            Gets the main display window.
            </summary>
        </member>
        <member name="T:AgateLib.InputLib.JoystickInput">
            <summary>
            Static class which contains a list of the joystick input devices attached
            to the computer.
            </summary>
        </member>
        <member name="M:AgateLib.InputLib.JoystickInput.Initialize(AgateLib.Drivers.InputTypeID)">
            <summary>
            Initializes the input system by instantiating the driver with the given
            InputTypeID.  The input driver must be registered with the Registrar
            class.
            </summary>
            <param name="inputType"></param>
        </member>
        <member name="T:AgateLib.ImplementationBase.DisplayImpl">
            <summary>
            Abstract base class for implementing the Display object.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.OnRenderTargetChange(AgateLib.DisplayLib.IRenderTarget)">
            <summary>
            Event raised when the current render target is changed.
            </summary>
            <param name="oldRenderTarget"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.OnRenderTargetResize">
            <summary>
            Event raised when the render target is resized.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.CreateDisplayWindow(AgateLib.DisplayLib.CreateWindowParams)">
            <summary>
            Creates a DisplayWindowImpl derived object.
            </summary>
            <param name="windowParams"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.CreateSurface(AgateLib.IFileProvider,System.String)">
            <summary>
            Creates a SurfaceImpl derived object.
            </summary>
            <param name="provider"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.CreateSurface(System.String)">
            <summary>
            Creates a SurfaceImpl derived object.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.CreateSurface(System.IO.Stream)">
            <summary>
            Creates a SurfaceImpl derived object from a stream containing 
            the file contents.
            </summary>
            <param name="fileStream"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.CreateSurface(AgateLib.Geometry.Size)">
            <summary>
            Creates a SurfaceImpl derived object.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.CreateSurface(System.Int32,System.Int32)">
            <summary>
            Creates a SurfaceImpl derived object.
            Forwards the call to CreateSurface(Size).
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.CreateFont(System.String,System.Single,AgateLib.DisplayLib.FontStyle)">
            <summary>
            Creates a FontSurfaceImpl derived object.
            </summary>
            <param name="fontFamily"></param>
            <param name="sizeInPoints"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.CreateFont(AgateLib.BitmapFont.BitmapFontOptions)">
            <summary>
            Creates a BitmapFontImpl object from the specified options.
            </summary>
            <param name="bitmapOptions"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.BeginFrame">
            <summary>
            Must be called at the start of each frame.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.EndFrame">
            <summary>
            A version of EndFrame must be called at the end of each frame.
            This version allows the caller to indicate to the implementation whether or
            not it is preferred to wait for the vertical blank to do the drawing.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.OnBeginFrame">
            <summary>
            Called by BeginFrame to let the driver know to do its setup stuff for starting
            the next render pass.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.OnEndFrame">
            <summary>
            Called by EndFrame to let the driver know that it's time to swap buffers or whatever
            is required to finish rendering the frame.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.CheckInFrame(System.String)">
            <summary>
            Checks to see whether or not we are currently inside a
            BeginFrame..EndFrame block, and throws an exception if
            we are not.  This is only meant to be called
            from functions which must operate between these calls.  
            </summary>
            <param name="functionName">The name of the calling function, 
            for debugging purposes.</param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.SetDeltaTime(System.Double)">
            <summary>
            Provides a means to set the value returned by DeltaTime.
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.SetClipRect(AgateLib.Geometry.Rectangle)">
            <summary>
            Set the current clipping rect.
            </summary>
            <param name="newClipRect"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.PushClipRect(AgateLib.Geometry.Rectangle)">
            <summary>
            Pushes a clip rect onto the clip rect stack.
            </summary>
            <param name="newClipRect"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.PopClipRect">
            <summary>
            Pops the clip rect and restores the previous clip rect.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.Clear">
            <summary>
            Clears the buffer to black.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.Clear(AgateLib.Geometry.Color)">
            <summary>
            Clears the buffer to the specified color.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.Clear(AgateLib.Geometry.Color,AgateLib.Geometry.Rectangle)">
            <summary>
            Clears a region of the buffer to the specified color.
            </summary>
            <param name="color"></param>
            <param name="dest"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.DrawEllipse(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Color)">
            <summary>
            Draws an ellipse by making a bunch of connected lines.
            
            Info for developers:
            The base class implements this by calculating points on the circumference of
            the ellipse, then making a call to DrawLines.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,AgateLib.Geometry.Color)">
            <summary>
            Draws a line between the two specified end-points.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.DrawLine(AgateLib.Geometry.Point,AgateLib.Geometry.Point,AgateLib.Geometry.Color)">
            <summary>
            Draws a line between the two specified endpoints.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.DrawLines(AgateLib.Geometry.Point[],AgateLib.Geometry.Color)">
            <summary>
            Draws a bunch of connected points.
            
            Info for developers:
            The base class implements this by making several calls to DrawLine.
            You may want to override this one to minimize state changes.
            </summary>
            <param name="pt"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.DrawLineSegments(AgateLib.Geometry.Point[],AgateLib.Geometry.Color)">
            <summary>
            Draws a bunch of unconnected lines.
            <para>
            Info for developers:
            pt should be an array whose length is even.</para>
            </summary>
            <param name="pt"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.DrawRect(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Color)">
            <summary>
            Draws the outline of a rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.DrawRect(AgateLib.Geometry.RectangleF,AgateLib.Geometry.Color)">
            <summary>
            Draws the outline of a rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.FillRect(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Color)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.FillRect(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Gradient)">
            <summary>
            Draws a filled rectangle with a gradient.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.FillRect(AgateLib.Geometry.RectangleF,AgateLib.Geometry.Color)">
            <summary>
            Draws a filled rectangle.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.FillRect(AgateLib.Geometry.RectangleF,AgateLib.Geometry.Gradient)">
            <summary>
            Draws a filled rectangle with a gradient.
            </summary>
            <param name="rect"></param>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.BuildPackedSurface(AgateLib.Geometry.Size,AgateLib.Utility.SurfacePacker.RectPacker{AgateLib.DisplayLib.Surface})">
            <summary>
            Builds a surface of the specified size, using the information
            generated by the SurfacePacker.
            </summary>
            <param name="size"></param>
            <param name="packedRects"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.EnumScreenModes">
            <summary>
            Enumerates a list of screen modes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.FlushDrawBuffer">
            <summary>
            Flushes the 2D draw buffer, if applicable.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.SetOrthoProjection(AgateLib.Geometry.Rectangle)">
            <summary>
            Sets the boundary coordinates of the window.
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.DoLighting(AgateLib.DisplayLib.LightManager)">
            <summary>
            Gets all the light settings from the LightManager.
            </summary>
            <param name="lights"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.ProcessEvents">
            <summary>
            Processes pending events.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.SavePixelBuffer(AgateLib.DisplayLib.PixelBuffer,System.String,AgateLib.DisplayLib.ImageFileFormat)">
            <summary>
            
            </summary>
            <param name="pixelBuffer"></param>
            <param name="filename"></param>
            <param name="format"></param>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.GetPlatformServices">
            <summary>
            Override to return an object implementing IPlatformServices.  This object will provide
            basic services that are not available in the .NET platform (high precision timing, etc.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.ShowCursor">
            <summary>
            Makes the OS mouse pointer visible.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.DisplayImpl.HideCursor">
            <summary>
            Hides the OS mouse pointer.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayImpl.RenderTarget">
            <summary>
            Gets or sets the current render target.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayImpl.DefaultSurfaceFormat">
            <summary>
            The pixelformat that created surfaces should use.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayImpl.AlphaThreshold">
            <summary>
            Gets or sets the threshold value for alpha transparency below which
            pixels are considered completely transparent, and may not be drawn.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayImpl.DeltaTime">
            <summary>
            Gets the amount of time in milliseconds that has passed between this frame
            and the last one.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayImpl.FramesPerSecond">
            <summary>
            Gets the framerate
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayImpl.MaxSurfaceSize">
            <summary>
            Returns the maximum size a surface object can be.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayImpl.VSync">
            <summary>
            Gets or sets VSync flag.
            There is no need to call base.VSync if overriding this member.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayImpl.Caps">
            <summary>
            Gets the capabilities of the Display object.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.DisplayImpl.IsAppIdle">
            <summary>
            Returns true if the application is idle and processing of events can be skipped.
            Base method just returns false to force processing of events at every frame.
            </summary>
        </member>
        <member name="T:AgateLib.Drivers.DisplayTypeID">
            <summary>
            List of identifiers of known or planned display drivers.
            </summary>
            <remarks>
            This really seems like an overengineered piece of garbage
            designed just to use constraints in generic collections.
            I'd get rid of the whole thing and replace it with enums, but
            it's currently working, and I don't have any need to change it.
            But if the need ever arises, I will redo this whole thing.
            </remarks>
        </member>
        <member name="F:AgateLib.Drivers.DisplayTypeID.AutoSelect">
            <summary>
            Specifies that the Registrar should automatically select the best available
            display driver for the system.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.DisplayTypeID.Reference">
            <summary>
            The reference driver is implemented using System.Drawing.  This is useful for
            debugging the development of a new driver, as it should behave exactly like the
            reference driver (but hopefully be much faster).
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.DisplayTypeID.Direct3D_MDX_1_1">
            <summary>
            Driver Implementation using Managed DirectX 1.1.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.DisplayTypeID.Direct3D_XNA">
            <summary>
            Driver Implementation using XNA Studio.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.DisplayTypeID.OpenGL">
            <summary>
            Driver implememtation using OpenGL, with some platform-independent library for window
            creation.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.DisplayTypeID.SDL">
            <summary>
            Driver implementation using SDL.  SDL.NET does not support many of the basic features
            of this library (notably);}} rotation of images) so is not considered an adequate driver
            for general purpose use.
            </summary>
        </member>
        <member name="T:AgateLib.Drivers.AudioTypeID">
            <summary>
            List of identifiers of known or planned audio drivers.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.AudioTypeID.AutoSelect">
            <summary>
            Specifies that the Registrar should automatically select the best available
            audio driver for the system.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.AudioTypeID.Silent">
            <summary>
            A driver which does nothing.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.AudioTypeID.DirectSound">
            <summary>
            A DirectSound implementation.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.AudioTypeID.XAct">
            <summary>
            Implementation using XNA Studio
            (what will this be called), anyway?)
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.AudioTypeID.OpenAL">
            <summary>
            Implementation using the cross-platform OpenAL library.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.AudioTypeID.FMod">
            <summary>
            Implementation using the cross-platform FMod library.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.AudioTypeID.SDL">
            <summary>
            Implementation using the SDL library.
            </summary>
        </member>
        <member name="T:AgateLib.Drivers.InputTypeID">
            <summary>
            List of identifiers of known or planned input drivers.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.InputTypeID.AutoSelect">
            <summary>
            Specifies that the Registrar should automatically select the best available
            audio driver for the system.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.InputTypeID.Silent">
            <summary>
            A driver with no joysticks.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.InputTypeID.DirectInput">
            <summary>
            A DirectInput implementation.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.InputTypeID.XInput">
            <summary>
            Implementation using the XNA framework.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.InputTypeID.SDL">
            <summary>
            Driver implementation using SDL.  
            </summary>
        </member>
        <member name="T:AgateLib.Drivers.DesktopTypeID">
            <summary>
            List of identifiers for known or planned desktop drivers.
            </summary>
        </member>
        <member name="F:AgateLib.Drivers.DesktopTypeID.WinForms">
            <summary>
            Desktop driver which uses System.Windows.Forms to interact
            with the user.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.FileProviderList">
            <summary>
            Contains a list of IFileProvider objects that are used to search for
            and open files.
            </summary>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.GetProvider(System.String)">
            <summary>
            Returns the IFileProvider object which would return the specified
            file when OpenRead is called.  Throws a FileNotFoundException if the file is not available.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.OpenRead(System.String)">
            <summary>
            Opens a specified file by searching backwards through the list of 
            providers until a matching filename is found.  A FileNotFoundException
            is thrown if the file does not exist.
            </summary>
            <param name="filename">The filename to search for.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.GetAllFiles(System.String)">
            <summary>
            Returns all filenames matching the specified filter in 
            all file providers.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.GetAllFiles">
            <summary>
            Returns all filenames in all file providers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.FileExists(System.String)">
            <summary>
            Returns true if the specified file exists in a file provider.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.AddPath(System.String)">
            <summary>
            Adds a path in the filesystem to the list of locations to search when opening a file.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.IndexOf(AgateLib.IFileProvider)">
            <summary>
            Returns the index of the specified IFileProvider.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.Insert(System.Int32,AgateLib.IFileProvider)">
            <summary>
            Insers an IFileProvider into the list.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.RemoveAt(System.Int32)">
            <summary>
            Removes an IFileProvider from the list.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.Add(AgateLib.IFileProvider)">
            <summary>
            Adds an IFileProvider to the list.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.Contains(AgateLib.IFileProvider)">
            <summary>
            Returns true if the list contains the specified IFileProvider.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.Remove(AgateLib.IFileProvider)">
            <summary>
            Removes an IFileProvider from the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.FileProviderList.GetEnumerator">
            <summary>
            Enumerates items.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Utility.FileProviderList.Item(System.Int32)">
            <summary>
            Gets or sets the IFileProvider at the specified location.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Utility.FileProviderList.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:AgateLib.Utility.FileProviderList.IsReadOnly">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="T:AgateLib.Serialization.Xle.IXleSerializable">
            <summary>
            Interface that must be implemented in order to make an object serializable with
            the XleSerializer.
            </summary>
        </member>
        <member name="M:AgateLib.Serialization.Xle.IXleSerializable.WriteData(AgateLib.Serialization.Xle.XleSerializationInfo)">
            <summary>
            This method is called when an object is to be serialized.  The object should
            call the Write() methods on the info object in order to write enough of its data
            so that it can be deserialized.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.IXleSerializable.ReadData(AgateLib.Serialization.Xle.XleSerializationInfo)">
            <summary>
            This method is called when an object is to be deserialized.  The object should
            call the Read*() methods on the info object to reconstruct its internal structure.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter">
            <summary>
            The <see cref="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter"/> class implements a custom XmlFormatter
            which uses the <see cref="T:System.Runtime.Serialization.ISerializable"/> interace. 
            The class implements the <see cref="T:System.Runtime.Serialization.IFormatter"/> interface to serialize
            and deserialize the object to an XML representation.
            </summary>
            <remarks>
            The class calls the methods of ISerializable on the object if the object
            supports this interface. If not, the class will use Reflection to examine the public
            fields and properties of the object.<br/>
            When adding objects that inherit or implement IList, ICollection, the 
            elements of the list should be passed as an array to <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </remarks>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.context">
            <summary>
            The context in which this formatter performs his work.
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.binder">
            <summary>
            The serialization binder used to map object types to names.
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.selector">
            <summary>
            The surrogate selector to select the object that will perform the serialization.
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.deserializationCallbackList">
            <summary>
            Contains a list with objects that implement the IDeserializationCallback interface.
            </summary>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.#ctor">
            <summary>
            Default constructor does nothing.
            </summary>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the passed object to the passed stream.
            </summary>
            <param name="serializationStream">The stream to serialize to.</param>
            <param name="objectToSerialize">The object to serialize.</param>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes an object from the passed stream.
            </summary>
            <param name="serializationStream">The stream to deserialize the object from.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.Serialize(System.Xml.XmlTextWriter,System.Runtime.Serialization.FormatterConverter,System.String,System.Object,System.Type)">
            <summary>
            Serializes the object using the passed XmlWriter.
            </summary>
            <param name="writer">The XmlWriter to write to.</param>
            <param name="converter">The converter to use when converting simple types.</param>
            <param name="elementName">The name of the element in the Xml.</param>
            <param name="objectToSerialize">The object to serialize.</param>
            <param name="objectType">The type of the object.</param>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.SerializeArray(System.Xml.XmlTextWriter,System.Runtime.Serialization.FormatterConverter,System.Array,System.Type)">
            <summary>
            Serializes an array.  This does not write start or end tags, that is the responsibility of the caller.
            </summary>
            <param name="writer"></param>
            <param name="converter"></param>
            <param name="array"></param>
            <param name="enumeratedType"></param>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.WriteAttributes(System.Xml.XmlTextWriter,System.Object)">
            <summary>
            Writes the Type and includeArrayAttribute attributes to the element
            </summary>
            <param name="writer">The XmlWriter to write to.</param>
            <param name="theObject">The object whose attributes are to be written.</param>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.WriteValueElement(System.Xml.XmlTextWriter,AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry)">
            <summary>
            Writes a simple element to the writer. The name of the element is the name of the object type.
            </summary>
            <param name="writer">The XmlWriter to write to.</param>
            <param name="entry">The entry to write to the element.</param>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.WriteValueElement(System.String,System.Xml.XmlTextWriter,AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry)">
            <summary>
            Writes a simple element to the writer. 
            </summary>
            <param name="tagName">The name of the tag to write.</param>
            <param name="writer">The XmlWriter to write to.</param>
            <param name="entry">The entry to write to the element.</param>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.GetMemberInfo(System.Object,System.Type,System.Runtime.Serialization.FormatterConverter)">
            <summary>
            Gets all the serializable members of an object and return an enumarable collection.
            </summary>
            <param name="objectToSerialize">The object to get the members from.</param>
            <param name="objectToSerializeType">The type of the object.</param>
            <param name="converter">The converter to use when converting simple types.</param>
            <returns>An IEnumerable list of <see cref="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry"/> entries.</returns>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CanSerialize(System.Reflection.MemberInfo)">
            <summary>
            Determines if the passed member is public and writable.
            </summary>
            <param name="member">The member to investigate.</param>
            <returns>True if public and writable, False if not.</returns>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.GetMemberValue(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Get the value of a member.
            </summary>
            <param name="item">The item to get the member from.</param>
            <param name="member">The member to get the value from.</param>
            <returns>The value of the member.</returns>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an object from the given stream for the given type.
            </summary>
            <param name="serializationStream">The stream to read the object from.</param>
            <param name="objectType">The type of object to create.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.InitializeObject(System.Xml.XmlTextReader,System.Runtime.Serialization.FormatterConverter,System.Type)">
            <summary>
            Reads an object from the XML and initializes the object.
            </summary>
            <param name="reader">The XmlReader to read from.</param>
            <param name="converter">The converter used to parse the values from the XML.</param>
            <param name="objectType">The type of the object to create.</param>
            <returns>The recreated object.</returns>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.PopulateSerializationInfo(System.Xml.XmlTextReader,System.Runtime.Serialization.FormatterConverter,System.Type,System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Populates the serialized members in the SerializationInfo.
            </summary>
            <param name="reader">The XmlReader to read from.</param>
            <param name="converter">The converter used to parse the values from the XML.</param>
            <param name="actualType">The type of the object to create.</param>
            <param name="info">The object to populate.</param>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.DetermineValue(System.Xml.XmlTextReader,System.Runtime.Serialization.FormatterConverter,System.Type)">
            <summary>
            Determines the value of an object.
            </summary>
            <param name="reader">The XML reader the read from.</param>
            <param name="converter">The converter used to parse the values from the XML.</param>
            <param name="objectType">The type of the object to create.</param>
            <returns>The value of the object.</returns>
        </member>
        <member name="P:AgateLib.Serialization.Formatters.Xml.XmlFormatter.Binder">
            <summary>
            Gets or sets the type binder.
            </summary>
        </member>
        <member name="P:AgateLib.Serialization.Formatters.Xml.XmlFormatter.Context">
            <summary>
            Gets or sets the StreamingContext.
            </summary>
        </member>
        <member name="P:AgateLib.Serialization.Formatters.Xml.XmlFormatter.SurrogateSelector">
            <summary>
            Gets or sets the SurrogateSelector.
            </summary>
        </member>
        <member name="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CollectionType">
            <summary>
            Enum which indicates which type of collection is being serialized.
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CollectionType.None">
            <summary>
            Non-collection type
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CollectionType.ArrayList">
            <summary>
            System.Collections.ArrayList type
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CollectionType.List">
            <summary>
            System.Collections.Generic.List&lt;T&gt; type
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CollectionType.Dictionary">
            <summary>
            System.Collections.Generic.Dictionary&lt;Tkey,Tvalue&gt; type
            </summary>
        </member>
        <member name="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry">
            <summary>
            The <see cref="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry"/> mimics the <see cref="T:System.Runtime.Serialization.SerializationEntry"/> class
            to make it possible to create our own entries. The class acts as a placeholder for a type,
            it's name and it's value. This class is used in the <see cref="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter"/> class to 
            serialize objects.
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry._reflectedType">
            <summary>
            The type in which this member is declared in.
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry._name">
            <summary>
            The name of the object.
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry._objectType">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry._value">
            <summary>
            The value of the object.
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry._collectionType">
            <summary>
            Indicates whether the object is a list.
            </summary>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry.ToString">
            <summary>
            Converts the custom serialization entry to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry.#ctor(System.String,System.Type)">
            <summary>
            Constructor to create a <see cref="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry"/> without a value. 
            Value is set to null.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="objectType">The System.Type of the object.</param>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Constructor to create a <see cref="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry"/>. 
            </summary>
            <param name="name">The name of the object.</param>
            <param name="objectType">The System.Type of the object.</param>
            <param name="value">The value of the object.</param>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry.#ctor(System.String,System.Type,System.Object,System.Type)">
            <summary>
            Constructor to create a <see cref="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry"/>. 
            </summary>
            <param name="name">The name of the object.</param>
            <param name="objectType">The System.Type of the object.</param>
            <param name="value">The value of the object.</param>
            <param name="reflectedType">The reflected type of the object.</param>
        </member>
        <member name="P:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry.Name">
            <summary>
            Gets the name of the object.
            </summary>
        </member>
        <member name="P:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry.ObjectType">
            <summary>
            Gets the System.Type of the object.
            </summary>
        </member>
        <member name="P:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry.ReflectedType">
            <summary>
            Gets the System.Type of the object this is reflected from.
            </summary>
        </member>
        <member name="P:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry.Value">
            <summary>
            Gets or sets the value contained in the object.
            </summary>
        </member>
        <member name="P:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomSerializationEntry.CollectionType">
            <summary>
            Gets or sets whether the object is a list type.
            </summary>
        </member>
        <member name="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomBinder">
            <summary>
            The <see cref="T:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomBinder"/> class performs the mapping to types
            declared in this assembly. It accumulates all types defined in the assembly
            this class is defined in. Optionally, an assembly can be passed as an argument.
            </summary>
        </member>
        <member name="F:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomBinder._typeList">
            <summary>
            The list that holds the types and type names contained in the assembly.
            </summary>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomBinder.#cctor">
            <summary>
            Static constructor to load a list of types contained in the assembly
            only once (during the first call).
            </summary>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomBinder.LoadTypes(System.Reflection.Assembly)">
            <summary>
            Loads the types from the passed assembly in the list. The key of the list
            is the simple name of the type.
            </summary>
            <param name="assembly"></param>
            <remarks>
            Because the list uses the simple name of the type, it should be unique within the 
            assembly. Otherwise, a <see cref="T:System.ArgumentException"/> is thrown.
            </remarks>
            <returns>A Dictionary&lt;string, Type&gt; object.</returns>
        </member>
        <member name="M:AgateLib.Serialization.Formatters.Xml.XmlFormatter.CustomBinder.BindToType(System.String,System.String)">
            <summary>
            Binds the passed typename to the type contained in the dictionary.
            </summary>
            <param name="assemblyName">The assembly to load the type from.</param>
            <param name="typeName">The simple name of the type.</param>
            <remarks>
            When the passed type is not found in the assembly, the method will try 
            to get the Type using System.GetType. If still not found, the method will
            return typeof (Object).
            </remarks>
            <returns>The Type reference of the type name.</returns>
        </member>
        <member name="T:AgateLib.Resources.DisplayWindowResource">
            <summary>
            The DisplayWindowResource represents a display window.
            XML Attributes:<br/> 
              string name, Size size, Size minimum_size, Size maximum_size,
              bool allow_resize, bool full_screen, int bpp.  Title text is stored in the body of the XML element.
            <para>A zero or missing value for any width/height means it doesn't apply.
            </para>
            </summary>
            <remarks>
            Not all attributes are used at the moment.  minimum_size and maximum_size can be specified and
            will be preserved if the resource file is loaded and saved, but they are not used in the construction
            of the DisplayWindow.
            </remarks>
        </member>
        <member name="M:AgateLib.Resources.DisplayWindowResource.Clone">
            <summary>
            Clones the DisplayWindowResource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Resources.DisplayWindowResource.#ctor(System.String)">
            <summary>
            Constructs a new DisplayWindowResource.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:AgateLib.Resources.DisplayWindowResource.Size">
            <summary>
            Gets or sets the preferred size of the DisplayWindow when it is created.
            For windowed systems, this will specify the size, but for full-screen systems this
            will specify the starting point for searching for a full-screen resolution.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.DisplayWindowResource.MinimumSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AgateLib.Resources.DisplayWindowResource.MaximumSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AgateLib.Resources.DisplayWindowResource.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:AgateLib.Resources.DisplayWindowResource.AllowResize">
            <summary>
            
            </summary>
        </member>
        <member name="P:AgateLib.Resources.DisplayWindowResource.FullScreen">
            <summary>
            
            </summary>
        </member>
        <member name="P:AgateLib.Resources.DisplayWindowResource.Bpp">
            <summary>
            
            </summary>
        </member>
        <member name="T:AgateLib.Resources.AgateResourceCollection">
            <summary>
            Class which wraps an XML based resource file.  This class provides methods for adding
            and extracting resources.
            </summary>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceCollection.#ctor">
            <summary>
            Constructs a new AgateResourceCollection object.
            </summary>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceCollection.Add(AgateLib.Resources.AgateResource)">
            <summary>
            Adds a resource to this group.  An exception is thrown if an item with the same name 
            already exists in the group.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceCollection.AddStringsTable(AgateLib.Resources.StringTable)">
            <summary>
            Adds a strings
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceCollection.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceCollection.Remove(System.String)">
            <summary>
            Removes a resource.
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceCollection.TryGetValue(System.String,AgateLib.Resources.AgateResource@)">
            <summary>
            Tries to find the resource in the collection.  False is returned if 
            the resource does not exist.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceCollection.Contains(AgateLib.Resources.AgateResource)">
            <summary>
            Gets whether the item is part of the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceCollection.Remove(AgateLib.Resources.AgateResource)">
            <summary>
            Removes a resource from the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Resources.AgateResourceCollection.Sprites">
            <summary>
            Enumerates through the SpriteResources contained in this group of resources.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.AgateResourceCollection.Surfaces">
            <summary>
            Enumerates through the SurfaceResources contained in this group of resources.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.AgateResourceCollection.DisplayWindows">
            <summary>
            Enumerates through the DisplayWindowResources contained in this group of resources.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.AgateResourceCollection.BitmapFonts">
            <summary>
            Enumerates through the BitmapFontResources contained in this group of resources.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.AgateResourceCollection.Strings">
            <summary>
            Gets the StringTable for this langauge.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.AgateResourceCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:AgateLib.Resources.AgateResourceCollection.Keys">
            <summary>
            Returns a collection of all the resource names.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.AgateResourceCollection.Values">
            <summary>
            Gets a collection of all the AgateResource objects in the collection.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.AgateResourceCollection.Item(System.String)">
            <summary>
            Gets or sets the resource with the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.InputLib.InputEventHandler">
            <summary>
            Event handler event type.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:AgateLib.InputLib.Keyboard">
            <summary>
            Static class which represents Keyboard input.
            </summary>
        </member>
        <member name="M:AgateLib.InputLib.Keyboard.ReleaseAllKeys">
            <summary>
            Resets all keys to being in the up state (not pushed).
            Does generate KeyUp events.
            
            This also makes it so any keys which were depressed must be released
            before KeyDown events are raised again.
            </summary>
        </member>
        <member name="M:AgateLib.InputLib.Keyboard.ReleaseAllKeys(System.Boolean)">
            <summary>
            Resets all keys to being in the up state (not pushed).
            Does generate KeyUp events.
            <para>
            This can also make it so any keys which were depressed must be released
            before KeyDown events are raised again.
            </para>
            </summary>
            <param name="waitForKeyUp">If true, then keys currently depressed will 
            not generate KeyDown events until they are released.</param>
        </member>
        <member name="M:AgateLib.InputLib.Keyboard.ReleaseKey(AgateLib.InputLib.KeyCode)">
            <summary>
            Resets a particular key to being in the up state (not pushed).  
            Generates a KeyUp event for that key.
            <para>
            This also makes it so that the key must be physically depressed by the user
            before it will register a KeyDown event again.  If it is already depressed,
            it must be released first.
            </para>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AgateLib.InputLib.Keyboard.ReleaseKey(AgateLib.InputLib.KeyCode,System.Boolean)">
            <summary>
            Resets a particular key to being in the up state (not pushed).  
            Generates a KeyUp event for that key.
            </summary>
            <param name="key">The key to be released.</param>
            <param name="waitForKeyUp">If true, then keys currently depressed will 
            not generate KeyDown events until they are released.</param>
        </member>
        <member name="M:AgateLib.InputLib.Keyboard.GetKeyString(AgateLib.InputLib.KeyCode,AgateLib.InputLib.KeyModifiers)">
            <summary>
            Creates a string from the specified KeyCode and KeyModifiers.
            Unfortunately this is tied to the US English keyboard, so it needs a better solution.
            </summary>
            <param name="keyID"></param>
            <param name="mods"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.InputLib.Keyboard.Keys">
            <summary>
            Gets an object representing the state of all keys on the keyboard.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Keyboard.AnyKeyPressed">
            <summary>
            Checks to see if the user pressed the "Any" key.
            </summary>
        </member>
        <member name="E:AgateLib.InputLib.Keyboard.KeyDown">
            <summary>
            Event which occurs when a key is pressed.
            </summary>
        </member>
        <member name="E:AgateLib.InputLib.Keyboard.KeyUp">
            <summary>
            Event which occurs when a key is released.
            </summary>
        </member>
        <member name="T:AgateLib.InputLib.Keyboard.KeyState">
            <summary>
            Class which represents the state of all keys on the keyboard.
            </summary>
        </member>
        <member name="M:AgateLib.InputLib.Keyboard.KeyState.ReleaseKey(AgateLib.InputLib.KeyCode,System.Boolean)">
            <summary>
            Clears the key-down status of a key, and generates a KeyUp event.  
            If waitKeyUp is true, the key is marked so that KeydDown events will not be generated until 
            it has been physically released by the user.
            </summary>
            <param name="id">KeyCode identifier of key to release.</param>
            <param name="waitKeyUp">Boolean flag indicating whether or not
            keydown events should be suppressed until the key is physically released.</param>
        </member>
        <member name="M:AgateLib.InputLib.Keyboard.KeyState.ReleaseAllKeys(System.Boolean)">
            <summary>
            Resets all keys to being in the up state (not pushed).
            Does generate KeyUp events.
            
            This also makes it so any keys which were depressed must be released
            before KeyDown events are raised again.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Keyboard.KeyState.Item(AgateLib.InputLib.KeyCode)">
            <summary>
            Gets or sets the state of the given key.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.Geometry.Rectangle">
            <summary>
            Replacement for System.Drawing.Rectangle structure.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a rectangle.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.#ctor(AgateLib.Geometry.Point,AgateLib.Geometry.Size)">
            <summary>
            Constructs a rectangle.
            </summary>
            <param name="pt"></param>
            <param name="sz"></param>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Static method which returns a rectangle with specified left, top, right and bottom.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Returns true if the rectangle contains the specified point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.Contains(AgateLib.Geometry.Point)">
            <summary>
            Returns true if the rectangle contains the specified point.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.Contains(AgateLib.Geometry.Rectangle)">
            <summary>
            Returns true if the rectangle entirely contains the specified rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.IntersectsWith(AgateLib.Geometry.Rectangle)">
            <summary>
            Returns true if this intersects another rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.op_Equality(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Rectangle)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.op_Inequality(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Rectangle)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.ToString">
            <summary>
            Creates a string representing this rectangle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.Equals(AgateLib.Geometry.Rectangle)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:AgateLib.Geometry.Rectangle.Empty">
            <summary>
            Empty rectangle
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.Intersect(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Rectangle)">
            <summary>
            Static method returning the intersection of two rectangles.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.Ceiling(AgateLib.Geometry.RectangleF)">
            <summary>
            Rounds the coordinates in the rectangle up.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.Union(AgateLib.Geometry.Rectangle,AgateLib.Geometry.Rectangle)">
            <summary>
            Creates a new rectangle which contains all the area of the two passed in rectangles.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.Parse(System.String)">
            <summary>
            Parses a string for a rectangle.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Rectangle.TryParse(System.String,AgateLib.Geometry.Rectangle@)">
            <summary>
            Parses a string for a rectangle.
            </summary>
            <param name="text"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Geometry.Rectangle.X">
            <summary>
            X value
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Rectangle.Y">
            <summary>
            Y value
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Rectangle.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Rectangle.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Rectangle.Bottom">
            <summary>
            Gets bottom.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Rectangle.Left">
            <summary>
            Gets left.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Rectangle.Top">
            <summary>
            Gets top.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Rectangle.Right">
            <summary>
            Gets right.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Rectangle.Location">
            <summary>
            Gets or sets top-left point.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Rectangle.Size">
            <summary>
            Gets or sets size.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Rectangle.IsEmpty">
            <summary>
            True if this is (0,0,0,0).
            </summary>
        </member>
        <member name="T:AgateLib.Geometry.Color">
            <summary>
            Replacement for System.Drawing.Color structure.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Color.FromArgb(System.Int32,AgateLib.Geometry.Color)">
            <summary>
            Creates a Color structure from the given color and alpha value.
            </summary>
            <param name="a"></param>
            <param name="baseColor"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a color structure from r, g, b values.
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a color structure from a, r, g, b values.
            </summary>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.FromArgb(System.Int32)">
            <summary>
            Creates a color structure from a 32-bit integer, in
            the format 0xAARRGGBB.
            </summary>
            <param name="argbvalue"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.FromArgb(System.String)">
            <summary>
            Converts a string to an AgateLib.Geometry.Color structure.
            </summary>
            <param name="str">The string to convert.  It must be in one of the following formats
            RRGGBB, AARRGGBB, 0xRRGGBB, 0xAARRGGBB where AA, RR, GG, BB are each a hexidecimal
            number (such as "ff" or "8B").</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.ByteValueFromHex(System.String)">
            <summary>
            Converts a string like "FF" to a byte value.  Throws an exception if the
            string does not convert to a value which fits into a byte.
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.ToString">
            <summary>
            Returns a string representing this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.GetHashCode">
            <summary>
            Returns a unique hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.Equals(System.Object)">
            <summary>
            Checks to see if this is equal to another object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.Equals(AgateLib.Geometry.Color)">
            <summary>
            Checks to see if this is equal to another Color structure.
            </summary>
            <param name="clr"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.op_Equality(AgateLib.Geometry.Color,AgateLib.Geometry.Color)">
            <summary>
            Compares two colors to see if they are equal.
            </summary>
            <param name="clra"></param>
            <param name="clrb"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.op_Inequality(AgateLib.Geometry.Color,AgateLib.Geometry.Color)">
            <summary>
            Compares two colors to see if they are not equal.
            </summary>
            <param name="clra"></param>
            <param name="clrb"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.Color.ToArgb">
            <summary>
            Converts this Color structure to a 32-bit integer in the format
            0xAARRGGBB.  This is suitable for input to Color.FromArgb to 
            reproduce the color structure.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Geometry.Color.AliceBlue">
            <summary>
            Color AliceBlue.  0xf0f8ff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.AntiqueWhite">
            <summary>
            Color AntiqueWhite.  0xfaebd7
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Aqua">
            <summary>
            Color Aqua.  0x0ffff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Aquamarine">
            <summary>
            Color Aquamarine.  0x7fffd4
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Azure">
            <summary>
            Color Azure.  0xf0ffff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Beige">
            <summary>
            Color Beige.  0xf5f5dc
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Bisque">
            <summary>
            Color Bisque.  0xffe4c4
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Black">
            <summary>
            Color Black.  0x000
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.BlanchedAlmond">
            <summary>
            Color BlanchedAlmond.  0xffebcd
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Blue">
            <summary>
            Color Blue.  0x00ff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.BlueViolet">
            <summary>
            Color BlueViolet.  0x8a2be2
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Brown">
            <summary>
            Color Brown.  0xa52a2a
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.BurlyWood">
            <summary>
            Color BurlyWood.  0xdeb887
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.CadetBlue">
            <summary>
            Color CadetBlue.  0x5f9ea0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Chartreuse">
            <summary>
            Color Chartreuse.  0x7fff0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Chocolate">
            <summary>
            Color Chocolate.  0xd2691e
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Coral">
            <summary>
            Color Coral.  0xff7f50
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.CornflowerBlue">
            <summary>
            Color CornflowerBlue.  0x6495ed
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Cornsilk">
            <summary>
            Color Cornsilk.  0xfff8dc
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Crimson">
            <summary>
            Color Crimson.  0xdc143c
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Cyan">
            <summary>
            Color Cyan.  0x0ffff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkBlue">
            <summary>
            Color DarkBlue.  0x008b
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkCyan">
            <summary>
            Color DarkCyan.  0x08b8b
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkGoldenrod">
            <summary>
            Color DarkGoldenrod.  0xb886b
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkGray">
            <summary>
            Color DarkGray.  0xa9a9a9
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkGreen">
            <summary>
            Color DarkGreen.  0x0640
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkKhaki">
            <summary>
            Color DarkKhaki.  0xbdb76b
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkMagenta">
            <summary>
            Color DarkMagenta.  0x8b08b
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkOliveGreen">
            <summary>
            Color DarkOliveGreen.  0x556b2f
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkOrange">
            <summary>
            Color DarkOrange.  0xff8c0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkOrchid">
            <summary>
            Color DarkOrchid.  0x9932cc
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkRed">
            <summary>
            Color DarkRed.  0x8b00
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkSalmon">
            <summary>
            Color DarkSalmon.  0xe9967a
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkSeaGreen">
            <summary>
            Color DarkSeaGreen.  0x8fbc8b
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkSlateBlue">
            <summary>
            Color DarkSlateBlue.  0x483d8b
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkSlateGray">
            <summary>
            Color DarkSlateGray.  0x2f4f4f
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkTurquoise">
            <summary>
            Color DarkTurquoise.  0x0ced1
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DarkViolet">
            <summary>
            Color DarkViolet.  0x940d3
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DeepPink">
            <summary>
            Color DeepPink.  0xff1493
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DeepSkyBlue">
            <summary>
            Color DeepSkyBlue.  0x0bfff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DimGray">
            <summary>
            Color DimGray.  0x696969
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.DodgerBlue">
            <summary>
            Color DodgerBlue.  0x1e90ff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Firebrick">
            <summary>
            Color Firebrick.  0xb22222
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.FloralWhite">
            <summary>
            Color FloralWhite.  0xfffaf0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.ForestGreen">
            <summary>
            Color ForestGreen.  0x228b22
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Fuchsia">
            <summary>
            Color Fuchsia.  0xff0ff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Gainsboro">
            <summary>
            Color Gainsboro.  0xdcdcdc
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.GhostWhite">
            <summary>
            Color GhostWhite.  0xf8f8ff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Gold">
            <summary>
            Color Gold.  0xffd70
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Goldenrod">
            <summary>
            Color Goldenrod.  0xdaa520
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Gray">
            <summary>
            Color Gray.  0x808080
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Green">
            <summary>
            Color Green.  0x0800
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.GreenYellow">
            <summary>
            Color GreenYellow.  0xadff2f
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Honeydew">
            <summary>
            Color Honeydew.  0xf0fff0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.HotPink">
            <summary>
            Color HotPink.  0xff69b4
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.IndianRed">
            <summary>
            Color IndianRed.  0xcd5c5c
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Indigo">
            <summary>
            Color Indigo.  0x4b082
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Ivory">
            <summary>
            Color Ivory.  0xfffff0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Khaki">
            <summary>
            Color Khaki.  0xf0e68c
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Lavender">
            <summary>
            Color Lavender.  0xe6e6fa
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LavenderBlush">
            <summary>
            Color LavenderBlush.  0xfff0f5
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LawnGreen">
            <summary>
            Color LawnGreen.  0x7cfc0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LemonChiffon">
            <summary>
            Color LemonChiffon.  0xfffacd
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightBlue">
            <summary>
            Color LightBlue.  0xadd8e6
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightCoral">
            <summary>
            Color LightCoral.  0xf08080
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightCyan">
            <summary>
            Color LightCyan.  0xe0ffff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightGoldenrodYellow">
            <summary>
            Color LightGoldenrodYellow.  0xfafad2
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightGray">
            <summary>
            Color LightGray.  0xd3d3d3
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightGreen">
            <summary>
            Color LightGreen.  0x90ee90
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightPink">
            <summary>
            Color LightPink.  0xffb6c1
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightSalmon">
            <summary>
            Color LightSalmon.  0xffa07a
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightSeaGreen">
            <summary>
            Color LightSeaGreen.  0x20b2aa
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightSkyBlue">
            <summary>
            Color LightSkyBlue.  0x87cefa
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightSlateGray">
            <summary>
            Color LightSlateGray.  0x778899
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightSteelBlue">
            <summary>
            Color LightSteelBlue.  0xb0c4de
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LightYellow">
            <summary>
            Color LightYellow.  0xffffe0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Lime">
            <summary>
            Color Lime.  0x0ff0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.LimeGreen">
            <summary>
            Color LimeGreen.  0x32cd32
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Linen">
            <summary>
            Color Linen.  0xfaf0e6
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Magenta">
            <summary>
            Color Magenta.  0xff0ff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Maroon">
            <summary>
            Color Maroon.  0x8000
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MediumAquamarine">
            <summary>
            Color MediumAquamarine.  0x66cdaa
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MediumBlue">
            <summary>
            Color MediumBlue.  0x00cd
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MediumOrchid">
            <summary>
            Color MediumOrchid.  0xba55d3
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MediumPurple">
            <summary>
            Color MediumPurple.  0x9370db
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MediumSeaGreen">
            <summary>
            Color MediumSeaGreen.  0x3cb371
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MediumSlateBlue">
            <summary>
            Color MediumSlateBlue.  0x7b68ee
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MediumSpringGreen">
            <summary>
            Color MediumSpringGreen.  0x0fa9a
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MediumTurquoise">
            <summary>
            Color MediumTurquoise.  0x48d1cc
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MediumVioletRed">
            <summary>
            Color MediumVioletRed.  0xc71585
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MidnightBlue">
            <summary>
            Color MidnightBlue.  0x191970
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MintCream">
            <summary>
            Color MintCream.  0xf5fffa
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.MistyRose">
            <summary>
            Color MistyRose.  0xffe4e1
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Moccasin">
            <summary>
            Color Moccasin.  0xffe4b5
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.NavajoWhite">
            <summary>
            Color NavajoWhite.  0xffdead
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Navy">
            <summary>
            Color Navy.  0x0080
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.OldLace">
            <summary>
            Color OldLace.  0xfdf5e6
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Olive">
            <summary>
            Color Olive.  0x80800
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.OliveDrab">
            <summary>
            Color OliveDrab.  0x6b8e23
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Orange">
            <summary>
            Color Orange.  0xffa50
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.OrangeRed">
            <summary>
            Color OrangeRed.  0xff450
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Orchid">
            <summary>
            Color Orchid.  0xda70d6
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.PaleGoldenrod">
            <summary>
            Color PaleGoldenrod.  0xeee8aa
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.PaleGreen">
            <summary>
            Color PaleGreen.  0x98fb98
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.PaleTurquoise">
            <summary>
            Color PaleTurquoise.  0xafeeee
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.PaleVioletRed">
            <summary>
            Color PaleVioletRed.  0xdb7093
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.PapayaWhip">
            <summary>
            Color PapayaWhip.  0xffefd5
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.PeachPuff">
            <summary>
            Color PeachPuff.  0xffdab9
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Peru">
            <summary>
            Color Peru.  0xcd853f
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Pink">
            <summary>
            Color Pink.  0xffc0cb
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Plum">
            <summary>
            Color Plum.  0xdda0dd
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.PowderBlue">
            <summary>
            Color PowderBlue.  0xb0e0e6
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Purple">
            <summary>
            Color Purple.  0x80080
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Red">
            <summary>
            Color Red.  0xff00
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.RosyBrown">
            <summary>
            Color RosyBrown.  0xbc8f8f
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.RoyalBlue">
            <summary>
            Color RoyalBlue.  0x4169e1
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.SaddleBrown">
            <summary>
            Color SaddleBrown.  0x8b4513
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Salmon">
            <summary>
            Color Salmon.  0xfa8072
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.SandyBrown">
            <summary>
            Color SandyBrown.  0xf4a460
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.SeaGreen">
            <summary>
            Color SeaGreen.  0x2e8b57
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.SeaShell">
            <summary>
            Color SeaShell.  0xfff5ee
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Sienna">
            <summary>
            Color Sienna.  0xa0522d
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Silver">
            <summary>
            Color Silver.  0xc0c0c0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.SkyBlue">
            <summary>
            Color SkyBlue.  0x87ceeb
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.SlateBlue">
            <summary>
            Color SlateBlue.  0x6a5acd
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.SlateGray">
            <summary>
            Color SlateGray.  0x708090
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Snow">
            <summary>
            Color Snow.  0xfffafa
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.SpringGreen">
            <summary>
            Color SpringGreen.  0x0ff7f
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.SteelBlue">
            <summary>
            Color SteelBlue.  0x4682b4
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Tan">
            <summary>
            Color Tan.  0xd2b48c
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Teal">
            <summary>
            Color Teal.  0x08080
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Thistle">
            <summary>
            Color Thistle.  0xd8bfd8
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Tomato">
            <summary>
            Color Tomato.  0xff6347
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Transparent">
            <summary>
            Color Transparent.  0xffffff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Turquoise">
            <summary>
            Color Turquoise.  0x40e0d0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Violet">
            <summary>
            Color Violet.  0xee82ee
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Wheat">
            <summary>
            Color Wheat.  0xf5deb3
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.White">
            <summary>
            Color White.  0xffffff
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.WhiteSmoke">
            <summary>
            Color WhiteSmoke.  0xf5f5f5
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.Yellow">
            <summary>
            Color Yellow.  0xffff0
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.YellowGreen">
            <summary>
            Color YellowGreen.  0x9acd32
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.A">
            <summary>
            Gets or sets the alpha channel.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.R">
            <summary>
            Gets or sets the red channel.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.G">
            <summary>
            Gets or sets the green channel.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Color.B">
            <summary>
            Gets or sets the blue channel.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.LightManager">
            <summary>
            The LightManager class keeps a list of Light objects which can be used
            to setup the lighting in the rendering API.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.LightManager.AddPointLight(AgateLib.Geometry.Vector3,AgateLib.Geometry.Color)">
            <summary>
            Adds a point light to the specified position with the given diffuse color.
            </summary>
            <param name="position"></param>
            <param name="diffuse"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.LightManager.AddPointLight(AgateLib.Geometry.Vector3,AgateLib.Geometry.Color,AgateLib.Geometry.Color)">
            <summary>
            Adds a point light to the specified position with the given diffuse and ambient colors.
            </summary>
            <param name="position"></param>
            <param name="diffuse"></param>
            <param name="ambient"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.LightManager.DoLighting">
            <summary>
            This tells the Display to start use the Lights in this LightManager structure for
            lighting.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.LightManager.RemoveAt(System.Int32)">
            <summary>
            Removes a particular light.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.LightManager.Add(AgateLib.DisplayLib.Light)">
            <summary>
            Adds a Light to the list.  If there are more lights than possible, an exception is thrown.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AgateLib.DisplayLib.LightManager.Clear">
            <summary>
            Removes all Lights from the list.
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.LightManager.GetEnumerator">
            <summary>
            Enumerates the Lights in the list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.DisplayLib.LightManager.Enabled">
            <summary>
            Gets or sets a flag indicating whether or not lighting calculations should be performed.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.LightManager.Ambient">
            <summary>
            Gets or sets the global ambient light color.  This light color is applied to
            all objects rendered, regardless of their position.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.LightManager.Item(System.Int32)">
            <summary>
            Gets or sets a Light in the list.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.DisplayLib.LightManager.Count">
            <summary>
            Gets the number of Lights in the list.
            </summary>
        </member>
        <member name="T:AgateLib.Geometry.PointConverter">
            <summary>
            PointConverter.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.PointConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.Geometry.SizeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.SizeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.Geometry.RectangleF">
            <summary>
            Replacement for System.Drawing.RectangleF structure.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a RectangleF.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.#ctor(AgateLib.Geometry.PointF,AgateLib.Geometry.SizeF)">
            <summary>
            Construts a RectangleF.
            </summary>
            <param name="pt"></param>
            <param name="sz"></param>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Static method which returns a RectangleF with specified left, top, right and bottom.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.Contains(System.Int32,System.Int32)">
            <summary>
            Returns true if the RectangleF contains the specified PointF.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.Contains(AgateLib.Geometry.PointF)">
            <summary>
            Returns true if the RectangleF contains the specified PointF.
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.Contains(AgateLib.Geometry.RectangleF)">
            <summary>
            Returns true if the RectangleF entirely contains the specified RectangleF.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.op_Equality(AgateLib.Geometry.RectangleF,AgateLib.Geometry.RectangleF)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.op_Inequality(AgateLib.Geometry.RectangleF,AgateLib.Geometry.RectangleF)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.ToString">
            <summary>
            Creates a string representing this RectangleF.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.Equals(AgateLib.Geometry.RectangleF)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.IntersectsWith(AgateLib.Geometry.RectangleF)">
            <summary>
            Returns true if this intersects another RectangleF.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="F:AgateLib.Geometry.RectangleF.Empty">
            <summary>
            Empty RectangleF
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.RectangleF.Intersect(AgateLib.Geometry.RectangleF,AgateLib.Geometry.RectangleF)">
            <summary>
            Static method returning the intersection of two RectangleFs.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Geometry.RectangleF.X">
            <summary>
            X value
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.RectangleF.Y">
            <summary>
            Y value
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.RectangleF.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.RectangleF.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.RectangleF.Bottom">
            <summary>
            Gets bottom.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.RectangleF.Left">
            <summary>
            Gets left.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.RectangleF.Top">
            <summary>
            Gets top.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.RectangleF.Right">
            <summary>
            Gets right.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.RectangleF.Location">
            <summary>
            Gets or sets top-left PointF.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.RectangleF.Size">
            <summary>
            Gets or sets SizeF.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.RectangleF.IsEmpty">
            <summary>
            True if this is (0,0,0,0).
            </summary>
        </member>
        <member name="T:AgateLib.Geometry.PointF">
            <summary>
            Replacement for System.Drawing.PointF structure.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a PointF object.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:AgateLib.Geometry.PointF.#ctor(AgateLib.Geometry.PointF)">
            <summary>
            Constructs a PointF object.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:AgateLib.Geometry.PointF.#ctor(AgateLib.Geometry.SizeF)">
            <summary>
            Constructs a PointF object.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AgateLib.Geometry.PointF.op_Equality(AgateLib.Geometry.PointF,AgateLib.Geometry.PointF)">
            <summary>
            Equality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.PointF.op_Inequality(AgateLib.Geometry.PointF,AgateLib.Geometry.PointF)">
            <summary>
            Inequality comparison test.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.PointF.op_Explicit(AgateLib.Geometry.PointF)~AgateLib.Geometry.Point">
            <summary>
            Explicitly converts a point to a pointf structure.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.PointF.ToString">
            <summary>
            Creates a string representing this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.PointF.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.PointF.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Geometry.PointF.Equals(AgateLib.Geometry.PointF)">
            <summary>
            Equality test.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:AgateLib.Geometry.PointF.Empty">
            <summary>
            Empty PointF.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.PointF.Add(AgateLib.Geometry.PointF,AgateLib.Geometry.SizeF)">
            <summary>
            Adds the specified SizeF structure to the specified PointF structure
            and returns the result as a new PointF structure.
            </summary>
            <param name="pt"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Geometry.PointF.X">
            <summary>
            Gets or sets the X value.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.PointF.Y">
            <summary>
            Gets or sets the Y value.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.PointF.IsEmpty">
            <summary>
            Returns true if X and Y are zero.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.SurfacePacker">
            <summary>
            Class which handles packing of surfaces into a large surface.
            
            This class was introduced to allow render state changes to be minimized
            by making everything use the same texture object in memory.
            </summary>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.ClearQueue">
            <summary>
            Clears the list of surfaces that should be packed.
            </summary>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.QueueSurface(AgateLib.DisplayLib.Surface)">
            <summary>
            Adds a surface to the list of surfaces that should be packed.
            </summary>
            <param name="surf"></param>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.PackQueue">
            <summary>
            Packs all the surfaces in the list.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.SurfacePacker.RectHolder`1">
            <summary>
            Holds a destination rectangle and object to go in it.
            </summary>
            <typeparam name="T">Type of object to put in rectangle.</typeparam>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.RectHolder`1.CompareTo(AgateLib.Utility.SurfacePacker.RectHolder{`0})">
            <summary>
            Compares two RectHolder objects for sorting purposes.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Utility.SurfacePacker.RectHolder`1.Rect">
            <summary>
            Gets or sets the destination rectangle.
            </summary>
        </member>
        <member name="P:AgateLib.Utility.SurfacePacker.RectHolder`1.Tag">
            <summary>
            Gets or sets the object.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.SurfacePacker.RectPacker`1">
            <summary>
            Class which takes a bunch of rectangles and organizes them to 
            all fit within a large rectangle.
            </summary>
            <typeparam name="T">The type of objects which will be added to the rectangles.
            This is so that the RectPacker can keep track of which rectangles go with
            which objects.</typeparam>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.RectPacker`1.#ctor(AgateLib.Geometry.Size)">
            <summary>
            Creates a RectPacker object of the specified size.
            </summary>
            <param name="containerSize"></param>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.RectPacker`1.AddRect(AgateLib.Geometry.Rectangle,`0)">
            <summary>
            Adds a used rectangle to the RectPacker.
            This throws an exception if pixels in the rectangle specified 
            are already used.
            </summary>
            <param name="rect"></param>
            <param name="tag"></param>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.RectPacker`1.FindEmptySpace(AgateLib.Geometry.Size,AgateLib.Geometry.Rectangle@)">
            <summary>
            Finds an empty space of the specified size.
            
            Returns true if there was an empty space of that size available.
            </summary>
            <param name="size"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.RectPacker`1.QueueObject(AgateLib.Geometry.Size,`0)">
            <summary>
            Adds an object of the specified size to the queue.
            </summary>
            <param name="size"></param>
            <param name="tag"></param>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.RectPacker`1.ClearQueue">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.RectPacker`1.AddQueue">
            <summary>
            Packs all the objects in the queue to the container.
            Sorts them first, to optimize coverage.
            </summary>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.RectPacker`1.UnusuedQueueObjects">
            <summary>
            Returns a collection of all objects in the queue which have
            not been added to the container rect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.RectPacker`1.GetEnumerator">
            <summary>
            Enumerates through the packed rectangles.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Utility.SurfacePacker.RectPacker`1.ContainerSize">
            <summary>
            Gets or sets the size of the container to fit all the
            rects into.
            </summary>
        </member>
        <member name="P:AgateLib.Utility.SurfacePacker.RectPacker`1.PixelsUsedPercentage">
            <summary>
            Returns what percentage of the container is used up.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.SurfacePacker.PackedSurface">
            <summary>
            Class which creates the final packed surface.
            </summary>
        </member>
        <member name="M:AgateLib.Utility.SurfacePacker.PackedSurface.#ctor(AgateLib.Geometry.Size)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="P:AgateLib.Utility.SurfacePacker.PackedSurface.RectPacker">
            <summary>
            
            </summary>
        </member>
        <member name="T:AgateLib.Geometry.Gradient">
            <summary>
            A four color gradient, with a different color value for each corner.
            </summary>
        </member>
        <member name="M:AgateLib.Geometry.Gradient.#ctor(AgateLib.Geometry.Color)">
            <summary>
            Initializes a gradient with the same color in all four corners.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:AgateLib.Geometry.Gradient.#ctor(AgateLib.Geometry.Color,AgateLib.Geometry.Color,AgateLib.Geometry.Color,AgateLib.Geometry.Color)">
            <summary>
            Initializes a gradient.
            </summary>
            <param name="tl">The top left color.</param>
            <param name="tr">The top right color.</param>
            <param name="bl">The bottom left color.</param>
            <param name="br">The bottom right color.</param>
        </member>
        <member name="M:AgateLib.Geometry.Gradient.SetAlpha(System.Double)">
            <summary>
            Sets the alpha value for all corners.
            Valid values are 0.0 to 1.0.  Values outside this are clamped.
            </summary>
            <param name="alpha"></param>
        </member>
        <member name="M:AgateLib.Geometry.Gradient.Interpolate(System.Double,System.Double)">
            <summary>
            Interpolates the color into the interior of the gradient.
            Parameters should be in the range 0.0 to 1.0; they are clamped
            if outside this range.
            </summary>
            <param name="x">Distance from the left side of the gradient.  0.0 is 
            on the left side, 1.0 is on the right.</param>
            <param name="y">Distance from the top of the gradient.  0.0 is 
            on the top, 1.0 is on the bottom.</param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Geometry.Gradient.TopLeft">
            <summary>
            Gets or sets the color for the top left.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Gradient.TopRight">
            <summary>
            Gets or sets the color for the top right.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Gradient.BottomLeft">
            <summary>
            Gets or sets the color for the bottom left.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Gradient.BottomRight">
            <summary>
            Gets or sets the color for the bottom right.
            </summary>
        </member>
        <member name="P:AgateLib.Geometry.Gradient.AverageColor">
            <summary>
            Calculates the color which is the average of all four colors.
            </summary>
        </member>
        <member name="T:AgateLib.AudioLib.SoundBuffer">
            <summary>
            A class which is used for loading and playing of sounds.
            Typically this is used for sound effects, whereas playing background music
            is done by the Music class.
            
            The SoundBuffer class supports playing the same sound multiple times; this
            is done through the creation of SoundBufferSession objects for each time
            the SoundBuffer is played.  
            
            SoundBufferSession objects may be recycled, to cut down on the amount of
            new calls.  
            
            This class should support loading of .wav files, at the very least.
            </summary>
        </member>
        <member name="F:AgateLib.AudioLib.SoundBuffer.mSessions">
            <summary>
            A list of existing SoundBufferSession objects.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.SoundBuffer.#ctor(System.String)">
            <summary>
            Constructs a SoundBuffer object, loading audio data from the 
            specified file.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:AgateLib.AudioLib.SoundBuffer.#ctor(AgateLib.IFileProvider,System.String)">
            <summary>
            Constructs a SoundBuffer object, loading audio data from the 
            specified file given the specified IFileProvider.
            </summary>
            <param name="fileProvider"></param>
            <param name="filename"></param>
        </member>
        <member name="M:AgateLib.AudioLib.SoundBuffer.#ctor(System.IO.Stream)">
            <summary>
            Constructs a SoundBuffer object, loading audio data from the passed stream.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:AgateLib.AudioLib.SoundBuffer.Dispose">
            <summary>
            Disposes of the SoundBuffer object, and all SoundBufferSession objects
            created by this SoundBuffer.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.SoundBuffer.CreateSession">
            <summary>
            Creates a SoundBufferSession object, for playing of this
            buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.AudioLib.SoundBuffer.Play">
            <summary>
            Creates a SoundBufferSession object and starts it playing.
            You can ignore the return value of this function if you just
            want simple playback.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.AudioLib.SoundBuffer.NewSoundBufferSession">
            <summary>
            Creates a new SoundBufferSession object, or finds one which
            can be recycled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.AudioLib.SoundBuffer.Stop">
            <summary>
            Stops all SoundBufferSession objects created from this sound.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.SoundBuffer.Impl">
            <summary>
            Returns the implemented object.
            </summary>
        </member>
        <member name="E:AgateLib.AudioLib.SoundBuffer.StopEvent">
            <summary>
            Event which occurs when Stop is called on the SoundBuffer object.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.SoundBuffer.Filename">
            <summary>
            Filename this sound was originally loaded from.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.SoundBuffer.Volume">
            <summary>
            Gets or sets the default volume that will be used in new sessions. Range is:
            0.0 Quiet
            0.5 Sounds half volume
            1.0 Full volume
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.SoundBuffer.Pan">
            <summary>
            Gets or sets the left-right balance that will be used in new sessions. 
            -1 is entirely in the left speaker,
             0 is equally in both and,
             1 is entirely in the right speaker.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.SoundBuffer.IsPlaying">
            <summary>
            Returns true if any SoundBufferSession objects are playing.
            </summary>
        </member>
        <member name="T:AgateLib.Sprites.Sprite">
            <summary>
            A class for representing an animated image.
            </summary>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.#ctor(AgateLib.Geometry.Size)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.#ctor(System.String,AgateLib.Geometry.Size)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            The given file is loaded automatically, and frames are cut out from it
            of the specified size.
            </summary>
            <param name="surfaceFilename"></param>
            <param name="size"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            Frames are cut out from the given surface of the specified size.
            </summary>
            <param name="stream"></param>
            <param name="height"></param>
            <param name="width"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.#ctor(System.IO.Stream,AgateLib.Geometry.Size)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            A surface is loaded from the passed stream, and frames are cut out from it
            of the specified size.
            </summary>
            <param name="surfaceData"></param>
            <param name="size"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            The given file is loaded automatically, and frames are cut out from it
            of the specified size.
            </summary>
            <param name="filename"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.#ctor(AgateLib.DisplayLib.Surface,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            Frames are cut out from the given surface of the specified size.
            </summary>
            <param name="surface"></param>
            <param name="ownSurface">True to indicate that this Sprite object owns the surface, so 
            it is disposed when this Sprite is disposed.</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.#ctor(AgateLib.DisplayLib.Surface,System.Boolean,AgateLib.Geometry.Size)">
            <summary>
            Constructs a Sprite object, of the specified width and height.
            </summary>
            <param name="surface"></param>
            <param name="ownSurface">True to indicate that this Sprite object owns the surface, so 
            it is disposed when this Sprite is disposed.</param>
            <param name="size"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.#ctor(AgateLib.Resources.AgateResourceCollection,System.String)">
            <summary>
            Constructs a sprite from a resource.
            </summary>
            <param name="resources"></param>
            <param name="name"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.AddFrame(AgateLib.DisplayLib.Surface,System.Boolean,AgateLib.Geometry.Rectangle,AgateLib.Geometry.Point)">
            <summary>
            Adds a frame to the sprite.
            </summary>
            <param name="surface">The surface from which to get the image data.</param>
            <param name="bounds">The source rectangle for the image data used in the sprite frame to be added.</param>
            <param name="ownSurface">Pass true to indicate that this sprite should own the surface and dispose of it when finished.</param>
            <param name="offset">The offset within the sprite to the upperleft corner of where the frame is drawn.</param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.Clone">
            <summary>
            Makes a copy of this sprite and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.Dispose">
            <summary>
            Disposes of unmanaged resources associated with this sprite.
            </summary>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.AddNewFrames(System.String,AgateLib.Geometry.Point,AgateLib.Geometry.Point,System.Boolean)">
            <summary>
            Adds frames from the given filename, using the size of this sprite.
            Frames are taken from startPoint, and with extraSpace inbetween.
            </summary>
            <param name="filename"></param>
            <param name="startPoint"></param>
            <param name="extraSpace"></param>
            <param name="skipBlank"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.AddNewFrames(System.IO.Stream,AgateLib.Geometry.Point,AgateLib.Geometry.Point,System.Boolean)">
            <summary>
            Adds frames by constructing a surface from the given stream, using the size of this sprite.
            Frames are taken from startPoint, and with extraSpace inbetween.
            </summary>
            <param name="stream"></param>
            <param name="startPoint"></param>
            <param name="extraSpace"></param>
            <param name="skipBlank"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.AddNewFrames(AgateLib.DisplayLib.Surface,System.Boolean,AgateLib.Geometry.Point,AgateLib.Geometry.Point,AgateLib.Geometry.Size,System.Boolean)">
            <summary>
            Slices and dices the image passed into frames and adds them.
            Frames are taken from the surface from left to right.
            </summary>
            <param name="surface"></param>
            <param name="ownSurface">Pass true to indicate that this sprite should own the surface, and handle its disposal.</param>
            <param name="startPoint">The starting point in pixels from which to parse frames.</param>
            <param name="size">The size of the image to cut out for each frame</param>
            <param name="extraSpace">How many extra pixels to insert between each frame.</param>
            <param name="skipBlank">Whether or not blank frames should be automatically dropped.</param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.Draw(AgateLib.Geometry.Rectangle)">
            <summary>
            Draw the sprite to the given destination rectangle.
            Overrides scaling settings.
            </summary>
            <param name="destRect"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.Draw(System.Int32,System.Int32)">
            <summary>
            Draws the sprite at the specified position on screen.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.Draw(System.Single,System.Single)">
            <summary>
            Draws the sprite at the specified position on screen.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.Draw(AgateLib.Geometry.Point)">
            <summary>
            Draws the sprite at the specified position on screen.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.Draw(AgateLib.Geometry.Vector2)">
            <summary>
            Draws the sprite at the specified position on screen.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.Draw(AgateLib.Geometry.PointF)">
            <summary>
            Draws the sprite at the specified position on screen.
            </summary>
            <param name="destPt"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.DrawPoints(AgateLib.Geometry.Point[])">
            <summary>
            Draws the sprite at all the specified positions on screen.
            </summary>
            <param name="dest_pts"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.Draw">
            <summary>
            Draws the sprite at the origin.
            </summary>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.DrawRects(AgateLib.Geometry.Rectangle[])">
            <summary>
            Draws the sprite at the specified rectangles.
            </summary>
            <param name="dest_rects"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.SetScale(System.Double,System.Double)">
            <summary>
            Sets the scale of the sprite.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.GetScale(System.Double@,System.Double@)">
            <summary>
            Gets the scale of the sprite.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.IncrementRotationAngle(System.Double)">
            <summary>
            Increments the rotation angle by the specified number of radians.
            </summary>
            <param name="radians"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.IncrementRotationAngleDegrees(System.Double)">
            <summary>
            Increments the rotation angle by the specified number of degrees.
            </summary>
            <param name="degrees"></param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.Update">
            <summary>
            Updates the animation of the sprite, using the DeltaTime given
            by the Display object.
            </summary>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.Update(System.Double)">
            <summary>
            Updates the animation of the sprite, using the given frame time.
            </summary>
            <param name="time_ms">The amount of time to consider passed, in milliseconds.</param>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.AdvanceFrame">
            <summary>
            Shows the next frame in the sequence.  This pays attention
            to whether the animation is playing forwards or reverse.
            </summary>
        </member>
        <member name="M:AgateLib.Sprites.Sprite.StartAnimation">
            <summary>
            Restarts the animation.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.SpriteWidth">
            <summary>
            Gets width of the sprite.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.SpriteHeight">
            <summary>
            Gets height of the sprite.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.SpriteSize">
            <summary>
            Gets the size of the sprite.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.ScaleWidth">
            <summary>
            Gets or sets the amount the width is scaled.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.ScaleHeight">
            <summary>
            Gets or sets the amount the height is scaled.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.DisplayWidth">
            <summary>
            Gets the width of the sprite when displayed.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.DisplayHeight">
            <summary>
            Gets the height of the sprite when displayed.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.DisplaySize">
            <summary>
            Gets or sets the size of the sprite when displayed.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.Alpha">
            <summary>
            Gets or sets transparency value.
            0.0 is completely transparent
            1.0 is completely opaque.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.RotationAngle">
            <summary>
            Gets or sets the rotation angle in radians.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.RotationAngleDegrees">
            <summary>
            Gets or sets the rotation angle in degrees.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.RotationCenter">
            <summary>
            Gets or sets the center of rotation.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.DisplayAlignment">
            <summary>
            Gets or sets the interpretation of the position.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.Color">
            <summary>
            Gets or sets the color of the sprite.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.ColorGradient">
            <summary>
            Gets or sets the color gradient on the sprite.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.Visible">
            <summary>
            Gets or sets whether or not the sprite should be drawn when Draw is called.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.TimePerFrame">
            <summary>
            The amount of time each frame should display, in milliseconds.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.CurrentFrameIndex">
            <summary>
            The index of the current frame.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.CurrentFrame">
            <summary>
            Gets the currently displaying frame.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.PlayReverse">
            <summary>
            Gets or sets a flag which indicates whether or not this animation plays in 
            reverse instead.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.AnimationType">
            <summary>
            Gets or sets an enum value indicating what type of animation is happening.
            Looping - The animation will play from beginning to end and then restart.
            PingPong - The animation will play from beginning to end and then from end to beginning (continuously).
            Once - The animation plays once, and then shows its first frame.
            OnceHoldLast - The animation plays once, and leaves the last frame on.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.IsAnimating">
            <summary>
            Gets or sets a flag which indicates:
            True if the animation is running.
            False if a single frame will be shown indefinitely.
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.Sprite.Frames">
            <summary>
            Gets the list of frames in this sprite.
            </summary>
        </member>
        <member name="E:AgateLib.Sprites.Sprite.AnimationStopped">
            <summary>
            Event which is raised when the animation is stopped.
            </summary>
        </member>
        <member name="E:AgateLib.Sprites.Sprite.AnimationStarted">
            <summary>
            Event which is raised when the animation is started.
            </summary>
        </member>
        <member name="E:AgateLib.Sprites.Sprite.PlayDirectionChanged">
            <summary>
            Event which is raised when the play direction is changed, as
            in the PingPong type.
            </summary>
        </member>
        <member name="T:AgateLib.Resources.AgateResourceLoader">
            <summary>
            Statis class which loads and saves AgateResourceCollection objects to disk.
            </summary>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceLoader.SaveResources(AgateLib.Resources.AgateResourceCollection,System.String)">
            <summary>
            Saves the resources to a file located in the Filename property.
            </summary>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceLoader.LoadResources(System.String)">
            <summary>
            Static method which creates a resource manager based on the contents of a file.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceLoader.LoadResources(AgateLib.Resources.AgateResourceCollection,System.IO.Stream)">
            <summary>
            Loads the resource information from a stream containing XML data.
            This erases all information in the current AgateResourceCollection.
            </summary>
            <param name="resources"></param>
            <param name="stream"></param>
        </member>
        <member name="P:AgateLib.Resources.AgateResourceLoader.ThrowOnReadError">
            <summary>
            Gets or sets a bool value indicating whether or not an exception
            is thrown if an unknown resource type is encountered when reading
            an XML file.
            </summary>
        </member>
        <member name="T:AgateLib.BitmapFont.BitmapFontImpl">
            <summary>
            Provides a basic implementation for the use of non-system fonts provided
            as a bitmap.
            
            To construct a bitmap font, call the appropriate static FontSurface method.
            </summary>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontImpl.#ctor(System.String,AgateLib.Geometry.Size)">
            <summary>
            Constructs a BitmapFontImpl, assuming the characters in the given file
            are all the same size, and are in their ASCII order.
            </summary>
            <param name="filename"></param>
            <param name="characterSize"></param>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontImpl.#ctor(AgateLib.DisplayLib.Surface,AgateLib.BitmapFont.FontMetrics)">
            <summary>
            Constructs a BitmapFontImpl, taking the passed surface as the source for
            the characters.  The source rectangles for each character are passed in.
            </summary>
            <param name="surface">Surface which contains the image data for the font glyphs.</param>
            <param name="fontMetrics">FontMetrics structure which describes how characters
            are laid out.</param>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontImpl.Dispose">
            <summary>
            Disposes of the object.
            </summary>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontImpl.StringDisplayWidth(System.String)">
            <summary>
            Measures the width of the text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontImpl.StringDisplayHeight(System.String)">
            <summary>
            Measures the height of the text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontImpl.StringDisplaySize(System.String)">
            <summary>
            Measures the size of the text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontImpl.DrawText(System.Int32,System.Int32,System.String)">
            <summary>
            Draws the text to the screen.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontImpl.DrawText(System.Double,System.Double,System.String)">
            <summary>
            Draws the text to the screen.
            </summary>
            <param name="destX"></param>
            <param name="destY"></param>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontImpl.DrawText(AgateLib.Geometry.Point,System.String)">
            <summary>
            Draws the text to the screen.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontImpl.DrawText(AgateLib.Geometry.PointF,System.String)">
            <summary>
            Draws the text to the screen.
            </summary>
            <param name="destPt"></param>
            <param name="text"></param>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontImpl.FontMetrics">
            <summary>
            Gets the font metric information.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontImpl.Surface">
            <summary>
            Gets the surface containing the glyphs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontImpl.Color">
            <summary>
            Overrides the base Color method to catch color changes to set them on the surface.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontImpl.FontHeight">
            <summary>
            Returns the height of characters in the font.
            </summary>
        </member>
        <member name="T:AgateLib.BitmapFont.BitmapFontEdgeOptions">
            <summary>
            Enum which indicates how pixels along glyph edges are processed.
            </summary>
        </member>
        <member name="F:AgateLib.BitmapFont.BitmapFontEdgeOptions.IntensityAlphaWhite">
            <summary>
            Calculates the intensity of the pixel, and sets the pixel to white
            with an alpha value equal to its intensity.
            </summary>
        </member>
        <member name="F:AgateLib.BitmapFont.BitmapFontEdgeOptions.IntensityAlphaColor">
            <summary>
            Preserves the color of the pixel, and sets the alpha to the intensity of
            the pixel.
            </summary>
        </member>
        <member name="F:AgateLib.BitmapFont.BitmapFontEdgeOptions.None">
            <summary>
            Performs no processing on edges and leaves them as is.
            Note that this will result in edges which are not at all transparent.
            </summary>
        </member>
        <member name="T:AgateLib.AudioLib.Audio">
            <summary>
            Static class which contains basic functions for playing sound and music.
            This is analogous to the static Display class, but playing audio files
            is much less complicated.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.Audio.Initialize(AgateLib.Drivers.AudioTypeID)">
            <summary>
            Initializes the audio system by instantiating the driver with the given
            AudioTypeID.  The audio driver must be registered with the Registrar
            class.
            </summary>
            <param name="audioType"></param>
        </member>
        <member name="M:AgateLib.AudioLib.Audio.Dispose">
            <summary>
            Disposes of the audio driver.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.Audio.StopAll">
            <summary>
            Stops all sound and music currently playing.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.Audio.StopAllSounds">
            <summary>
            Stops all sound effects playing.  Music objects will continue playing.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.Audio.StopAllMusic">
            <summary>
            Stops all music currently playing.  Sound objects will continue playing.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.Audio.TransformByLog(System.Double)">
            <summary>
            This is for use by drivers whose underlying technology does not provide
            a volume control which sounds linear.
            
            Transforms the input in the range 0 to 1 by a logarithm into the
            range of 0 to 1.  
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.AudioLib.Audio.TransformByExp(System.Double)">
            <summary>
            This is for use by drivers whose underlying technology does not provide
            a volume control which sounds linear.
            
            Transforms the input in the range 0 to 1 by an exponential into the
            range of 0 to 1.  
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.AudioLib.Audio.Update">
            <summary>
            Updates audio information.  There is no need to call this explicitly
            if you are calling Core.KeepAlive on a regular basis.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.Audio.Impl">
            <summary>
            Gets the object which handles all of the actual calls to Audio functions.
            </summary>
        </member>
        <member name="E:AgateLib.AudioLib.Audio.DisposeAudio">
            <summary>
            Event that is called when Display.Dispose() is invoked, to shut down the
            display system and release all resources.
            </summary>
        </member>
        <member name="T:AgateLib.AudioLib.Audio.AudioCoreEventDelegate">
            <summary>
            Delegate type for events which are raised by this class.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.Platform">
            <summary>
            Returns information about the current platform.
            </summary>
        </member>
        <member name="P:AgateLib.Utility.Platform.PlatformType">
            <summary>
            Returns an enum representing the current platform.
            </summary>
        </member>
        <member name="T:AgateLib.Utility.PlatformType">
            <summary>
            Enumeration listing the known platform types.
            </summary>
        </member>
        <member name="F:AgateLib.Utility.PlatformType.Unknown">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:AgateLib.Utility.PlatformType.Windows">
            <summary>
            The Windows platform, including Windows 98, Windows NT, Windows XP, Windows Vista, etc.
            </summary>
        </member>
        <member name="F:AgateLib.Utility.PlatformType.Linux">
            <summary>
            Some Linux / Unix platform, typically running with an X windowing system.
            </summary>
        </member>
        <member name="F:AgateLib.Utility.PlatformType.MacOS">
            <summary>
            Mac OS 10.3 or later.
            </summary>
        </member>
        <member name="F:AgateLib.Utility.PlatformType.XBox360">
            <summary>
            Microsoft's XBox 360 console.
            </summary>
        </member>
        <member name="F:AgateLib.Utility.PlatformType.Gp2x">
            <summary>
            The portable GP2x handheld, or compatible.
            </summary>
        </member>
        <member name="T:AgateLib.Sprites.FrameList`1">
            <summary>
            Class which contains a list of sprite frames.
            </summary>
            <typeparam name="T">Type which should implement the ISpriteFrame interface.</typeparam>
        </member>
        <member name="M:AgateLib.Sprites.FrameList`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified frame.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Sprites.FrameList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a sprite frame into the list.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:AgateLib.Sprites.FrameList`1.RemoveAt(System.Int32)">
            <summary>
            Removes a sprite frame by index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AgateLib.Sprites.FrameList`1.Add(`0)">
            <summary>
            Adds a sprite frame to the list.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:AgateLib.Sprites.FrameList`1.Clear">
            <summary>
            Clears the list of sprite frames.
            </summary>
        </member>
        <member name="M:AgateLib.Sprites.FrameList`1.Contains(`0)">
            <summary>
            Returns true if the specified frame is in the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Sprites.FrameList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list to an array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:AgateLib.Sprites.FrameList`1.Remove(`0)">
            <summary>
            Removes the specified item, if it is in the list.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Sprites.FrameList`1.GetEnumerator">
            <summary>
            Enumerates through the frames.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Sprites.FrameList`1.Item(System.Int32)">
            <summary>
            Gets or sets the sprite frame at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Sprites.FrameList`1.Count">
            <summary>
            Returns the number of frames in the list
            </summary>
        </member>
        <member name="P:AgateLib.Sprites.FrameList`1.IsReadOnly">
            <summary>
            Always false.
            </summary>
        </member>
        <member name="T:AgateLib.Resources.AgateResourceException">
            <summary>
            AgateException derived exception class used when there is a problem reading
            from a resource file.
            </summary>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:AgateLib.Resources.AgateResourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:AgateLib.InputLib.Mouse">
            <summary>
            Class which encapsulates input from the mouse.
            </summary>
        </member>
        <member name="M:AgateLib.InputLib.Mouse.Show">
            <summary>
            Shows the OS cursor.
            </summary>
        </member>
        <member name="M:AgateLib.InputLib.Mouse.Hide">
            <summary>
            Hides the OS cursor.
            </summary>
        </member>
        <member name="M:AgateLib.InputLib.Mouse.OnMouseWheel(System.Int32)">
            <summary>
            Raises the MouseWheel event.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:AgateLib.InputLib.Mouse.OnMouseMove">
            <summary>
            Raises the MouseMove event.
            </summary>
        </member>
        <member name="M:AgateLib.InputLib.Mouse.OnMouseDoubleClick(AgateLib.InputLib.Mouse.MouseButtons)">
            <summary>
            Raises the MouseDoubleClick event.
            </summary>
            <param name="btn"></param>
        </member>
        <member name="P:AgateLib.InputLib.Mouse.Position">
            <summary>
            Gets or sets the position of the cursor, in client coordinates
            of the current display window.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Mouse.X">
            <summary>
            Gets or sets the X position of the cursor, in client coordinates 
            of the current display window.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Mouse.Y">
            <summary>
            Gets or sets the Y position of the cursor, in client coordinates
            of the current display window.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Mouse.IsHidden">
            <summary>
            Returns true if the mouse pointer is hidden.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Mouse.Buttons">
            <summary>
            Gets the MouseState structure which indicates which buttons
            are pressed.
            </summary>
        </member>
        <member name="E:AgateLib.InputLib.Mouse.MouseMove">
            <summary>
            Event which occurs when the mouse is moved.
            </summary>
        </member>
        <member name="E:AgateLib.InputLib.Mouse.MouseDown">
            <summary>
            Event which occurs when a mouse button is pressed.
            </summary>
        </member>
        <member name="E:AgateLib.InputLib.Mouse.MouseUp">
            <summary>
            Event which occurs when a mouse button is released.
            </summary>
        </member>
        <member name="E:AgateLib.InputLib.Mouse.MouseDoubleClick">
            <summary>
            Event which occurs when a mouse button is double-clicked.
            </summary>
        </member>
        <member name="E:AgateLib.InputLib.Mouse.MouseWheel">
            <summary>
            Event which occurs when the mouse wheel is scrolled.  Positive numbers
            indicate scrolling down, while negative numbers indicate scrolling up.
            A value of 100 means to scroll one line.
            </summary>
        </member>
        <member name="T:AgateLib.InputLib.Mouse.MouseButtons">
            <summary>
            Mouse Buttons enum.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.Mouse.MouseButtons.None">
            <summary>
            No mouse button
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.Mouse.MouseButtons.Primary">
            <summary>
            Primary button, typically the left button.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.Mouse.MouseButtons.Secondary">
            <summary>
            Secondary button, typically the right button.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.Mouse.MouseButtons.Middle">
            <summary>
            Middle button on some mice.
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.Mouse.MouseButtons.ExtraButton1">
            <summary>
            First Extra Button
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.Mouse.MouseButtons.ExtraButton2">
            <summary>
            Second Extra Button
            </summary>
        </member>
        <member name="F:AgateLib.InputLib.Mouse.MouseButtons.ExtraButton3">
            <summary>
            Third Extra Button
            </summary>
        </member>
        <member name="T:AgateLib.InputLib.Mouse.MouseState">
            <summary>
            Class which encapsulates the state of the mouse.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.Mouse.MouseState.Item(AgateLib.InputLib.Mouse.MouseButtons)">
            <summary>
            Gets or sets the pressed values of the passed mouse buttons.
            Generates events when buttons are pressed or released.
            The MouseButtons enum has the FlagsAttribute, so you can make a bitwise
            combination of these values.  
            Getting the state with a combination of flags returns true if ANY one of
            the buttons are down.
            Setting the state with a combination of flags will set the state for
            all flags passed.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.BitmapFont.BitmapFontOptions">
            <summary>
            Class which indicates how a bitmap font should be generated
            from an operating system font.
            </summary>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontOptions.#ctor">
            <summary>
            Constructs a BitmapFontOptions object using a 10-point sans serif font.
            </summary>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontOptions.#ctor(System.String,System.Single)">
            <summary>
            Constructs a BitmapFontOptions object.
            </summary>
            <param name="fontFamily"></param>
            <param name="sizeInPoints"></param>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontOptions.#ctor(System.String,System.Single,AgateLib.DisplayLib.FontStyle)">
            <summary>
            Constructs a BitmapFontOptions object.
            </summary>
            <param name="fontFamily"></param>
            <param name="sizeInPoints"></param>
            <param name="style"></param>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontOptions.AddRange(System.Char,System.Char)">
            <summary>
            Adds a range of characters to be rendered.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontOptions.CharacterRanges">
            <summary>
            Enumerates the character ranges to be rendered.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontOptions.TotalChars">
            <summary>
            Gets the total number of characters to be rendered to the bitmap.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontOptions.EdgeOptions">
            <summary>
            Indicates how to treat font edges.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontOptions.UseTextRenderer">
            <summary>
            Indicates whether to use System.Windows.Forms.TextRenderer instead of
            System.Drawing.Graphics.  TextRenderer on Windows will likely produce 
            nicer-looking characters than Graphics, but it is much slower rendering
            the characters.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontOptions.FontStyle">
            <summary>
            Style of the font to be generated.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontOptions.SizeInPoints">
            <summary>
            Size of the font in points.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontOptions.FontFamily">
            <summary>
            Name of the font family.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontOptions.BorderColor">
            <summary>
            Color of the border on the glyphs.  Colors
            other than black may show up correctly when drawing
            colored text.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontOptions.CreateBorder">
            <summary>
            Indicates whether to create a border around the glyphs.
            </summary>
        </member>
        <member name="T:AgateLib.BitmapFont.BitmapFontOptions.CharacterRange">
            <summary>
            Class which represents a range of characters 
            </summary>
        </member>
        <member name="M:AgateLib.BitmapFont.BitmapFontOptions.CharacterRange.#ctor(System.Char,System.Char)">
            <summary>
            Constructs a character range.
            </summary>
            <param name="startChar"></param>
            <param name="endChar"></param>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontOptions.CharacterRange.EndChar">
            <summary>
            Last char in the range.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.BitmapFontOptions.CharacterRange.StartChar">
            <summary>
            First char in the range.
            </summary>
        </member>
        <member name="T:AgateLib.Serialization.Xle.ITypeBinder">
            <summary>
            This interface must be implemented by any class which wants to provide
            custom type binding (mapping from a string to a Type object) for the
            XleSerializer.
            </summary>
        </member>
        <member name="M:AgateLib.Serialization.Xle.ITypeBinder.GetType(System.String)">
            <summary>
            Returns a Type object representing the type described by the typename parameter.
            </summary>
            <param name="typename"></param>
            <returns></returns>
        </member>
        <member name="T:AgateLib.InputLib.InputEventArgs">
            <summary>
            Class which describes details about an input event.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.InputEventArgs.KeyCode">
            <summary>
            Gets which key was pressed.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.InputEventArgs.KeyString">
            <summary>
            Gets the text created by the key which was pressed.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.InputEventArgs.MousePosition">
            <summary>
            The mouse position during this event
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.InputEventArgs.RepeatCount">
            <summary>
            Gets how many times the keypress has been repeated.
            This is zero for the first time a key is pressed, and increases
            as the key is held down and KeyDown events are generated after that.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.InputEventArgs.MouseButtons">
            <summary>
            Gets which mouse buttons were pressed.
            </summary>
        </member>
        <member name="P:AgateLib.InputLib.InputEventArgs.WheelDelta">
            <summary>
            Gets the amount the mouse wheel moved in this event.
            </summary>
        </member>
        <member name="T:AgateLib.ImplementationBase.JoystickImpl">
            <summary>
            Class which implements a Joystick.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.JoystickImpl.GetButtonState(System.Int32)">
            <summary>
            Gets the state of the specified button.  
            </summary>
            <param name="buttonIndex">Index of the button to check.  Valid values are
            from 0 to ButtonCount - 1.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.JoystickImpl.GetAxisValue(System.Int32)">
            <summary>
            Gets the currentFrame value for the given axis.
            Axis 0 is always the x-axis, axis 1 is always the y-axis on
            controllers which have this capability.
            </summary>
            <param name="axisIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.ImplementationBase.JoystickImpl.Recalibrate">
            <summary>
            Recalibrates the joystick.
            </summary>
        </member>
        <member name="M:AgateLib.ImplementationBase.JoystickImpl.Poll">
            <summary>
            Polls the joystick for input.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.JoystickImpl.AxisCount">
            <summary>
            Gets how many axes are on this joystick.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.JoystickImpl.ButtonCount">
            <summary>
            Gets how many buttons are on this joystick.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.JoystickImpl.Name">
            <summary>
            Gets the reported name of the joystick.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.JoystickImpl.AxisThreshold">
            <summary>
            Need documentation.
            </summary>
        </member>
        <member name="P:AgateLib.ImplementationBase.JoystickImpl.PluggedIn">
            <summary>
            Gets whether or not this joystick is plugged in.
            </summary>
        </member>
        <member name="T:AgateLib.BitmapFont.FontMetrics">
            <summary>
            FontMetrics is a class which describes everything needed to render a font
            from a bitmap image.
            </summary>
        </member>
        <member name="M:AgateLib.BitmapFont.FontMetrics.#ctor">
            <summary>
            Constructs an empty font metrics object.
            </summary>
        </member>
        <member name="M:AgateLib.BitmapFont.FontMetrics.Clone">
            <summary>
            Performs a deep copy.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AgateLib.BitmapFont.FontMetrics.Add(System.Char,AgateLib.BitmapFont.GlyphMetrics)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AgateLib.BitmapFont.FontMetrics.ContainsKey(System.Char)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.BitmapFont.FontMetrics.Remove(System.Char)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.BitmapFont.FontMetrics.TryGetValue(System.Char,AgateLib.BitmapFont.GlyphMetrics@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.BitmapFont.FontMetrics.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:AgateLib.BitmapFont.FontMetrics.GetEnumerator">
            <summary>
            Creates an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.BitmapFont.FontMetrics.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.FontMetrics.Values">
            <summary>
            Returns a collection of the value.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.FontMetrics.Item(System.Char)">
            <summary>
            Returns a specified glyph metrics.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.BitmapFont.FontMetrics.Count">
            <summary>
            Returns the number of glyphs.
            </summary>
        </member>
        <member name="T:AgateLib.AudioLib.Music">
            <summary>
            A class which performs Music playback.
            
            This class should support loading of .ogg and .mid files, at the very least.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.Music.#ctor(System.String)">
            <summary>
            Constructs a Music object from a file.
            </summary>
            <param name="filename">The name of the file to load.</param>
        </member>
        <member name="M:AgateLib.AudioLib.Music.#ctor(AgateLib.IFileProvider,System.String)">
            <summary>
            Constructs a Music object from a file given by the specified IFileProvider.
            </summary>
            <param name="fileProvider"></param>
            <param name="filename"></param>
        </member>
        <member name="M:AgateLib.AudioLib.Music.#ctor(System.IO.Stream)">
            <summary>
            Constructs a Music object from a stream.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:AgateLib.AudioLib.Music.Dispose">
            <summary>
            Destroys the unmanaged resources associated with this object.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.Music.Play">
            <summary>
            Begins playback.
            </summary>
        </member>
        <member name="M:AgateLib.AudioLib.Music.Stop">
            <summary>
            Stops playback.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.Music.IsLooping">
            <summary>
            Returns whether or not this Music object is playing in a loop.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.Music.Filename">
            <summary>
            The name of the file this was loaded from.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.Music.Volume">
            <summary>
            Gets or sets the volume. Range is:
            0.0 Quiet
            0.5 Sounds half volume
            1.0 Full volume
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.Music.Pan">
            <summary>
            Gets or sets the left-right balance.  This may or may not be supported
            by some drivers.
            -1 is entirely in the left speaker,
             0 is equally in both and,
             1 is entirely in the right speaker.
            </summary>
        </member>
        <member name="P:AgateLib.AudioLib.Music.IsPlaying">
            <summary>
            Returns true if this Music is currently playing.
            </summary>
        </member>
        <member name="T:AgateLib.Serialization.Xle.XleSerializationInfo">
            <summary>
            The XleSerializationInfo class contains the XML data that is read from 
            or written to when doing XLE serialization.
            </summary>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.String)">
            <summary>
            Writes a field to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Double)">
            <summary>
            Writes a field to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Single)">
            <summary>
            Writes a field to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Boolean)">
            <summary>
            Writes a field to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Char)">
            <summary>
            Writes a field to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Int16)">
            <summary>
            Writes a field to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Int32)">
            <summary>
            Writes a field to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Int64)">
            <summary>
            Writes a field to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Decimal)">
            <summary>
            Writes a field to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.String,System.Boolean)">
            <summary>
            Writes a field to the XML data as an element or an attribute.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
            <param name="asAttribute">Pass true to write the field as an attribute in the parent element.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Double,System.Boolean)">
            <summary>
            Writes a field to the XML data as an element or an attribute.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
            <param name="asAttribute">Pass true to write the field as an attribute in the parent element.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Single,System.Boolean)">
            <summary>
            Writes a field to the XML data as an element or an attribute.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
            <param name="asAttribute">Pass true to write the field as an attribute in the parent element.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes a field to the XML data as an element or an attribute.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
            <param name="asAttribute">Pass true to write the field as an attribute in the parent element.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Char,System.Boolean)">
            <summary>
            Writes a field to the XML data as an element or an attribute.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
            <param name="asAttribute">Pass true to write the field as an attribute in the parent element.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Int16,System.Boolean)">
            <summary>
            Writes a field to the XML data as an element or an attribute.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
            <param name="asAttribute">Pass true to write the field as an attribute in the parent element.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Int32,System.Boolean)">
            <summary>
            Writes a field to the XML data as an element or an attribute.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
            <param name="asAttribute">Pass true to write the field as an attribute in the parent element.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Int64,System.Boolean)">
            <summary>
            Writes a field to the XML data as an element or an attribute.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
            <param name="asAttribute">Pass true to write the field as an attribute in the parent element.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Decimal,System.Boolean)">
            <summary>
            Writes a field to the XML data as an element or an attribute.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The value to write.</param>
            <param name="asAttribute">Pass true to write the field as an attribute in the parent element.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Int32[])">
            <summary>
            Writes an int[] array to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The array data to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Double[])">
            <summary>
            Writes an double[] array to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The array data to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,System.Byte[])">
            <summary>
            Writes a byte[] array to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The array data to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write(System.String,AgateLib.Serialization.Xle.IXleSerializable)">
            <summary>
            Writes an object implementing IXleSerializable to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The object data to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write``1(System.String,``0[])">
            <summary>
            Writes an array of objects implementing IXleSerializable to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The array data to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            Writes a List&lt;T&gt; of objects implementing IXleSerializable to the XML data as an element.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The list data to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write``2(System.String,System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Writes a Dictionary of objects implementing IXleSerializable to the XML data as an element.
            The key type must implement IConvertible and the value type must implment IXleSerializable.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The dictionary to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.Write``1(System.String,System.Collections.Generic.Dictionary{``0,System.String})">
            <summary>
            Writes a Dictionary of strings implementing IXleSerializable to the XML data as an element.
            The key type must implement IConvertible.
            </summary>
            <param name="name">The name of the XML element used.</param>
            <param name="value">The dictionary to write.</param>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadDictionary``2(System.String)">
            <summary>
            Reads a dictionary type from the XML data.
            The key type must implement IConvertible and the value type must implement
            IXleSerializable.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadDictionary``1(System.String)">
            <summary>
            Reads a dictionary type of strings from the XML data.
            The key type must implement IConvertible and the value type must implement
            IXleSerializable.
            </summary>
            <typeparam name="Tkey">The key type of the dictionary.</typeparam>
            <param name="name">The name of the element in the XML stream to decode.</param>
            <returns></returns> 
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadObject(System.String)">
            <summary>
            Reads an object from the XML data.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadString(System.String,System.String)">
            <summary>
            Reads a string from the XML data, with an optional default value substituted
            if the name is not present.
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadString(System.String)">
            <summary>
            Reads a string from the XML data.  If the name is not present 
            an XleSerializationException is thrown.
            </summary>
            <param name="name">The name of the XML field to decode.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadBoolean(System.String)">
            <summary>
            Reads a boolean value from the XML data.  If the name is not present 
            an XleSerializationException is thrown.
            </summary>
            <param name="name">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadInt32(System.String)">
            <summary>
            Reads a integer value from the XML data.  If the name is not present 
            an XleSerializationException is thrown.
            </summary>
            <param name="name">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadInt32(System.String,System.Int32)">
            <summary>
            Reads a integer value from the XML data.  If the name is not present 
            the default value is returned.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="defaultValue">The default value to return if the name is not present.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadDouble(System.String)">
            <summary>
            Reads a double value from the XML data.  If the name is not present 
            an XleSerializationException is thrown.
            </summary>
            <param name="name">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadInt32Array(System.String)">
            <summary>
            Reads a integer array from the XML data.  If the name is not present 
            an XleSerializationException is thrown.
            </summary>
            <param name="name">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadDoubleArray(System.String)">
            <summary>
            Reads a double array from the XML data.  If the name is not present 
            an XleSerializationException is thrown.
            </summary>
            <param name="name">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadArray``1(System.String)">
            <summary>
            Reads an array of objects from the XML data.  If the name is not present 
            an XleSerializationException is thrown.
            </summary>
            <param name="name">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadList``1(System.String)">
            <summary>
            Reads a list of objects from the XML data.  If the name is not present 
            an XleSerializationException is thrown.
            </summary>
            <param name="name">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.Serialization.Xle.XleSerializationInfo.ReadByteArray(System.String)">
            <summary>
            Reads a byte array from the XML data.  If the name is not present 
            an XleSerializationException is thrown.
            </summary>
            <param name="name">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Serialization.Xle.XleSerializationInfo.Binder">
            <summary>
            The ITypeBinder object used.
            </summary>
        </member>
        <member name="T:AgateLib.Resources.BitmapFontResource">
            <summary>
            Resource representing a bitmap font.
            </summary>
        </member>
        <member name="M:AgateLib.Resources.BitmapFontResource.#ctor(System.String)">
            <summary>
            Constructs a BitmapFontResource.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AgateLib.Resources.BitmapFontResource.Clone">
            <summary>
            Performs a deep copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Resources.BitmapFontResource.Image">
            <summary>
            Image file name.
            </summary>
        </member>
        <member name="P:AgateLib.Resources.BitmapFontResource.FontMetrics">
            <summary>
            Font metrics data.
            </summary>
        </member>
        <member name="T:AgateLib.Drivers.Registrar">
            <summary>
            Static class with which drivers register themselves so that the library can
            instantiate them.
            </summary>
        </member>
        <member name="M:AgateLib.Drivers.Registrar.Initialize">
            <summary>
            Searches through FileManager.AssemblyPath for all *.dll files.  These files
            are loaded and searched for classes which derive from DisplayImpl, AudioImpl, etc.
            </summary>
        </member>
        <member name="M:AgateLib.Drivers.Registrar.UserSelectDrivers(System.Boolean,System.Boolean,System.Boolean,AgateLib.Drivers.DisplayTypeID@,AgateLib.Drivers.AudioTypeID@,AgateLib.Drivers.InputTypeID@)">
            <summary>
            Asks the user to select which drivers to use.
            </summary>
            <param name="chooseDisplay"></param>
            <param name="chooseAudio"></param>
            <param name="chooseInput"></param>
            <param name="selectedDisplay"></param>
            <param name="selectedAudio"></param>
            <param name="selectedInput"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Drivers.Registrar.DisplayDrivers">
            <summary>
            Returns a collection with all the DriverInfo&lt;DisplayTypeID&gt; structures for
            registered display drivers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Drivers.Registrar.AudioDrivers">
            <summary>
            Returns a collection with all the DriverInfo&lt;AudioTypeID&gt; structures for
            registered display drivers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.Drivers.Registrar.InputDrivers">
            <summary>
            Returns a collection with all the DriverInfo&lt;InputTypeID&gt; structures for
            registered display drivers.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AgateLib.DisplayLib.WindowPosition">
            <summary>
            Enum which describes what position the window should be created at on screen.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.WindowPosition.DefaultAgate">
            <summary>
            Lets AgateLib choose where to position the window.  
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.WindowPosition.DefaultOS">
            <summary>
            Let the runtime decide where the window is placed.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.WindowPosition.AboveCenter">
            <summary>
            Center the window horizontally on screen, but vertically above center.
            This often looks better because the vertical center of the monitor is usually 
            positioned below eye-level.
            </summary>
        </member>
        <member name="F:AgateLib.DisplayLib.WindowPosition.CenterScreen">
            <summary>
            Center the window on the screen.
            </summary>
        </member>
        <member name="T:AgateLib.DisplayLib.CreateWindowParams">
            <summary>
            Class which describes how a DisplayWindow should be created.
            Several static methods exist to allow 
            </summary>
        </member>
        <member name="M:AgateLib.DisplayLib.CreateWindowParams.FromControl(System.Object)">
            <summary>
            Creates a CreateWindowParams object which describes rendering into a WinForms control.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.CreateWindowParams.FullScreen(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a CreateWindowParams object which describes a fullscreen window.
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bpp"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.CreateWindowParams.Windowed(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Creates a CreateWindowParams object which describes a typical window for non-fullscreen use.
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="iconFile"></param>
            <param name="allowResize"></param>
            <returns></returns>
        </member>
        <member name="M:AgateLib.DisplayLib.CreateWindowParams.NoFrame(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a CreateWindowParams object which describes a desktop window with no frame or
            titlebar.  This might be used for showing a splashscreen as the application loads.
            </summary>
            <param name="title"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.Title">
            <summary>
            Title of the window.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.IsFullScreen">
            <summary>
            Whether or not the window should be created as a full screen window.  Defaults to false.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.Size">
            <summary>
            Size of the window.  Defaults to 1024x768.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.Width">
            <summary>
            Width of the window
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.Height">
            <summary>
            Height of the window
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.WindowPosition">
            <summary>
            Sets the initial position of the window.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.Bpp">
            <summary>
            Bit depth for the framebuffer for the window.  This defaults to 32.  This
            field is (usually) ignored if we are not creating a full-screen window.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.IsResizable">
            <summary>
            Whether or not the user can manually resize the window.  Defaults to false.  Ignored
            for full-screen windows.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.HasFrame">
            <summary>
            Whether or not the window is drawn with a frame and titlebar.  This property is ignored
            for fullscreen windows.  Defaults to true.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.HasMaximize">
            <summary>
            Whether or not the window has a maximize button.  In general, this should be equal to the
            IsResizable property.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.HasMinimize">
            <summary>
            Whether or not the window has a minimize button.  This should generally be true.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.IconFile">
            <summary>
            Path to a .ico file to use for the window icon.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.RenderToControl">
            <summary>
            True if we are in fact rendering to a WinForms control, rather than creating
            a window to be managed by AgateLib.
            </summary>
        </member>
        <member name="P:AgateLib.DisplayLib.CreateWindowParams.RenderTarget">
            <summary>
            Control to be rendered to.  This is ignored if RenderToControl is false.
            </summary>
        </member>
        <member name="T:AgateLib.BitmapFont.GlyphMetrics">
            <summary>
            GlyphMetrics defines the metrics for a particular glyph in a font, including
            the rectangle of the glyph on the source image, overhang, and kerning pairs.
            </summary>
        </member>
        <member name="M:AgateLib.BitmapFont.GlyphMetrics.#ctor">
            <summary>
            Constructs a GlyphMetrics object.
            </summary>
        </member>
        <member name="M:AgateLib.BitmapFont.GlyphMetrics.#ctor(AgateLib.Geometry.Rectangle)">
            <summary>
            Constructs a GlyphMetrics object with the specified source rectangle.
            </summary>
            <param name="srcRect"></param>
        </member>
        <member name="M:AgateLib.BitmapFont.GlyphMetrics.Clone">
            <summary>
            Performs a deep copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AgateLib.BitmapFont.GlyphMetrics.SourceRect">
            <summary>
            Source rectangle on the image which supplies the glyph.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.GlyphMetrics.Width">
            <summary>
            Gets or sets the width of the glyph.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.GlyphMetrics.Height">
            <summary>
            Gets or sets the height of the glyph.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.GlyphMetrics.Size">
            <summary>
            Gets or sets the size of the glyph.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.GlyphMetrics.LeftOverhang">
            <summary>
            Number of pixels this character is shifted to the left.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.GlyphMetrics.RightOverhang">
            <summary>
            Number of pixels the next character should be shifted to the left.
            </summary>
        </member>
        <member name="P:AgateLib.BitmapFont.GlyphMetrics.KerningPairs">
            <summary>
            A dictionary of characters which need kerning when paired with this glyph.
            </summary>
        </member>
    </members>
</doc>
